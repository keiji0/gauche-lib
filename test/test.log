Testing mw.config =============================================================
testing bindings in #<module mw.config> ... ok
test define-config 1, expects x ==> ok
test define-config 2, expects "abc" ==> ok
test define-config (validator), expects 888 ==> ok
test initialize-config! 1, expects #f ==> ok
test initialize-config! 2, expects 20 ==> ok
test initialize-config! 3, expects ("jojo" "hoge") ==> ok
test with-config, expects (8 "jojo") ==> ok
passed.
Testing mw.entry ==============================================================
testing bindings in #<module mw.entry> ... ok
<entry-main 1>-----------------------------------------------------------------
test dispatch entry 1, expects "world!" ==> ok
test dispatch entry 2, expects "hoge" ==> ok
test dispatch entry 3, expects "ORAORA!" ==> ok
test dispatch entry 4, expects "Foo" ==> ok
test dispatch entry 5, expects "#f" ==> ok
test response header, expects "jojo" ==> ok
test view, expects "jojo" ==> ok
test error handler, expects "500 Internal Server Error" ==> ok
test error handler, expects "999 Test error" ==> ok
test error-view, expects "ORA!" ==> ok
Start http server => http://localhost:8080/
  document-root: /Users/keiji/Desktop/mw/test
Testing mw.generator ==========================================================
testing bindings in #<module mw.generator> ... ok
<session 1>--------------------------------------------------------------------
Create  generator.tmp/hoge :mode 600
test make file exists?, expects #t ==> ok
test make file mode?, expects 384 ==> ok
test make file content?, expects "HOGE" ==> ok
Create! generator.tmp/hoge :mode 644
test override file!, expects "hoge" ==> ok
Create  generator.tmp/bar/ :mode 600
test make directory exists?, expects #t ==> ok
test make directory mode?, expects 384 ==> ok
<session 2>--------------------------------------------------------------------
Create  generator.tmp/bar/ :mode 755
Create  generator.tmp/bar/hoge :mode 644
Create  generator.tmp/bar/jojo :mode 644
test recursion directory, expects #t ==> ok
passed.
Testing mw.interp.json ========================================================
testing bindings in #<module mw.interp.json> ... ok
test sexp->json, expects "{\"bar\":8,\"hoge\":[\"a\",\"b\"]}" ==> ok
passed.
Testing mw.interp.sxml ========================================================
testing bindings in #<module mw.interp.sxml> ... ok
test sxml->xml, expects "<a hoge='bar -&gt;'>&lt;- abc</a>" ==> ok
test make-interp-sxml, expects (hoge "ab" (a (|@| (hoge "bar ->")) "abc ->")) ==> ok
test top-level attribute, expects (hoge (|@| (aaa "aaa"))) ==> ok
passed.
Testing mw.interp =============================================================
testing bindings in #<module mw.interp> ... ok
test interp-generic, expects (2 2 2) ==> ok
passed.
Testing mw.mime-type ==========================================================
testing bindings in #<module mw.mime-type> ... ok
test get-mime-type, expects ("text/html" "application/pdf") ==> ok
test file-mime-type, expects "application/rdf+xml" ==> ok
test add-mime-type!, expects ("application/hoge" "application/hoge") ==> ok
passed.
Testing mw.persistent =========================================================
testing bindings in #<module mw.persistent> ... ok
test creating database, expects #t ==> ok
test creating & persistent, expects "hoge" ==> ok
test change instance, expects 99 ==> ok
test serialize <persistent>, expects #t ==> ok
test serialize <hash-table>, expects #t ==> ok
test Collection, expects ("taro" "bar" "hoge") ==> ok
test Transaction 1, expects 99 ==> ok
test Transaction 2, expects #f ==> ok
test Delete, expects #f ==> ok
passed.
Testing mw.plugin =============================================================
testing bindings in #<module mw.plugin> ... ok
test initialize-plugins, expects (8) ==> ok
passed.
Testing mw.servelet.cgi =======================================================
testing bindings in #<module mw.servelet.cgi> ... ok
test run cgi-servelet, expects "HOGE" ==> ok
passed.
Testing mw.servelet.fs ========================================================
testing bindings in #<module mw.servelet.fs> ... ok
test GET /hoge.text, expects #t ==> ok
test GET /, expects #t ==> ok
test Not found, expects "404" ==> ok
test Forbidden, expects "403" ==> ok
passed.
Testing mw.httpd ==============================================================
testing bindings in #<module mw.server.httpd> ... ok
<parse-request-line>-----------------------------------------------------------
test parse-request-line, expects ("GET" "/hoge" "HTTP/1.0") ==> ok
test parse-request-line, expects ("GET" "/hoge" "HTTP/1.1") ==> ok
test parse-request-line error HTTP/1.2?, expects #t ==> ok
<parse-request-uri>------------------------------------------------------------
test parse-request-uri /bar/hoge?jojo, expects ("bar" "/hoge" "jojo") ==> ok
test parse-request-uri /bar, expects ("bar" #f #f) ==> ok
test parse-request-uri /bar?jojo, expects ("bar" #f "jojo") ==> ok
test parse-request-uri /, expects ("" #f #f) ==> ok
test parse-request-uri /?ABC, expects ("" #f "ABC") ==> ok
<http-metavariables>-----------------------------------------------------------
test http-metavariables, expects () ==> ok
test http-metavariable-set! & ref, expects "ORAORA!!!" ==> ok
test http-metavariable-ref, expects #f ==> ok
<httpd>------------------------------------------------------------------------
test default servelet, expects "hoge" ==> ok
test servelet jojo, expects "ORAORA!!!" ==> ok
passed.
Testing mw.server.repl ========================================================
testing bindings in #<module mw.server.repl> ... ok
test repl-eval, expects "((8 . 8) 20)" ==> ok
test repl-eval (error), expects "*** ERROR: 8" ==> ok
passed.
Testing mw.server =============================================================
testing bindings in #<module mw.server> ... ok
test run-server, expects "2x2" ==> ok
passed.
Testing mw.set ================================================================
testing bindings in #<module mw.set> ... ok
test , expects (6 "scheme" "lisp" "elisp" "haskell" "sml" "ocaml") ==> ok
test subseq*, expects ("lisp" "elisp") ==> ok
test <class/set/set>, expects (4 . #t) ==> ok
test set-intersection, expects ("ocaml") ==> ok
test map-set$, expects ("object" "hoge" "jojo") ==> ok
test <elt> <= <set-set>, expects (#f #f) ==> ok
test delete! <elt>, expects #f ==> ok
test delete! <set>, expects #f ==> ok
test (<A> <- (subseq* <A> (- (size-of <A>) 2))), expects #f ==> ok
passed.
Testing mw.test.cgi ===========================================================
testing bindings in #<module mw.test.cgi> ... ok
test define-cgi-script, expects #t ==> ok
test call-with-cgi-script 1, expects "JOJO" ==> ok
test call-with-cgi-script 2, expects "abc" ==> ok
passed.
Testing mw.textlight ==========================================================
testing bindings in #<module mw.textlight> ... ok
test read List, expects (ol (li "hoge") (li (ol (li "hoge") (li "jojo"))) (li "bar") (li (ul (li "bar") (li "jojo")))) ==> ok
test read Paragraph, expects (p "hoge" "hoge") ==> ok
test read Preformatted, expects (pre " hoge" "\n" " hoge") ==> ok
test read Macro [table], expects (table (caption "jojo") (tr (th "hoge") (th "bar")) (tr (td "bar") (td "hoge"))) ==> ok
test read Macro [dl], expects (dl (dt "hoge") (dd "bar") (dt "bar") (dd "hoge") (dt "huga") (dd "test jojo abc defg")) ==> ok
passed.
Testing mw.time.http ==========================================================
testing bindings in #<module mw.time.http> ... ok
test time->http-date, expects "Tue, 11 Oct 2005 09:52:12 GMT" ==> ok
passed.
Testing mw.time.w3cdtf ========================================================
testing bindings in #<module mw.time.w3cdtf> ... ok
test w3cdtf->time, expects #t ==> ok
test time->w3cdtf <> w3cdtf->time, expects "2005-08-21T17:38:30Z" ==> ok
test time->w3cdtf <local> w3cdtf->time, expects "2005-08-21T17:38:30+09:00" ==> ok
passed.
Testing mw.user ===============================================================
testing bindings in #<module mw.user> ... ok
test make-user, expects "hoge" ==> ok
test check-user?, expects #t ==> ok
test user-password-change, expects #t ==> ok
passed.
Testing mw.util ===============================================================
testing bindings in #<module mw.util> ... ok
test get-error-string, expects "hoge" ==> ok
test get-error-string long-message, expects "*** ERROR: hoge" ==> ok
test check=>, expects a ==> ok
test let$, expects (1 2 3) ==> (1 2 3)ok
test and*=>, expects #\a ==> ok
test and*=>, expects #f ==> ok
test and=> 1, expects 20 ==> ok
test and=> 2, expects #f ==> ok
test and=> 3, expects 3 ==> ok
test receive-alist 1, expects (20 . 50) ==> ok
test receive-alist 2, expects (20 50) ==> ok
test receive-slot 1, expects (20 30 40) ==> ok
test receive-slot 2, expects (20 40 . 30) ==> ok
test slot-update!, expects 88 ==> ok
test define-table (eq?), expects 8 ==> ok
test define-table (string=?), expects 8 ==> ok
test define-table (), expects b ==> ok
test define-table (get x . def), expects "hoge" ==> ok
test define-table (add delete!), expects (80 . #f) ==> ok
test case*, expects ok ==> ok
passed.
Testing mw.view ===============================================================
testing bindings in #<module mw.view> ... ok
test view 1, expects "hoge" ==> ok
test view 2, expects ("hoge" "hoge") ==> ok
passed.
Testing mw.config =============================================================
testing bindings in #<module mw.config> ... ok
test define-config 1, expects x ==> ok
test define-config 2, expects "abc" ==> ok
test define-config (validator), expects 888 ==> ok
test initialize-config! 1, expects #f ==> ok
test initialize-config! 2, expects 20 ==> ok
test initialize-config! 3, expects ("jojo" "hoge") ==> ok
test with-config, expects (8 "jojo") ==> ok
passed.
Testing mw.entry ==============================================================
testing bindings in #<module mw.entry> ... ok
<entry-main 1>-----------------------------------------------------------------
test dispatch entry 1, expects "world!" ==> ok
test dispatch entry 2, expects "hoge" ==> ok
test dispatch entry 3, expects "ORAORA!" ==> ok
test dispatch entry 4, expects "Foo" ==> ok
test dispatch entry 5, expects "#f" ==> ok
test response header, expects "jojo" ==> ok
test view, expects "jojo" ==> ok
test error handler, expects "500 Internal Server Error" ==> ok
test error handler, expects "999 Test error" ==> ok
test error-view, expects "ORA!" ==> ok
passed.
Testing mw.generator ==========================================================
testing bindings in #<module mw.generator> ... ok
<session 1>--------------------------------------------------------------------
Create  generator.tmp/hoge :mode 600
test make file exists?, expects #t ==> ok
test make file mode?, expects 384 ==> ok
test make file content?, expects "HOGE" ==> ok
Create! generator.tmp/hoge :mode 644
test override file!, expects "hoge" ==> ok
Create  generator.tmp/bar/ :mode 600
test make directory exists?, expects #t ==> ok
test make directory mode?, expects 384 ==> ok
<session 2>--------------------------------------------------------------------
Create  generator.tmp/bar/ :mode 755
Create  generator.tmp/bar/hoge :mode 644
Create  generator.tmp/bar/jojo :mode 644
test recursion directory, expects #t ==> ok
passed.
Testing mw.interp.json ========================================================
testing bindings in #<module mw.interp.json> ... ok
test sexp->json, expects "{\"bar\":8,\"hoge\":[\"a\",\"b\"]}" ==> ok
passed.
Testing mw.interp.sxml ========================================================
testing bindings in #<module mw.interp.sxml> ... ok
test sxml->xml, expects "<a hoge='bar -&gt;'>&lt;- abc</a>" ==> ok
test make-interp-sxml, expects (hoge "ab" (a (|@| (hoge "bar ->")) "abc ->")) ==> ok
test top-level attribute, expects (hoge (|@| (aaa "aaa"))) ==> ok
passed.
Testing mw.interp =============================================================
testing bindings in #<module mw.interp> ... ok
test interp-generic, expects (2 2 2) ==> ok
passed.
Testing mw.mime-type ==========================================================
testing bindings in #<module mw.mime-type> ... ok
test get-mime-type, expects ("text/html" "application/pdf") ==> ok
test file-mime-type, expects "application/rdf+xml" ==> ok
test add-mime-type!, expects ("application/hoge" "application/hoge") ==> ok
passed.
Testing mw.persistent =========================================================
testing bindings in #<module mw.persistent> ... ok
test creating database, expects #t ==> ok
test creating & persistent, expects "hoge" ==> ok
test change instance, expects 99 ==> ok
test serialize <persistent>, expects #t ==> ok
test serialize <hash-table>, expects #t ==> ok
test Collection, expects ("taro" "bar" "hoge") ==> ok
test Transaction 1, expects 99 ==> ok
test Transaction 2, expects #f ==> ok
test Delete, expects #f ==> ok
passed.
Testing mw.plugin =============================================================
testing bindings in #<module mw.plugin> ... ok
test initialize-plugins, expects (8) ==> ok
passed.
Testing mw.servelet.cgi =======================================================
testing bindings in #<module mw.servelet.cgi> ... ok
test run cgi-servelet, expects "HOGE" ==> ok
passed.
Testing mw.servelet.fs ========================================================
testing bindings in #<module mw.servelet.fs> ... ok
test GET /hoge.text, expects #t ==> ok
test GET /, expects #t ==> ok
test Not found, expects "404" ==> ok
test Forbidden, expects "403" ==> ok
passed.
Testing mw.httpd ==============================================================
testing bindings in #<module mw.server.httpd> ... ok
<parse-request-line>-----------------------------------------------------------
test parse-request-line, expects ("GET" "/hoge" "HTTP/1.0") ==> ok
test parse-request-line, expects ("GET" "/hoge" "HTTP/1.1") ==> ok
test parse-request-line error HTTP/1.2?, expects #t ==> ok
<parse-request-uri>------------------------------------------------------------
test parse-request-uri /bar/hoge?jojo, expects ("bar" "/hoge" "jojo") ==> ok
test parse-request-uri /bar, expects ("bar" #f #f) ==> ok
test parse-request-uri /bar?jojo, expects ("bar" #f "jojo") ==> ok
test parse-request-uri /, expects ("" #f #f) ==> ok
test parse-request-uri /?ABC, expects ("" #f "ABC") ==> ok
<http-metavariables>-----------------------------------------------------------
test http-metavariables, expects () ==> ok
test http-metavariable-set! & ref, expects "ORAORA!!!" ==> ok
test http-metavariable-ref, expects #f ==> ok
<httpd>------------------------------------------------------------------------
test default servelet, expects "hoge" ==> ok
test servelet jojo, expects "ORAORA!!!" ==> ok
passed.
Testing mw.server.repl ========================================================
testing bindings in #<module mw.server.repl> ... ok
test repl-eval, expects "((8 . 8) 20)" ==> ok
test repl-eval (error), expects "*** ERROR: 8" ==> ok
passed.
Testing mw.server =============================================================
testing bindings in #<module mw.server> ... ok
test run-server, expects "2x2" ==> ok
passed.
Testing mw.set ================================================================
testing bindings in #<module mw.set> ... ok
test , expects (6 "scheme" "lisp" "elisp" "haskell" "sml" "ocaml") ==> ok
test subseq*, expects ("lisp" "elisp") ==> ok
test <class/set/set>, expects (4 . #t) ==> ok
test set-intersection, expects ("ocaml") ==> ok
test map-set$, expects ("object" "hoge" "jojo") ==> ok
test <elt> <= <set-set>, expects (#f #f) ==> ok
test delete! <elt>, expects #f ==> ok
test delete! <set>, expects #f ==> ok
test (<A> <- (subseq* <A> (- (size-of <A>) 2))), expects #f ==> ok
passed.
Testing mw.test.cgi ===========================================================
testing bindings in #<module mw.test.cgi> ... ok
test define-cgi-script, expects #t ==> ok
test call-with-cgi-script 1, expects "JOJO" ==> ok
test call-with-cgi-script 2, expects "abc" ==> ok
passed.
Testing mw.textlight ==========================================================
testing bindings in #<module mw.textlight> ... ok
test read List, expects (ol (li "hoge") (li (ol (li "hoge") (li "jojo"))) (li "bar") (li (ul (li "bar") (li "jojo")))) ==> ok
test read Paragraph, expects (p "hoge" "hoge") ==> ok
test read Preformatted, expects (pre " hoge" "\n" " hoge") ==> ok
test read Macro [table], expects (table (caption "jojo") (tr (th "hoge") (th "bar")) (tr (td "bar") (td "hoge"))) ==> ok
test read Macro [dl], expects (dl (dt "hoge") (dd "bar") (dt "bar") (dd "hoge") (dt "huga") (dd "test jojo abc defg")) ==> ok
passed.
Testing mw.time.http ==========================================================
testing bindings in #<module mw.time.http> ... ok
test time->http-date, expects "Tue, 11 Oct 2005 09:52:12 GMT" ==> ok
passed.
Testing mw.time.w3cdtf ========================================================
testing bindings in #<module mw.time.w3cdtf> ... ok
test w3cdtf->time, expects #t ==> ok
test time->w3cdtf <> w3cdtf->time, expects "2005-08-21T17:38:30Z" ==> ok
test time->w3cdtf <local> w3cdtf->time, expects "2005-08-21T17:38:30+09:00" ==> ok
passed.
Testing mw.user ===============================================================
testing bindings in #<module mw.user> ... ok
test make-user, expects "hoge" ==> ok
test check-user?, expects #t ==> ok
test user-password-change, expects #t ==> ok
passed.
Testing mw.util ===============================================================
testing bindings in #<module mw.util> ... ok
test get-error-string, expects "hoge" ==> ok
test get-error-string long-message, expects "*** ERROR: hoge" ==> ok
test check=>, expects a ==> ok
test let$, expects (1 2 3) ==> (1 2 3)ok
test and*=>, expects #\a ==> ok
test and*=>, expects #f ==> ok
test and=> 1, expects 20 ==> ok
test and=> 2, expects #f ==> ok
test and=> 3, expects 3 ==> ok
test receive-alist 1, expects (20 . 50) ==> ok
test receive-alist 2, expects (20 50) ==> ok
test receive-slot 1, expects (20 30 40) ==> ok
test receive-slot 2, expects (20 40 . 30) ==> ok
test slot-update!, expects 88 ==> ok
test define-table (eq?), expects 8 ==> ok
test define-table (string=?), expects 8 ==> ok
test define-table (), expects b ==> ok
test define-table (get x . def), expects "hoge" ==> ok
test define-table (add delete!), expects (80 . #f) ==> ok
test case*, expects ok ==> ok
passed.
Testing mw.view ===============================================================
testing bindings in #<module mw.view> ... ok
test view 1, expects "hoge" ==> ok
test view 2, expects ("hoge" "hoge") ==> ok
passed.
Testing mw.config =============================================================
testing bindings in #<module mw.config> ... ok
test define-config 1, expects x ==> ok
test define-config 2, expects "abc" ==> ok
test define-config (validator), expects 888 ==> ok
test initialize-config! 1, expects #f ==> ok
test initialize-config! 2, expects 20 ==> ok
test initialize-config! 3, expects ("jojo" "hoge") ==> ok
test with-config, expects (8 "jojo") ==> ok
passed.
Testing mw.entry ==============================================================
testing bindings in #<module mw.entry> ... ok
<entry-main 1>-----------------------------------------------------------------
test dispatch entry 1, expects "world!" ==> ok
test dispatch entry 2, expects "hoge" ==> ok
test dispatch entry 3, expects "ORAORA!" ==> ok
test dispatch entry 4, expects "Foo" ==> ok
test dispatch entry 5, expects "#f" ==> ok
test response header, expects "jojo" ==> ok
test view, expects "jojo" ==> ok
test error handler, expects "500 Internal Server Error" ==> ok
test error handler, expects "999 Test error" ==> ok
test error-view, expects "ORA!" ==> ok
passed.
Testing mw.generator ==========================================================
testing bindings in #<module mw.generator> ... ok
<session 1>--------------------------------------------------------------------
Create  generator.tmp/hoge :mode 600
test make file exists?, expects #t ==> ok
test make file mode?, expects 384 ==> ok
test make file content?, expects "HOGE" ==> ok
Create! generator.tmp/hoge :mode 644
test override file!, expects "hoge" ==> ok
Create  generator.tmp/bar/ :mode 600
test make directory exists?, expects #t ==> ok
test make directory mode?, expects 384 ==> ok
<session 2>--------------------------------------------------------------------
Create  generator.tmp/bar/ :mode 755
Create  generator.tmp/bar/hoge :mode 644
Create  generator.tmp/bar/jojo :mode 644
test recursion directory, expects #t ==> ok
passed.
Testing mw.interp.json ========================================================
testing bindings in #<module mw.interp.json> ... ok
test sexp->json, expects "{\"bar\":8,\"hoge\":[\"a\",\"b\"]}" ==> ok
passed.
Testing mw.interp.sxml ========================================================
testing bindings in #<module mw.interp.sxml> ... ok
test sxml->xml, expects "<a hoge='bar -&gt;'>&lt;- abc</a>" ==> ok
test make-interp-sxml, expects (hoge "ab" (a (|@| (hoge "bar ->")) "abc ->")) ==> ok
test top-level attribute, expects (hoge (|@| (aaa "aaa"))) ==> ok
passed.
Testing mw.interp =============================================================
testing bindings in #<module mw.interp> ... ok
test interp-generic, expects (2 2 2) ==> ok
passed.
Testing mw.mime-type ==========================================================
testing bindings in #<module mw.mime-type> ... ok
test get-mime-type, expects ("text/html" "application/pdf") ==> ok
test file-mime-type, expects "application/rdf+xml" ==> ok
test add-mime-type!, expects ("application/hoge" "application/hoge") ==> ok
passed.
Testing mw.persistent =========================================================
testing bindings in #<module mw.persistent> ... ok
test creating database, expects #t ==> ok
test creating & persistent, expects "hoge" ==> ok
test change instance, expects 99 ==> ok
test serialize <persistent>, expects #t ==> ok
test serialize <hash-table>, expects #t ==> ok
test Collection, expects ("taro" "bar" "hoge") ==> ok
test Transaction 1, expects 99 ==> ok
test Transaction 2, expects #f ==> ok
test Delete, expects #f ==> ok
passed.
Testing mw.plugin =============================================================
testing bindings in #<module mw.plugin> ... ok
test initialize-plugins, expects (8) ==> ok
passed.
Testing mw.servelet.cgi =======================================================
testing bindings in #<module mw.servelet.cgi> ... ok
test run cgi-servelet, expects "HOGE" ==> ok
passed.
Testing mw.servelet.fs ========================================================
testing bindings in #<module mw.servelet.fs> ... ok
test GET /hoge.text, expects #t ==> ok
test GET /, expects #t ==> ok
test Not found, expects "404" ==> ok
test Forbidden, expects "403" ==> ok
passed.
Testing mw.httpd ==============================================================
testing bindings in #<module mw.server.httpd> ... ok
<parse-request-line>-----------------------------------------------------------
test parse-request-line, expects ("GET" "/hoge" "HTTP/1.0") ==> ok
test parse-request-line, expects ("GET" "/hoge" "HTTP/1.1") ==> ok
test parse-request-line error HTTP/1.2?, expects #t ==> ok
<parse-request-uri>------------------------------------------------------------
test parse-request-uri /bar/hoge?jojo, expects ("bar" "/hoge" "jojo") ==> ok
test parse-request-uri /bar, expects ("bar" #f #f) ==> ok
test parse-request-uri /bar?jojo, expects ("bar" #f "jojo") ==> ok
test parse-request-uri /, expects ("" #f #f) ==> ok
test parse-request-uri /?ABC, expects ("" #f "ABC") ==> ok
<http-metavariables>-----------------------------------------------------------
test http-metavariables, expects () ==> ok
test http-metavariable-set! & ref, expects "ORAORA!!!" ==> ok
test http-metavariable-ref, expects #f ==> ok
<httpd>------------------------------------------------------------------------
test default servelet, expects "hoge" ==> ok
test servelet jojo, expects "ORAORA!!!" ==> ok
passed.
Testing mw.server.repl ========================================================
testing bindings in #<module mw.server.repl> ... ok
test repl-eval, expects "((8 . 8) 20)" ==> ok
test repl-eval (error), expects "*** ERROR: 8" ==> ok
passed.
Testing mw.server =============================================================
testing bindings in #<module mw.server> ... ok
test run-server, expects "2x2" ==> ok
passed.
Testing mw.set ================================================================
testing bindings in #<module mw.set> ... ok
test , expects (6 "scheme" "lisp" "elisp" "haskell" "sml" "ocaml") ==> ok
test subseq*, expects ("lisp" "elisp") ==> ok
test <class/set/set>, expects (4 . #t) ==> ok
test set-intersection, expects ("ocaml") ==> ok
test map-set$, expects ("object" "hoge" "jojo") ==> ok
test <elt> <= <set-set>, expects (#f #f) ==> ok
test delete! <elt>, expects #f ==> ok
test delete! <set>, expects #f ==> ok
test (<A> <- (subseq* <A> (- (size-of <A>) 2))), expects #f ==> ok
passed.
Testing mw.test.cgi ===========================================================
testing bindings in #<module mw.test.cgi> ... ok
test define-cgi-script, expects #t ==> ok
test call-with-cgi-script 1, expects "JOJO" ==> ok
test call-with-cgi-script 2, expects "abc" ==> ok
passed.
Testing mw.textlight ==========================================================
testing bindings in #<module mw.textlight> ... ok
test read List, expects (ol (li "hoge") (li (ol (li "hoge") (li "jojo"))) (li "bar") (li (ul (li "bar") (li "jojo")))) ==> ok
test read Paragraph, expects (p "hoge" "hoge") ==> ok
test read Preformatted, expects (pre " hoge" "\n" " hoge") ==> ok
test read Macro [table], expects (table (caption "jojo") (tr (th "hoge") (th "bar")) (tr (td "bar") (td "hoge"))) ==> ok
test read Macro [dl], expects (dl (dt "hoge") (dd "bar") (dt "bar") (dd "hoge") (dt "huga") (dd "test jojo abc defg")) ==> ok
passed.
Testing mw.time.http ==========================================================
testing bindings in #<module mw.time.http> ... ok
test time->http-date, expects "Tue, 11 Oct 2005 09:52:12 GMT" ==> ok
passed.
Testing mw.time.w3cdtf ========================================================
testing bindings in #<module mw.time.w3cdtf> ... ok
test w3cdtf->time, expects #t ==> ok
test time->w3cdtf <> w3cdtf->time, expects "2005-08-21T17:38:30Z" ==> ok
test time->w3cdtf <local> w3cdtf->time, expects "2005-08-21T17:38:30+09:00" ==> ok
passed.
Testing mw.user ===============================================================
testing bindings in #<module mw.user> ... ok
test make-user, expects "hoge" ==> ok
test check-user?, expects #t ==> ok
test user-password-change, expects #t ==> ok
passed.
Testing mw.util ===============================================================
testing bindings in #<module mw.util> ... ok
test get-error-string, expects "hoge" ==> ok
test get-error-string long-message, expects "*** ERROR: hoge" ==> ok
test check=>, expects a ==> ok
test let$, expects (1 2 3) ==> (1 2 3)ok
test and*=>, expects #\a ==> ok
test and*=>, expects #f ==> ok
test and=> 1, expects 20 ==> ok
test and=> 2, expects #f ==> ok
test and=> 3, expects 3 ==> ok
test receive-alist 1, expects (20 . 50) ==> ok
test receive-alist 2, expects (20 50) ==> ok
test receive-slot 1, expects (20 30 40) ==> ok
test receive-slot 2, expects (20 40 . 30) ==> ok
test slot-update!, expects 88 ==> ok
test define-table (eq?), expects 8 ==> ok
test define-table (string=?), expects 8 ==> ok
test define-table (), expects b ==> ok
test define-table (get x . def), expects "hoge" ==> ok
test define-table (add delete!), expects (80 . #f) ==> ok
test case*, expects ok ==> ok
passed.
Testing mw.view ===============================================================
testing bindings in #<module mw.view> ... ok
test view 1, expects "hoge" ==> ok
test view 2, expects ("hoge" "hoge") ==> ok
passed.
Testing mw.config =============================================================
testing bindings in #<module mw.config> ... ok
test define-config 1, expects x ==> ok
test define-config 2, expects "abc" ==> ok
test define-config (validator), expects 888 ==> ok
test initialize-config! 1, expects #f ==> ok
test initialize-config! 2, expects 20 ==> ok
test initialize-config! 3, expects ("jojo" "hoge") ==> ok
test with-config, expects (8 "jojo") ==> ok
passed.
Testing mw.entry ==============================================================
testing bindings in #<module mw.entry> ... ok
<entry-main 1>-----------------------------------------------------------------
test dispatch entry 1, expects "world!" ==> ok
test dispatch entry 2, expects "hoge" ==> ok
test dispatch entry 3, expects "ORAORA!" ==> ok
test dispatch entry 4, expects "Foo" ==> ok
test dispatch entry 5, expects "#f" ==> ok
test response header, expects "jojo" ==> ok
test view, expects "jojo" ==> ok
test error handler, expects "500 Internal Server Error" ==> ok
test error handler, expects "999 Test error" ==> ok
test error-view, expects "ORA!" ==> ok
passed.
Testing mw.generator ==========================================================
testing bindings in #<module mw.generator> ... ok
<session 1>--------------------------------------------------------------------
Create  generator.tmp/hoge :mode 600
test make file exists?, expects #t ==> ok
test make file mode?, expects 384 ==> ok
test make file content?, expects "HOGE" ==> ok
Create! generator.tmp/hoge :mode 644
test override file!, expects "hoge" ==> ok
Create  generator.tmp/bar/ :mode 600
test make directory exists?, expects #t ==> ok
test make directory mode?, expects 384 ==> ok
<session 2>--------------------------------------------------------------------
Create  generator.tmp/bar/ :mode 755
Create  generator.tmp/bar/hoge :mode 644
Create  generator.tmp/bar/jojo :mode 644
test recursion directory, expects #t ==> ok
passed.
Testing mw.interp.json ========================================================
testing bindings in #<module mw.interp.json> ... ok
test sexp->json, expects "{\"bar\":8,\"hoge\":[\"a\",\"b\"]}" ==> ok
passed.
Testing mw.interp.sxml ========================================================
testing bindings in #<module mw.interp.sxml> ... ok
test sxml->xml, expects "<a hoge='bar -&gt;'>&lt;- abc</a>" ==> ok
test make-interp-sxml, expects (hoge "ab" (a (|@| (hoge "bar ->")) "abc ->")) ==> ok
test top-level attribute, expects (hoge (|@| (aaa "aaa"))) ==> ok
passed.
Testing mw.interp =============================================================
testing bindings in #<module mw.interp> ... ok
test interp-generic, expects (2 2 2) ==> ok
passed.
Testing mw.mime-type ==========================================================
testing bindings in #<module mw.mime-type> ... ok
test get-mime-type, expects ("text/html" "application/pdf") ==> ok
test file-mime-type, expects "application/rdf+xml" ==> ok
test add-mime-type!, expects ("application/hoge" "application/hoge") ==> ok
passed.
Testing mw.persistent =========================================================
testing bindings in #<module mw.persistent> ... ok
test creating database, expects #t ==> ok
test creating & persistent, expects "hoge" ==> ok
test change instance, expects 99 ==> ok
test serialize <persistent>, expects #t ==> ok
test serialize <hash-table>, expects #t ==> ok
test Collection, expects ("taro" "bar" "hoge") ==> ok
test Transaction 1, expects 99 ==> ok
test Transaction 2, expects #f ==> ok
test Delete, expects #f ==> ok
passed.
Testing mw.plugin =============================================================
testing bindings in #<module mw.plugin> ... ok
test initialize-plugins, expects (8) ==> ok
passed.
Testing mw.servelet.cgi =======================================================
testing bindings in #<module mw.servelet.cgi> ... ok
test run cgi-servelet, expects "HOGE" ==> ok
passed.
Testing mw.servelet.fs ========================================================
testing bindings in #<module mw.servelet.fs> ... ok
test GET /hoge.text, expects #t ==> ok
test GET /, expects #t ==> ok
test Not found, expects "404" ==> ok
test Forbidden, expects "403" ==> ok
passed.
Testing mw.httpd ==============================================================
testing bindings in #<module mw.server.httpd> ... ok
<parse-request-line>-----------------------------------------------------------
test parse-request-line, expects ("GET" "/hoge" "HTTP/1.0") ==> ok
test parse-request-line, expects ("GET" "/hoge" "HTTP/1.1") ==> ok
test parse-request-line error HTTP/1.2?, expects #t ==> ok
<parse-request-uri>------------------------------------------------------------
test parse-request-uri /bar/hoge?jojo, expects ("bar" "/hoge" "jojo") ==> ok
test parse-request-uri /bar, expects ("bar" #f #f) ==> ok
test parse-request-uri /bar?jojo, expects ("bar" #f "jojo") ==> ok
test parse-request-uri /, expects ("" #f #f) ==> ok
test parse-request-uri /?ABC, expects ("" #f "ABC") ==> ok
<http-metavariables>-----------------------------------------------------------
test http-metavariables, expects () ==> ok
test http-metavariable-set! & ref, expects "ORAORA!!!" ==> ok
test http-metavariable-ref, expects #f ==> ok
<httpd>------------------------------------------------------------------------
test default servelet, expects "hoge" ==> ok
test servelet jojo, expects "ORAORA!!!" ==> ok
passed.
Testing mw.server.repl ========================================================
testing bindings in #<module mw.server.repl> ... ok
test repl-eval, expects "((8 . 8) 20)" ==> ok
test repl-eval (error), expects "*** ERROR: 8" ==> ok
passed.
Testing mw.server =============================================================
testing bindings in #<module mw.server> ... ok
test run-server, expects "2x2" ==> ok
passed.
Testing mw.set ================================================================
testing bindings in #<module mw.set> ... ok
test , expects (6 "scheme" "lisp" "elisp" "haskell" "sml" "ocaml") ==> ok
test subseq*, expects ("lisp" "elisp") ==> ok
test <class/set/set>, expects (4 . #t) ==> ok
test set-intersection, expects ("ocaml") ==> ok
test map-set$, expects ("object" "hoge" "jojo") ==> ok
test <elt> <= <set-set>, expects (#f #f) ==> ok
test delete! <elt>, expects #f ==> ok
test delete! <set>, expects #f ==> ok
test (<A> <- (subseq* <A> (- (size-of <A>) 2))), expects #f ==> ok
passed.
Testing mw.test.cgi ===========================================================
testing bindings in #<module mw.test.cgi> ... ok
test define-cgi-script, expects #t ==> ok
test call-with-cgi-script 1, expects "JOJO" ==> ok
test call-with-cgi-script 2, expects "abc" ==> ok
passed.
Testing mw.textlight ==========================================================
testing bindings in #<module mw.textlight> ... ok
test read List, expects (ol (li "hoge") (li (ol (li "hoge") (li "jojo"))) (li "bar") (li (ul (li "bar") (li "jojo")))) ==> ok
test read Paragraph, expects (p "hoge" "hoge") ==> ok
test read Preformatted, expects (pre " hoge" "\n" " hoge") ==> ok
test read Macro [table], expects (table (caption "jojo") (tr (th "hoge") (th "bar")) (tr (td "bar") (td "hoge"))) ==> ok
test read Macro [dl], expects (dl (dt "hoge") (dd "bar") (dt "bar") (dd "hoge") (dt "huga") (dd "test jojo abc defg")) ==> ok
passed.
Testing mw.time.http ==========================================================
testing bindings in #<module mw.time.http> ... ok
test time->http-date, expects "Tue, 11 Oct 2005 09:52:12 GMT" ==> ok
passed.
Testing mw.time.w3cdtf ========================================================
testing bindings in #<module mw.time.w3cdtf> ... ok
test w3cdtf->time, expects #t ==> ok
test time->w3cdtf <> w3cdtf->time, expects "2005-08-21T17:38:30Z" ==> ok
test time->w3cdtf <local> w3cdtf->time, expects "2005-08-21T17:38:30+09:00" ==> ok
passed.
Testing mw.user ===============================================================
testing bindings in #<module mw.user> ... ok
test make-user, expects "hoge" ==> ok
test check-user?, expects #t ==> ok
test user-password-change, expects #t ==> ok
passed.
Testing mw.util ===============================================================
testing bindings in #<module mw.util> ... ok
test get-error-string, expects "hoge" ==> ok
test get-error-string long-message, expects "*** ERROR: hoge" ==> ok
test check=>, expects a ==> ok
test let$, expects (1 2 3) ==> (1 2 3)ok
test and*=>, expects #\a ==> ok
test and*=>, expects #f ==> ok
test and=> 1, expects 20 ==> ok
test and=> 2, expects #f ==> ok
test and=> 3, expects 3 ==> ok
test receive-alist 1, expects (20 . 50) ==> ok
test receive-alist 2, expects (20 50) ==> ok
test receive-slot 1, expects (20 30 40) ==> ok
test receive-slot 2, expects (20 40 . 30) ==> ok
test slot-update!, expects 88 ==> ok
test define-table (eq?), expects 8 ==> ok
test define-table (string=?), expects 8 ==> ok
test define-table (), expects b ==> ok
test define-table (get x . def), expects "hoge" ==> ok
test define-table (add delete!), expects (80 . #f) ==> ok
test case*, expects ok ==> ok
passed.
Testing mw.view ===============================================================
testing bindings in #<module mw.view> ... ok
test view 1, expects "hoge" ==> ok
test view 2, expects ("hoge" "hoge") ==> ok
passed.
Testing mw.config =============================================================
testing bindings in #<module mw.config> ... ok
test define-config 1, expects x ==> ok
test define-config 2, expects "abc" ==> ok
test define-config (validator), expects 888 ==> ok
test initialize-config! 1, expects #f ==> ok
test initialize-config! 2, expects 20 ==> ok
test initialize-config! 3, expects ("jojo" "hoge") ==> ok
test with-config, expects (8 "jojo") ==> ok
passed.
Testing mw.entry ==============================================================
testing bindings in #<module mw.entry> ... ok
<entry-main 1>-----------------------------------------------------------------
test dispatch entry 1, expects "world!" ==> ok
test dispatch entry 2, expects "hoge" ==> ok
test dispatch entry 3, expects "ORAORA!" ==> ok
test dispatch entry 4, expects "Foo" ==> ok
test dispatch entry 5, expects "#f" ==> ok
test response header, expects "jojo" ==> ok
test view, expects "jojo" ==> ok
test error handler, expects "500 Internal Server Error" ==> ok
test error handler, expects "999 Test error" ==> ok
test error-view, expects "ORA!" ==> ok
passed.
Testing mw.generator ==========================================================
testing bindings in #<module mw.generator> ... ok
<session 1>--------------------------------------------------------------------
Create  generator.tmp/hoge :mode 600
test make file exists?, expects #t ==> ok
test make file mode?, expects 384 ==> ok
test make file content?, expects "HOGE" ==> ok
Create! generator.tmp/hoge :mode 644
test override file!, expects "hoge" ==> ok
Create  generator.tmp/bar/ :mode 600
test make directory exists?, expects #t ==> ok
test make directory mode?, expects 384 ==> ok
<session 2>--------------------------------------------------------------------
Create  generator.tmp/bar/ :mode 755
Create  generator.tmp/bar/hoge :mode 644
Create  generator.tmp/bar/jojo :mode 644
test recursion directory, expects #t ==> ok
passed.
Testing mw.interp.json ========================================================
testing bindings in #<module mw.interp.json> ... ok
test sexp->json, expects "{\"bar\":8,\"hoge\":[\"a\",\"b\"]}" ==> ok
passed.
Testing mw.interp.sxml ========================================================
testing bindings in #<module mw.interp.sxml> ... ok
test sxml->xml, expects "<a hoge='bar -&gt;'>&lt;- abc</a>" ==> ok
test make-interp-sxml, expects (hoge "ab" (a (|@| (hoge "bar ->")) "abc ->")) ==> ok
test top-level attribute, expects (hoge (|@| (aaa "aaa"))) ==> ok
passed.
Testing mw.interp =============================================================
testing bindings in #<module mw.interp> ... ok
test interp-generic, expects (2 2 2) ==> ok
passed.
Testing mw.mime-type ==========================================================
testing bindings in #<module mw.mime-type> ... ok
test get-mime-type, expects ("text/html" "application/pdf") ==> ok
test file-mime-type, expects "application/rdf+xml" ==> ok
test add-mime-type!, expects ("application/hoge" "application/hoge") ==> ok
passed.
Testing mw.persistent =========================================================
testing bindings in #<module mw.persistent> ... ok
test creating database, expects #t ==> ok
test creating & persistent, expects "hoge" ==> ok
test change instance, expects 99 ==> ok
test serialize <persistent>, expects #t ==> ok
test serialize <hash-table>, expects #t ==> ok
test Collection, expects ("taro" "bar" "hoge") ==> ok
test Transaction 1, expects 99 ==> ok
test Transaction 2, expects #f ==> ok
test Delete, expects #f ==> ok
passed.
Testing mw.plugin =============================================================
testing bindings in #<module mw.plugin> ... ok
test initialize-plugins, expects (8) ==> ok
passed.
Testing mw.servelet.cgi =======================================================
testing bindings in #<module mw.servelet.cgi> ... ok
test run cgi-servelet, expects "HOGE" ==> ok
passed.
Testing mw.servelet.fs ========================================================
testing bindings in #<module mw.servelet.fs> ... ok
test GET /hoge.text, expects #t ==> ok
test GET /, expects #t ==> ok
test Not found, expects "404" ==> ok
test Forbidden, expects "403" ==> ok
passed.
Testing mw.httpd ==============================================================
testing bindings in #<module mw.server.httpd> ... ok
<parse-request-line>-----------------------------------------------------------
test parse-request-line, expects ("GET" "/hoge" "HTTP/1.0") ==> ok
test parse-request-line, expects ("GET" "/hoge" "HTTP/1.1") ==> ok
test parse-request-line error HTTP/1.2?, expects #t ==> ok
<parse-request-uri>------------------------------------------------------------
test parse-request-uri /bar/hoge?jojo, expects ("bar" "/hoge" "jojo") ==> ok
test parse-request-uri /bar, expects ("bar" #f #f) ==> ok
test parse-request-uri /bar?jojo, expects ("bar" #f "jojo") ==> ok
test parse-request-uri /, expects ("" #f #f) ==> ok
test parse-request-uri /?ABC, expects ("" #f "ABC") ==> ok
<http-metavariables>-----------------------------------------------------------
test http-metavariables, expects () ==> ok
test http-metavariable-set! & ref, expects "ORAORA!!!" ==> ok
test http-metavariable-ref, expects #f ==> ok
<httpd>------------------------------------------------------------------------
test default servelet, expects "hoge" ==> ok
test servelet jojo, expects "ORAORA!!!" ==> ok
passed.
Testing mw.server.repl ========================================================
testing bindings in #<module mw.server.repl> ... ok
test repl-eval, expects "((8 . 8) 20)" ==> ok
test repl-eval (error), expects "*** ERROR: 8" ==> ok
passed.
Testing mw.server =============================================================
testing bindings in #<module mw.server> ... ok
test run-server, expects "2x2" ==> ok
passed.
Testing mw.set ================================================================
testing bindings in #<module mw.set> ... ok
test , expects (6 "scheme" "lisp" "elisp" "haskell" "sml" "ocaml") ==> ok
test subseq*, expects ("lisp" "elisp") ==> ok
test <class/set/set>, expects (4 . #t) ==> ok
test set-intersection, expects ("ocaml") ==> ok
test map-set$, expects ("object" "hoge" "jojo") ==> ok
test <elt> <= <set-set>, expects (#f #f) ==> ok
test delete! <elt>, expects #f ==> ok
test delete! <set>, expects #f ==> ok
test (<A> <- (subseq* <A> (- (size-of <A>) 2))), expects #f ==> ok
passed.
Testing mw.test.cgi ===========================================================
testing bindings in #<module mw.test.cgi> ... ok
test define-cgi-script, expects #t ==> ok
test call-with-cgi-script 1, expects "JOJO" ==> ok
test call-with-cgi-script 2, expects "abc" ==> ok
passed.
Testing mw.textlight ==========================================================
testing bindings in #<module mw.textlight> ... ok
test read List, expects (ol (li "hoge") (li (ol (li "hoge") (li "jojo"))) (li "bar") (li (ul (li "bar") (li "jojo")))) ==> ok
test read Paragraph, expects (p "hoge" "hoge") ==> ok
test read Preformatted, expects (pre " hoge" "\n" " hoge") ==> ok
test read Macro [table], expects (table (caption "jojo") (tr (th "hoge") (th "bar")) (tr (td "bar") (td "hoge"))) ==> ok
test read Macro [dl], expects (dl (dt "hoge") (dd "bar") (dt "bar") (dd "hoge") (dt "huga") (dd "test jojo abc defg")) ==> ok
passed.
Testing mw.time.http ==========================================================
testing bindings in #<module mw.time.http> ... ok
test time->http-date, expects "Tue, 11 Oct 2005 09:52:12 GMT" ==> ok
passed.
Testing mw.time.w3cdtf ========================================================
testing bindings in #<module mw.time.w3cdtf> ... ok
test w3cdtf->time, expects #t ==> ok
test time->w3cdtf <> w3cdtf->time, expects "2005-08-21T17:38:30Z" ==> ok
test time->w3cdtf <local> w3cdtf->time, expects "2005-08-21T17:38:30+09:00" ==> ok
passed.
Testing mw.user ===============================================================
testing bindings in #<module mw.user> ... ok
test make-user, expects "hoge" ==> ok
test check-user?, expects #t ==> ok
test user-password-change, expects #t ==> ok
passed.
Testing mw.util ===============================================================
testing bindings in #<module mw.util> ... ok
test get-error-string, expects "hoge" ==> ok
test get-error-string long-message, expects "*** ERROR: hoge" ==> ok
test check=>, expects a ==> ok
test let$, expects (1 2 3) ==> (1 2 3)ok
test and*=>, expects #\a ==> ok
test and*=>, expects #f ==> ok
test and=> 1, expects 20 ==> ok
test and=> 2, expects #f ==> ok
test and=> 3, expects 3 ==> ok
test receive-alist 1, expects (20 . 50) ==> ok
test receive-alist 2, expects (20 50) ==> ok
test receive-slot 1, expects (20 30 40) ==> ok
test receive-slot 2, expects (20 40 . 30) ==> ok
test slot-update!, expects 88 ==> ok
test define-table (eq?), expects 8 ==> ok
test define-table (string=?), expects 8 ==> ok
test define-table (), expects b ==> ok
test define-table (get x . def), expects "hoge" ==> ok
test define-table (add delete!), expects (80 . #f) ==> ok
test case*, expects ok ==> ok
passed.
Testing mw.view ===============================================================
testing bindings in #<module mw.view> ... ok
test view 1, expects "hoge" ==> ok
test view 2, expects ("hoge" "hoge") ==> ok
passed.
Testing mw.config =============================================================
testing bindings in #<module mw.config> ... ok
test define-config 1, expects x ==> ok
test define-config 2, expects "abc" ==> ok
test define-config (validator), expects 888 ==> ok
test initialize-config! 1, expects #f ==> ok
test initialize-config! 2, expects 20 ==> ok
test initialize-config! 3, expects ("jojo" "hoge") ==> ok
test with-config, expects (8 "jojo") ==> ok
passed.
Testing mw.entry ==============================================================
testing bindings in #<module mw.entry> ... ok
<entry-main 1>-----------------------------------------------------------------
test dispatch entry 1, expects "world!" ==> ERROR: GOT #<error "no applicable method for #<generic dbm-open (2)> with arguments (#f :path #f :rw-mode :write)">
test dispatch entry 2, expects "hoge" ==> ERROR: GOT #<error "no applicable method for #<generic dbm-open (2)> with arguments (#f :path #f :rw-mode :write)">
test dispatch entry 3, expects "ORAORA!" ==> ERROR: GOT #<error "no applicable method for #<generic dbm-open (2)> with arguments (#f :path #f :rw-mode :write)">
test dispatch entry 4, expects "Foo" ==> ERROR: GOT #<error "no applicable method for #<generic dbm-open (2)> with arguments (#f :path #f :rw-mode :write)">
test dispatch entry 5, expects "#f" ==> ERROR: GOT #<error "no applicable method for #<generic dbm-open (2)> with arguments (#f :path #f :rw-mode :write)">
test response header, expects "jojo" ==> ERROR: GOT #<error "no applicable method for #<generic dbm-open (2)> with arguments (#f :path #f :rw-mode :write)">
test view, expects "jojo" ==> ERROR: GOT #<error "no applicable method for #<generic dbm-open (2)> with arguments (#f :path #f :rw-mode :write)">
test error handler, expects "500 Internal Server Error" ==> ERROR: GOT #<error "no applicable method for #<generic dbm-open (2)> with arguments (#f :path #f :rw-mode :write)">
test error handler, expects "999 Test error" ==> ERROR: GOT #<error "no applicable method for #<generic dbm-open (2)> with arguments (#f :path #f :rw-mode :write)">
test error-view, expects "ORA!" ==> ERROR: GOT #<error "no applicable method for #<generic dbm-open (2)> with arguments (#f :path #f :rw-mode :write)">
failed.
discrepancies found.  Errors are:
test dispatch entry 1: expects "world!" => got #<error "no applicable method for #<generic dbm-open (2)> with arguments (#f :path #f :rw-mode :write)">
test dispatch entry 2: expects "hoge" => got #<error "no applicable method for #<generic dbm-open (2)> with arguments (#f :path #f :rw-mode :write)">
test dispatch entry 3: expects "ORAORA!" => got #<error "no applicable method for #<generic dbm-open (2)> with arguments (#f :path #f :rw-mode :write)">
test dispatch entry 4: expects "Foo" => got #<error "no applicable method for #<generic dbm-open (2)> with arguments (#f :path #f :rw-mode :write)">
test dispatch entry 5: expects "#f" => got #<error "no applicable method for #<generic dbm-open (2)> with arguments (#f :path #f :rw-mode :write)">
test response header: expects "jojo" => got #<error "no applicable method for #<generic dbm-open (2)> with arguments (#f :path #f :rw-mode :write)">
test view: expects "jojo" => got #<error "no applicable method for #<generic dbm-open (2)> with arguments (#f :path #f :rw-mode :write)">
test error handler: expects "500 Internal Server Error" => got #<error "no applicable method for #<generic dbm-open (2)> with arguments (#f :path #f :rw-mode :write)">
test error handler: expects "999 Test error" => got #<error "no applicable method for #<generic dbm-open (2)> with arguments (#f :path #f :rw-mode :write)">
test error-view: expects "ORA!" => got #<error "no applicable method for #<generic dbm-open (2)> with arguments (#f :path #f :rw-mode :write)">
Testing mw.generator ==========================================================
testing bindings in #<module mw.generator> ... ok
<session 1>--------------------------------------------------------------------
Create  generator.tmp/hoge :mode 600
test make file exists?, expects #t ==> ok
test make file mode?, expects 384 ==> ok
test make file content?, expects "HOGE" ==> ok
Create! generator.tmp/hoge :mode 644
test override file!, expects "hoge" ==> ok
Create  generator.tmp/bar/ :mode 600
test make directory exists?, expects #t ==> ok
test make directory mode?, expects 384 ==> ok
<session 2>--------------------------------------------------------------------
Create  generator.tmp/bar/ :mode 755
Create  generator.tmp/bar/hoge :mode 644
Create  generator.tmp/bar/jojo :mode 644
test recursion directory, expects #t ==> ok
passed.
Testing mw.interp.json ========================================================
testing bindings in #<module mw.interp.json> ... ok
test sexp->json, expects "{\"bar\":8,\"hoge\":[\"a\",\"b\"]}" ==> ok
passed.
Testing mw.interp.sxml ========================================================
testing bindings in #<module mw.interp.sxml> ... ok
test sxml->xml, expects "<a hoge='bar -&gt;'>&lt;- abc</a>" ==> ok
test make-interp-sxml, expects (hoge "ab" (a (|@| (hoge "bar ->")) "abc ->")) ==> ok
test top-level attribute, expects (hoge (|@| (aaa "aaa"))) ==> ok
passed.
Testing mw.interp =============================================================
testing bindings in #<module mw.interp> ... ok
test interp-generic, expects (2 2 2) ==> ok
passed.
Testing mw.mime-type ==========================================================
testing bindings in #<module mw.mime-type> ... ok
test get-mime-type, expects ("text/html" "application/pdf") ==> ok
test file-mime-type, expects "application/rdf+xml" ==> ok
test add-mime-type!, expects ("application/hoge" "application/hoge") ==> ok
passed.
Testing mw.persistent =========================================================
testing bindings in #<module mw.persistent> ... ok
test creating database, expects #t ==> ok
test creating & persistent, expects "hoge" ==> ok
test change instance, expects 99 ==> ok
test serialize <persistent>, expects #t ==> ok
test serialize <hash-table>, expects #t ==> ok
test Collection, expects ("taro" "bar" "hoge") ==> ok
test Transaction 1, expects 99 ==> ok
test Transaction 2, expects #f ==> ok
test Delete, expects #f ==> ok
passed.
Testing mw.plugin =============================================================
testing bindings in #<module mw.plugin> ... ok
test initialize-plugins, expects (8) ==> ok
passed.
Testing mw.servelet.cgi =======================================================
testing bindings in #<module mw.servelet.cgi> ... ok
test run cgi-servelet, expects "HOGE" ==> ok
passed.
Testing mw.servelet.fs ========================================================
testing bindings in #<module mw.servelet.fs> ... ok
test GET /hoge.text, expects #t ==> ok
test GET /, expects #t ==> ok
test Not found, expects "404" ==> ok
test Forbidden, expects "403" ==> ok
passed.
Testing mw.httpd ==============================================================
testing bindings in #<module mw.server.httpd> ... ok
<parse-request-line>-----------------------------------------------------------
test parse-request-line, expects ("GET" "/hoge" "HTTP/1.0") ==> ok
test parse-request-line, expects ("GET" "/hoge" "HTTP/1.1") ==> ok
test parse-request-line error HTTP/1.2?, expects #t ==> ok
<parse-request-uri>------------------------------------------------------------
test parse-request-uri /bar/hoge?jojo, expects ("bar" "/hoge" "jojo") ==> ok
test parse-request-uri /bar, expects ("bar" #f #f) ==> ok
test parse-request-uri /bar?jojo, expects ("bar" #f "jojo") ==> ok
test parse-request-uri /, expects ("" #f #f) ==> ok
test parse-request-uri /?ABC, expects ("" #f "ABC") ==> ok
<http-metavariables>-----------------------------------------------------------
test http-metavariables, expects () ==> ok
test http-metavariable-set! & ref, expects "ORAORA!!!" ==> ok
test http-metavariable-ref, expects #f ==> ok
<httpd>------------------------------------------------------------------------
test default servelet, expects "hoge" ==> ok
test servelet jojo, expects "ORAORA!!!" ==> ok
passed.
Testing mw.server.repl ========================================================
testing bindings in #<module mw.server.repl> ... ok
test repl-eval, expects "((8 . 8) 20)" ==> ok
test repl-eval (error), expects "*** ERROR: 8" ==> ok
passed.
Testing mw.server =============================================================
testing bindings in #<module mw.server> ... ok
test run-server, expects "2x2" ==> ok
passed.
Testing mw.set ================================================================
testing bindings in #<module mw.set> ... ok
test , expects (6 "scheme" "lisp" "elisp" "haskell" "sml" "ocaml") ==> ok
test subseq*, expects ("lisp" "elisp") ==> ok
test <class/set/set>, expects (4 . #t) ==> ok
test set-intersection, expects ("ocaml") ==> ok
test map-set$, expects ("object" "hoge" "jojo") ==> ok
test <elt> <= <set-set>, expects (#f #f) ==> ok
test delete! <elt>, expects #f ==> ok
test delete! <set>, expects #f ==> ok
test (<A> <- (subseq* <A> (- (size-of <A>) 2))), expects #f ==> ok
passed.
Testing mw.test.cgi ===========================================================
testing bindings in #<module mw.test.cgi> ... ok
test define-cgi-script, expects #t ==> ok
test call-with-cgi-script 1, expects "JOJO" ==> ok
test call-with-cgi-script 2, expects "abc" ==> ok
passed.
Testing mw.textlight ==========================================================
testing bindings in #<module mw.textlight> ... ok
test read List, expects (ol (li "hoge") (li (ol (li "hoge") (li "jojo"))) (li "bar") (li (ul (li "bar") (li "jojo")))) ==> ok
test read Paragraph, expects (p "hoge" "hoge") ==> ok
test read Preformatted, expects (pre " hoge" "\n" " hoge") ==> ok
test read Macro [table], expects (table (caption "jojo") (tr (th "hoge") (th "bar")) (tr (td "bar") (td "hoge"))) ==> ok
test read Macro [dl], expects (dl (dt "hoge") (dd "bar") (dt "bar") (dd "hoge") (dt "huga") (dd "test jojo abc defg")) ==> ok
passed.
Testing mw.time.http ==========================================================
testing bindings in #<module mw.time.http> ... ok
test time->http-date, expects "Tue, 11 Oct 2005 09:52:12 GMT" ==> ok
passed.
Testing mw.time.w3cdtf ========================================================
testing bindings in #<module mw.time.w3cdtf> ... ok
test w3cdtf->time, expects #t ==> ok
test time->w3cdtf <> w3cdtf->time, expects "2005-08-21T17:38:30Z" ==> ok
test time->w3cdtf <local> w3cdtf->time, expects "2005-08-21T17:38:30+09:00" ==> ok
passed.
Testing mw.user ===============================================================
testing bindings in #<module mw.user> ... ok
test make-user, expects "hoge" ==> ok
test check-user?, expects #t ==> ok
test user-password-change, expects #t ==> ok
passed.
Testing mw.util ===============================================================
testing bindings in #<module mw.util> ... ok
test get-error-string, expects "hoge" ==> ok
test get-error-string long-message, expects "*** ERROR: hoge" ==> ok
test check=>, expects a ==> ok
test let$, expects (1 2 3) ==> (1 2 3)ok
test and*=>, expects #\a ==> ok
test and*=>, expects #f ==> ok
test and=> 1, expects 20 ==> ok
test and=> 2, expects #f ==> ok
test and=> 3, expects 3 ==> ok
test receive-alist 1, expects (20 . 50) ==> ok
test receive-alist 2, expects (20 50) ==> ok
test receive-slot 1, expects (20 30 40) ==> ok
test receive-slot 2, expects (20 40 . 30) ==> ok
test slot-update!, expects 88 ==> ok
test define-table (eq?), expects 8 ==> ok
test define-table (string=?), expects 8 ==> ok
test define-table (), expects b ==> ok
test define-table (get x . def), expects "hoge" ==> ok
test define-table (add delete!), expects (80 . #f) ==> ok
test case*, expects ok ==> ok
passed.
Testing mw.view ===============================================================
testing bindings in #<module mw.view> ... ok
test view 1, expects "hoge" ==> ok
test view 2, expects ("hoge" "hoge") ==> ok
passed.
Testing mw.config =============================================================
testing bindings in #<module mw.config> ... ok
test define-config 1, expects x ==> ok
test define-config 2, expects "abc" ==> ok
test define-config (validator), expects 888 ==> ok
test initialize-config! 1, expects #f ==> ok
test initialize-config! 2, expects 20 ==> ok
test initialize-config! 3, expects ("jojo" "hoge") ==> ok
test with-config, expects (8 "jojo") ==> ok
passed.
Testing mw.entry ==============================================================
testing bindings in #<module mw.entry> ... ok
<entry-main 1>-----------------------------------------------------------------
test dispatch entry 1, expects "world!" ==> ok
test dispatch entry 2, expects "hoge" ==> ok
test dispatch entry 3, expects "ORAORA!" ==> ok
test dispatch entry 4, expects "Foo" ==> ok
test dispatch entry 5, expects "#f" ==> ok
test response header, expects "jojo" ==> ok
test view, expects "jojo" ==> ok
test error handler, expects "500 Internal Server Error" ==> ok
test error handler, expects "999 Test error" ==> ok
test error-view, expects "ORA!" ==> ok
passed.
Testing mw.generator ==========================================================
testing bindings in #<module mw.generator> ... ok
<session 1>--------------------------------------------------------------------
Create  generator.tmp/hoge :mode 600
test make file exists?, expects #t ==> ok
test make file mode?, expects 384 ==> ok
test make file content?, expects "HOGE" ==> ok
Create! generator.tmp/hoge :mode 644
test override file!, expects "hoge" ==> ok
Create  generator.tmp/bar/ :mode 600
test make directory exists?, expects #t ==> ok
test make directory mode?, expects 384 ==> ok
<session 2>--------------------------------------------------------------------
Create  generator.tmp/bar/ :mode 755
Create  generator.tmp/bar/hoge :mode 644
Create  generator.tmp/bar/jojo :mode 644
test recursion directory, expects #t ==> ok
passed.
Testing mw.interp.json ========================================================
testing bindings in #<module mw.interp.json> ... ok
test sexp->json, expects "{\"bar\":8,\"hoge\":[\"a\",\"b\"]}" ==> ok
passed.
Testing mw.interp.sxml ========================================================
testing bindings in #<module mw.interp.sxml> ... ok
test sxml->xml, expects "<a hoge='bar -&gt;'>&lt;- abc</a>" ==> ok
test make-interp-sxml, expects (hoge "ab" (a (|@| (hoge "bar ->")) "abc ->")) ==> ok
test top-level attribute, expects (hoge (|@| (aaa "aaa"))) ==> ok
passed.
Testing mw.interp =============================================================
testing bindings in #<module mw.interp> ... ok
test interp-generic, expects (2 2 2) ==> ok
passed.
Testing mw.mime-type ==========================================================
testing bindings in #<module mw.mime-type> ... ok
test get-mime-type, expects ("text/html" "application/pdf") ==> ok
test file-mime-type, expects "application/rdf+xml" ==> ok
test add-mime-type!, expects ("application/hoge" "application/hoge") ==> ok
passed.
Testing mw.persistent =========================================================
testing bindings in #<module mw.persistent> ... ok
test creating database, expects #t ==> ok
test creating & persistent, expects "hoge" ==> ok
test change instance, expects 99 ==> ok
test serialize <persistent>, expects #t ==> ok
test serialize <hash-table>, expects #t ==> ok
test Collection, expects ("taro" "bar" "hoge") ==> ok
test Transaction 1, expects 99 ==> ok
test Transaction 2, expects #f ==> ok
test Delete, expects #f ==> ok
passed.
Testing mw.plugin =============================================================
testing bindings in #<module mw.plugin> ... ok
test initialize-plugins, expects (8) ==> ok
passed.
Testing mw.servelet.cgi =======================================================
testing bindings in #<module mw.servelet.cgi> ... ok
test run cgi-servelet, expects "HOGE" ==> ok
passed.
Testing mw.servelet.fs ========================================================
testing bindings in #<module mw.servelet.fs> ... ok
test GET /hoge.text, expects #t ==> ok
test GET /, expects #t ==> ok
test Not found, expects "404" ==> ok
test Forbidden, expects "403" ==> ok
passed.
Testing mw.httpd ==============================================================
testing bindings in #<module mw.server.httpd> ... ok
<parse-request-line>-----------------------------------------------------------
test parse-request-line, expects ("GET" "/hoge" "HTTP/1.0") ==> ok
test parse-request-line, expects ("GET" "/hoge" "HTTP/1.1") ==> ok
test parse-request-line error HTTP/1.2?, expects #t ==> ok
<parse-request-uri>------------------------------------------------------------
test parse-request-uri /bar/hoge?jojo, expects ("bar" "/hoge" "jojo") ==> ok
test parse-request-uri /bar, expects ("bar" #f #f) ==> ok
test parse-request-uri /bar?jojo, expects ("bar" #f "jojo") ==> ok
test parse-request-uri /, expects ("" #f #f) ==> ok
test parse-request-uri /?ABC, expects ("" #f "ABC") ==> ok
<http-metavariables>-----------------------------------------------------------
test http-metavariables, expects () ==> ok
test http-metavariable-set! & ref, expects "ORAORA!!!" ==> ok
test http-metavariable-ref, expects #f ==> ok
<httpd>------------------------------------------------------------------------
test default servelet, expects "hoge" ==> ok
test servelet jojo, expects "ORAORA!!!" ==> ok
passed.
Testing mw.server.repl ========================================================
testing bindings in #<module mw.server.repl> ... ok
test repl-eval, expects "((8 . 8) 20)" ==> ok
test repl-eval (error), expects "*** ERROR: 8" ==> ok
passed.
Testing mw.server =============================================================
testing bindings in #<module mw.server> ... ok
test run-server, expects "2x2" ==> ok
passed.
Testing mw.set ================================================================
testing bindings in #<module mw.set> ... ok
test , expects (6 "scheme" "lisp" "elisp" "haskell" "sml" "ocaml") ==> ok
test subseq*, expects ("lisp" "elisp") ==> ok
test <class/set/set>, expects (4 . #t) ==> ok
test set-intersection, expects ("ocaml") ==> ok
test map-set$, expects ("object" "hoge" "jojo") ==> ok
test <elt> <= <set-set>, expects (#f #f) ==> ok
test delete! <elt>, expects #f ==> ok
test delete! <set>, expects #f ==> ok
test (<A> <- (subseq* <A> (- (size-of <A>) 2))), expects #f ==> ok
passed.
Testing mw.test.cgi ===========================================================
testing bindings in #<module mw.test.cgi> ... ok
test define-cgi-script, expects #t ==> ok
test call-with-cgi-script 1, expects "JOJO" ==> ok
test call-with-cgi-script 2, expects "abc" ==> ok
passed.
Testing mw.textlight ==========================================================
testing bindings in #<module mw.textlight> ... ok
test read List, expects (ol (li "hoge") (li (ol (li "hoge") (li "jojo"))) (li "bar") (li (ul (li "bar") (li "jojo")))) ==> ok
test read Paragraph, expects (p "hoge" "hoge") ==> ok
test read Preformatted, expects (pre " hoge" "\n" " hoge") ==> ok
test read Macro [table], expects (table (caption "jojo") (tr (th "hoge") (th "bar")) (tr (td "bar") (td "hoge"))) ==> ok
test read Macro [dl], expects (dl (dt "hoge") (dd "bar") (dt "bar") (dd "hoge") (dt "huga") (dd "test jojo abc defg")) ==> ok
passed.
Testing mw.time.http ==========================================================
testing bindings in #<module mw.time.http> ... ok
test time->http-date, expects "Tue, 11 Oct 2005 09:52:12 GMT" ==> ok
passed.
Testing mw.time.w3cdtf ========================================================
testing bindings in #<module mw.time.w3cdtf> ... ok
test w3cdtf->time, expects #t ==> ok
test time->w3cdtf <> w3cdtf->time, expects "2005-08-21T17:38:30Z" ==> ok
test time->w3cdtf <local> w3cdtf->time, expects "2005-08-21T17:38:30+09:00" ==> ok
passed.
Testing mw.user ===============================================================
testing bindings in #<module mw.user> ... ok
test make-user, expects "hoge" ==> ok
test check-user?, expects #t ==> ok
test user-password-change, expects #t ==> ok
passed.
Testing mw.util ===============================================================
testing bindings in #<module mw.util> ... ok
test get-error-string, expects "hoge" ==> ok
test get-error-string long-message, expects "*** ERROR: hoge" ==> ok
test check=>, expects a ==> ok
test let$, expects (1 2 3) ==> (1 2 3)ok
test and*=>, expects #\a ==> ok
test and*=>, expects #f ==> ok
test and=> 1, expects 20 ==> ok
test and=> 2, expects #f ==> ok
test and=> 3, expects 3 ==> ok
test receive-alist 1, expects (20 . 50) ==> ok
test receive-alist 2, expects (20 50) ==> ok
test receive-slot 1, expects (20 30 40) ==> ok
test receive-slot 2, expects (20 40 . 30) ==> ok
test slot-update!, expects 88 ==> ok
test define-table (eq?), expects 8 ==> ok
test define-table (string=?), expects 8 ==> ok
test define-table (), expects b ==> ok
test define-table (get x . def), expects "hoge" ==> ok
test define-table (add delete!), expects (80 . #f) ==> ok
test case*, expects ok ==> ok
passed.
Testing mw.view ===============================================================
testing bindings in #<module mw.view> ... ok
test view 1, expects "hoge" ==> ok
test view 2, expects ("hoge" "hoge") ==> ok
passed.
Testing mw.config =============================================================
testing bindings in #<module mw.config> ... ok
test define-config 1, expects x ==> ok
test define-config 2, expects "abc" ==> ok
test define-config (validator), expects 888 ==> ok
test initialize-config! 1, expects #f ==> ok
test initialize-config! 2, expects 20 ==> ok
test initialize-config! 3, expects ("jojo" "hoge") ==> ok
test with-config, expects (8 "jojo") ==> ok
passed.
Testing mw.entry ==============================================================
testing bindings in #<module mw.entry> ... ERROR: found dangling autoloads: (with-fastcgi)
Testing mw.generator ==========================================================
testing bindings in #<module mw.generator> ... ok
<session 1>--------------------------------------------------------------------
Create  generator.tmp/hoge :mode 600
test make file exists?, expects #t ==> ok
test make file mode?, expects 384 ==> ok
test make file content?, expects "HOGE" ==> ok
Create! generator.tmp/hoge :mode 644
test override file!, expects "hoge" ==> ok
Create  generator.tmp/bar/ :mode 600
test make directory exists?, expects #t ==> ok
test make directory mode?, expects 384 ==> ok
<session 2>--------------------------------------------------------------------
Create  generator.tmp/bar/ :mode 755
Create  generator.tmp/bar/hoge :mode 644
Create  generator.tmp/bar/jojo :mode 644
test recursion directory, expects #t ==> ok
passed.
Testing mw.interp.json ========================================================
testing bindings in #<module mw.interp.json> ... ok
test sexp->json, expects "{\"bar\":8,\"hoge\":[\"a\",\"b\"]}" ==> ok
passed.
Testing mw.interp.sxml ========================================================
testing bindings in #<module mw.interp.sxml> ... ok
test sxml->xml, expects "<a hoge='bar -&gt;'>&lt;- abc</a>" ==> ok
test make-interp-sxml, expects (hoge "ab" (a (|@| (hoge "bar ->")) "abc ->")) ==> ok
test top-level attribute, expects (hoge (|@| (aaa "aaa"))) ==> ok
passed.
Testing mw.interp =============================================================
testing bindings in #<module mw.interp> ... ok
test interp-generic, expects (2 2 2) ==> ok
passed.
Testing mw.mime-type ==========================================================
testing bindings in #<module mw.mime-type> ... ok
test get-mime-type, expects ("text/html" "application/pdf") ==> ok
test file-mime-type, expects "application/rdf+xml" ==> ok
test add-mime-type!, expects ("application/hoge" "application/hoge") ==> ok
passed.
Testing mw.persistent =========================================================
testing bindings in #<module mw.persistent> ... ok
test creating database, expects #t ==> ok
test creating & persistent, expects "hoge" ==> ok
test change instance, expects 99 ==> ok
test serialize <persistent>, expects #t ==> ok
test serialize <hash-table>, expects #t ==> ok
test Collection, expects ("taro" "bar" "hoge") ==> ok
test Transaction 1, expects 99 ==> ok
test Transaction 2, expects #f ==> ok
test Delete, expects #f ==> ok
passed.
Testing mw.plugin =============================================================
testing bindings in #<module mw.plugin> ... ok
test initialize-plugins, expects (8) ==> ok
passed.
Testing mw.servelet.fs ========================================================
testing bindings in #<module mw.servelet.fs> ... ok
test GET /hoge.text, expects #t ==> ok
test GET /, expects #t ==> ok
test Not found, expects "404" ==> ok
test Forbidden, expects "403" ==> ok
passed.
Testing mw.httpd ==============================================================
testing bindings in #<module mw.server.httpd> ... ok
<parse-request-line>-----------------------------------------------------------
test parse-request-line, expects ("GET" "/hoge" "HTTP/1.0") ==> ok
test parse-request-line, expects ("GET" "/hoge" "HTTP/1.1") ==> ok
test parse-request-line error HTTP/1.2?, expects #t ==> ok
<parse-request-uri>------------------------------------------------------------
test parse-request-uri /bar/hoge?jojo, expects ("bar" "/hoge" "jojo") ==> ok
test parse-request-uri /bar, expects ("bar" #f #f) ==> ok
test parse-request-uri /bar?jojo, expects ("bar" #f "jojo") ==> ok
test parse-request-uri /, expects ("" #f #f) ==> ok
test parse-request-uri /?ABC, expects ("" #f "ABC") ==> ok
<http-metavariables>-----------------------------------------------------------
test http-metavariables, expects () ==> ok
test http-metavariable-set! & ref, expects "ORAORA!!!" ==> ok
test http-metavariable-ref, expects #f ==> ok
<httpd>------------------------------------------------------------------------
test default servelet, expects "hoge" ==> ok
test servelet jojo, expects "ORAORA!!!" ==> ok
passed.
Testing mw.server.repl ========================================================
testing bindings in #<module mw.server.repl> ... ok
test repl-eval, expects "((8 . 8) 20)" ==> ok
test repl-eval (error), expects "*** ERROR: 8" ==> ok
passed.
Testing mw.server =============================================================
testing bindings in #<module mw.server> ... ok
test run-server, expects "2x2" ==> ok
passed.
Testing mw.set ================================================================
testing bindings in #<module mw.set> ... ok
test , expects (6 "scheme" "lisp" "elisp" "haskell" "sml" "ocaml") ==> ok
test subseq*, expects ("lisp" "elisp") ==> ok
test <class/set/set>, expects (4 . #t) ==> ok
test set-intersection, expects ("ocaml") ==> ok
test map-set$, expects ("object" "hoge" "jojo") ==> ok
test <elt> <= <set-set>, expects (#f #f) ==> ok
test delete! <elt>, expects #f ==> ok
test delete! <set>, expects #f ==> ok
test (<A> <- (subseq* <A> (- (size-of <A>) 2))), expects #f ==> ok
passed.
Testing mw.test.cgi ===========================================================
testing bindings in #<module mw.test.cgi> ... ok
test define-cgi-script, expects #t ==> ok
test call-with-cgi-script 1, expects "JOJO" ==> ok
test call-with-cgi-script 2, expects "abc" ==> ok
passed.
Testing mw.textlight ==========================================================
testing bindings in #<module mw.textlight> ... ok
test read List, expects (ol (li "hoge") (li (ol (li "hoge") (li "jojo"))) (li "bar") (li (ul (li "bar") (li "jojo")))) ==> ok
test read Paragraph, expects (p "hoge" "hoge") ==> ok
test read Preformatted, expects (pre " hoge" "\n" " hoge") ==> ok
test read Macro [table], expects (table (caption "jojo") (tr (th "hoge") (th "bar")) (tr (td "bar") (td "hoge"))) ==> ok
test read Macro [dl], expects (dl (dt "hoge") (dd "bar") (dt "bar") (dd "hoge") (dt "huga") (dd "test jojo abc defg")) ==> ok
passed.
Testing mw.time.http ==========================================================
testing bindings in #<module mw.time.http> ... ok
test time->http-date, expects "Tue, 11 Oct 2005 09:52:12 GMT" ==> ok
passed.
Testing mw.time.w3cdtf ========================================================
testing bindings in #<module mw.time.w3cdtf> ... ok
test w3cdtf->time, expects #t ==> ok
test time->w3cdtf <> w3cdtf->time, expects "2005-08-21T17:38:30Z" ==> ok
test time->w3cdtf <local> w3cdtf->time, expects "2005-08-21T17:38:30+09:00" ==> ok
passed.
Testing mw.user ===============================================================
testing bindings in #<module mw.user> ... ok
test make-user, expects "hoge" ==> ok
test check-user?, expects #t ==> ok
test user-password-change, expects #t ==> ok
passed.
Testing mw.util ===============================================================
testing bindings in #<module mw.util> ... ok
test get-error-string, expects "hoge" ==> ok
test get-error-string long-message, expects "*** ERROR: hoge" ==> ok
test check=>, expects a ==> ok
test let$, expects (1 2 3) ==> (1 2 3)ok
test and*=>, expects #\a ==> ok
test and*=>, expects #f ==> ok
test and=> 1, expects 20 ==> ok
test and=> 2, expects #f ==> ok
test and=> 3, expects 3 ==> ok
test receive-alist 1, expects (20 . 50) ==> ok
test receive-alist 2, expects (20 50) ==> ok
test receive-slot 1, expects (20 30 40) ==> ok
test receive-slot 2, expects (20 40 . 30) ==> ok
test slot-update!, expects 88 ==> ok
test define-table (eq?), expects 8 ==> ok
test define-table (string=?), expects 8 ==> ok
test define-table (), expects b ==> ok
test define-table (get x . def), expects "hoge" ==> ok
test define-table (add delete!), expects (80 . #f) ==> ok
test case*, expects ok ==> ok
passed.
Testing mw.view ===============================================================
testing bindings in #<module mw.view> ... ok
test view 1, expects "hoge" ==> ERROR: GOT #<error "invalid application: (#f \"hoge\")">
test view 2, expects ("hoge" "hoge") ==> ok
failed.
discrepancies found.  Errors are:
test view 1: expects "hoge" => got #<error "invalid application: (#f \"hoge\")">
Testing mw.config =============================================================
testing bindings in #<module mw.config> ... ok
test define-config 1, expects x ==> ok
test define-config 2, expects "abc" ==> ok
test define-config (validator), expects 888 ==> ok
test initialize-config! 1, expects #f ==> ok
test initialize-config! 2, expects 20 ==> ok
test initialize-config! 3, expects ("jojo" "hoge") ==> ok
test with-config, expects (8 "jojo") ==> ok
passed.
Testing mw.entry ==============================================================
testing bindings in #<module mw.entry> ... ok
<entry-main 1>-----------------------------------------------------------------
test dispatch entry 1, expects "world!" ==> ok
test dispatch entry 2, expects "hoge" ==> ERROR: GOT "Entry not found: \"hello\" -> \"_\""
test dispatch entry 3, expects "ORAORA!" ==> ok
test dispatch entry 4, expects "Foo" ==> ok
test dispatch entry 5, expects "#f" ==> ok
test response header, expects "jojo" ==> ok
test view, expects "jojo" ==> ok
test error handler, expects "500 Internal Server Error" ==> ok
test error handler, expects "999 Test error" ==> ok
test error-view, expects "ORA!" ==> ERROR: GOT "operation * is not defined between MUDA! and MUDA!"
failed.
discrepancies found.  Errors are:
test dispatch entry 2: expects "hoge" => got "Entry not found: \"hello\" -> \"_\""
test error-view: expects "ORA!" => got "operation * is not defined between MUDA! and MUDA!"
Testing mw.generator ==========================================================
testing bindings in #<module mw.generator> ... ok
<session 1>--------------------------------------------------------------------
Create  generator.tmp/hoge :mode 600
test make file exists?, expects #t ==> ok
test make file mode?, expects 384 ==> ok
test make file content?, expects "HOGE" ==> ok
Create! generator.tmp/hoge :mode 644
test override file!, expects "hoge" ==> ok
Create  generator.tmp/bar/ :mode 600
test make directory exists?, expects #t ==> ok
test make directory mode?, expects 384 ==> ok
<session 2>--------------------------------------------------------------------
Create  generator.tmp/bar/ :mode 755
Create  generator.tmp/bar/hoge :mode 644
Create  generator.tmp/bar/jojo :mode 644
test recursion directory, expects #t ==> ok
passed.
Testing mw.interp.json ========================================================
testing bindings in #<module mw.interp.json> ... ok
test sexp->json, expects "{\"bar\":8,\"hoge\":[\"a\",\"b\"]}" ==> ok
passed.
Testing mw.interp.sxml ========================================================
testing bindings in #<module mw.interp.sxml> ... ok
test sxml->xml, expects "<a hoge='bar -&gt;'>&lt;- abc</a>" ==> ok
test make-interp-sxml, expects (hoge "ab" (a (|@| (hoge "bar ->")) "abc ->")) ==> ok
test top-level attribute, expects (hoge (|@| (aaa "aaa"))) ==> ok
passed.
Testing mw.interp =============================================================
testing bindings in #<module mw.interp> ... ok
test interp-generic, expects (2 2 2) ==> ok
passed.
Testing mw.mime-type ==========================================================
testing bindings in #<module mw.mime-type> ... ok
test get-mime-type, expects ("text/html" "application/pdf") ==> ok
test file-mime-type, expects "application/rdf+xml" ==> ok
test add-mime-type!, expects ("application/hoge" "application/hoge") ==> ok
passed.
Testing mw.persistent =========================================================
testing bindings in #<module mw.persistent> ... ok
test creating database, expects #t ==> ok
test creating & persistent, expects "hoge" ==> ok
test change instance, expects 99 ==> ok
test serialize <persistent>, expects #t ==> ok
test serialize <hash-table>, expects #t ==> ok
test Collection, expects ("taro" "bar" "hoge") ==> ok
test Transaction 1, expects 99 ==> ok
test Transaction 2, expects #f ==> ok
test Delete, expects #f ==> ok
passed.
Testing mw.plugin =============================================================
testing bindings in #<module mw.plugin> ... ok
test initialize-plugins, expects (8) ==> ok
passed.
Testing mw.servelet.fs ========================================================
testing bindings in #<module mw.servelet.fs> ... ok
test GET /hoge.text, expects #t ==> ok
test GET /, expects #t ==> ok
test Not found, expects "404" ==> ok
test Forbidden, expects "403" ==> ok
passed.
Testing mw.httpd ==============================================================
testing bindings in #<module mw.server.httpd> ... ok
<parse-request-line>-----------------------------------------------------------
test parse-request-line, expects ("GET" "/hoge" "HTTP/1.0") ==> ok
test parse-request-line, expects ("GET" "/hoge" "HTTP/1.1") ==> ok
test parse-request-line error HTTP/1.2?, expects #t ==> ok
<parse-request-uri>------------------------------------------------------------
test parse-request-uri /bar/hoge?jojo, expects ("bar" "/hoge" "jojo") ==> ok
test parse-request-uri /bar, expects ("bar" #f #f) ==> ok
test parse-request-uri /bar?jojo, expects ("bar" #f "jojo") ==> ok
test parse-request-uri /, expects ("" #f #f) ==> ok
test parse-request-uri /?ABC, expects ("" #f "ABC") ==> ok
<http-metavariables>-----------------------------------------------------------
test http-metavariables, expects () ==> ok
test http-metavariable-set! & ref, expects "ORAORA!!!" ==> ok
test http-metavariable-ref, expects #f ==> ok
<httpd>------------------------------------------------------------------------
test default servelet, expects "hoge" ==> ok
test servelet jojo, expects "ORAORA!!!" ==> ok
passed.
Testing mw.server.repl ========================================================
testing bindings in #<module mw.server.repl> ... ok
test repl-eval, expects "((8 . 8) 20)" ==> ok
test repl-eval (error), expects "*** ERROR: 8" ==> ok
passed.
Testing mw.server =============================================================
testing bindings in #<module mw.server> ... ok
test run-server, expects "2x2" ==> ok
passed.
Testing mw.set ================================================================
testing bindings in #<module mw.set> ... ok
test , expects (6 "scheme" "lisp" "elisp" "haskell" "sml" "ocaml") ==> ok
test subseq*, expects ("lisp" "elisp") ==> ok
test <class/set/set>, expects (4 . #t) ==> ok
test set-intersection, expects ("ocaml") ==> ok
test map-set$, expects ("object" "hoge" "jojo") ==> ok
test <elt> <= <set-set>, expects (#f #f) ==> ok
test delete! <elt>, expects #f ==> ok
test delete! <set>, expects #f ==> ok
test (<A> <- (subseq* <A> (- (size-of <A>) 2))), expects #f ==> ok
passed.
Testing mw.test.cgi ===========================================================
testing bindings in #<module mw.test.cgi> ... ok
test define-cgi-script, expects #t ==> ok
test call-with-cgi-script 1, expects "JOJO" ==> ok
test call-with-cgi-script 2, expects "abc" ==> ok
passed.
Testing mw.textlight ==========================================================
testing bindings in #<module mw.textlight> ... ok
test read List, expects (ol (li "hoge") (li (ol (li "hoge") (li "jojo"))) (li "bar") (li (ul (li "bar") (li "jojo")))) ==> ok
test read Paragraph, expects (p "hoge" "hoge") ==> ok
test read Preformatted, expects (pre " hoge" "\n" " hoge") ==> ok
test read Macro [table], expects (table (caption "jojo") (tr (th "hoge") (th "bar")) (tr (td "bar") (td "hoge"))) ==> ok
test read Macro [dl], expects (dl (dt "hoge") (dd "bar") (dt "bar") (dd "hoge") (dt "huga") (dd "test jojo abc defg")) ==> ok
passed.
Testing mw.time.http ==========================================================
testing bindings in #<module mw.time.http> ... ok
test time->http-date, expects "Tue, 11 Oct 2005 09:52:12 GMT" ==> ok
passed.
Testing mw.time.w3cdtf ========================================================
testing bindings in #<module mw.time.w3cdtf> ... ok
test w3cdtf->time, expects #t ==> ok
test time->w3cdtf <> w3cdtf->time, expects "2005-08-21T17:38:30Z" ==> ok
test time->w3cdtf <local> w3cdtf->time, expects "2005-08-21T17:38:30+09:00" ==> ok
passed.
Testing mw.user ===============================================================
testing bindings in #<module mw.user> ... ok
test make-user, expects "hoge" ==> ok
test check-user?, expects #t ==> ok
test user-password-change, expects #t ==> ok
passed.
Testing mw.util ===============================================================
testing bindings in #<module mw.util> ... ok
test get-error-string, expects "hoge" ==> ok
test get-error-string long-message, expects "*** ERROR: hoge" ==> ok
test check=>, expects a ==> ok
test let$, expects (1 2 3) ==> (1 2 3)ok
test and*=>, expects #\a ==> ok
test and*=>, expects #f ==> ok
test and=> 1, expects 20 ==> ok
test and=> 2, expects #f ==> ok
test and=> 3, expects 3 ==> ok
test receive-alist 1, expects (20 . 50) ==> ok
test receive-alist 2, expects (20 50) ==> ok
test receive-slot 1, expects (20 30 40) ==> ok
test receive-slot 2, expects (20 40 . 30) ==> ok
test slot-update!, expects 88 ==> ok
test define-table (eq?), expects 8 ==> ok
test define-table (string=?), expects 8 ==> ok
test define-table (), expects b ==> ok
test define-table (get x . def), expects "hoge" ==> ok
test define-table (add delete!), expects (80 . #f) ==> ok
test case*, expects ok ==> ok
passed.
Testing mw.view ===============================================================
testing bindings in #<module mw.view> ... ok
test view 1, expects "hoge" ==> ERROR: GOT #<error "invalid application: (#f \"hoge\")">
test view 2, expects ("hoge" "hoge") ==> ok
failed.
discrepancies found.  Errors are:
test view 1: expects "hoge" => got #<error "invalid application: (#f \"hoge\")">
Testing mw.config =============================================================
testing bindings in #<module mw.config> ... ok
test define-config 1, expects x ==> ok
test define-config 2, expects "abc" ==> ok
test define-config (validator), expects 888 ==> ok
test initialize-config! 1, expects #f ==> ok
test initialize-config! 2, expects 20 ==> ok
test initialize-config! 3, expects ("jojo" "hoge") ==> ok
test with-config, expects (8 "jojo") ==> ok
passed.
Testing mw.entry ==============================================================
testing bindings in #<module mw.entry> ... ok
<entry-main 1>-----------------------------------------------------------------
test dispatch entry 1, expects "world!" ==> ok
test dispatch entry 2, expects "hoge" ==> ok
test dispatch entry 3, expects "ORAORA!" ==> ok
test dispatch entry 4, expects "Foo" ==> ok
test dispatch entry 5, expects "#f" ==> ok
test response header, expects "jojo" ==> ok
test view, expects "jojo" ==> ok
test error handler, expects "500 Internal Server Error" ==> ok
test error handler, expects "999 Test error" ==> ok
test error-view, expects "ORA!" ==> ok
passed.
Testing mw.generator ==========================================================
testing bindings in #<module mw.generator> ... ok
<session 1>--------------------------------------------------------------------
Create  generator.tmp/hoge :mode 600
test make file exists?, expects #t ==> ok
test make file mode?, expects 384 ==> ok
test make file content?, expects "HOGE" ==> ok
Create! generator.tmp/hoge :mode 644
test override file!, expects "hoge" ==> ok
Create  generator.tmp/bar/ :mode 600
test make directory exists?, expects #t ==> ok
test make directory mode?, expects 384 ==> ok
<session 2>--------------------------------------------------------------------
Create  generator.tmp/bar/ :mode 755
Create  generator.tmp/bar/hoge :mode 644
Create  generator.tmp/bar/jojo :mode 644
test recursion directory, expects #t ==> ok
passed.
Testing mw.interp.json ========================================================
testing bindings in #<module mw.interp.json> ... ok
test sexp->json, expects "{\"bar\":8,\"hoge\":[\"a\",\"b\"]}" ==> ok
passed.
Testing mw.interp.sxml ========================================================
testing bindings in #<module mw.interp.sxml> ... ok
test sxml->xml, expects "<a hoge='bar -&gt;'>&lt;- abc</a>" ==> ok
test make-interp-sxml, expects (hoge "ab" (a (|@| (hoge "bar ->")) "abc ->")) ==> ok
test top-level attribute, expects (hoge (|@| (aaa "aaa"))) ==> ok
passed.
Testing mw.interp =============================================================
testing bindings in #<module mw.interp> ... ok
test interp-generic, expects (2 2 2) ==> ok
passed.
Testing mw.mime-type ==========================================================
testing bindings in #<module mw.mime-type> ... ok
test get-mime-type, expects ("text/html" "application/pdf") ==> ok
test file-mime-type, expects "application/rdf+xml" ==> ok
test add-mime-type!, expects ("application/hoge" "application/hoge") ==> ok
passed.
Testing mw.persistent =========================================================
testing bindings in #<module mw.persistent> ... ok
test creating database, expects #t ==> ok
test creating & persistent, expects "hoge" ==> ok
test change instance, expects 99 ==> ok
test serialize <persistent>, expects #t ==> ok
test serialize <hash-table>, expects #t ==> ok
test Collection, expects ("taro" "bar" "hoge") ==> ok
test Transaction 1, expects 99 ==> ok
test Transaction 2, expects #f ==> ok
test Delete, expects #f ==> ok
passed.
Testing mw.plugin =============================================================
testing bindings in #<module mw.plugin> ... ok
test initialize-plugins, expects (8) ==> ok
passed.
Testing mw.servelet.fs ========================================================
testing bindings in #<module mw.servelet.fs> ... ok
test GET /hoge.text, expects #t ==> ok
test GET /, expects #t ==> ok
test Not found, expects "404" ==> ok
test Forbidden, expects "403" ==> ok
passed.
Testing mw.httpd ==============================================================
testing bindings in #<module mw.server.httpd> ... ok
<parse-request-line>-----------------------------------------------------------
test parse-request-line, expects ("GET" "/hoge" "HTTP/1.0") ==> ok
test parse-request-line, expects ("GET" "/hoge" "HTTP/1.1") ==> ok
test parse-request-line error HTTP/1.2?, expects #t ==> ok
<parse-request-uri>------------------------------------------------------------
test parse-request-uri /bar/hoge?jojo, expects ("bar" "/hoge" "jojo") ==> ok
test parse-request-uri /bar, expects ("bar" #f #f) ==> ok
test parse-request-uri /bar?jojo, expects ("bar" #f "jojo") ==> ok
test parse-request-uri /, expects ("" #f #f) ==> ok
test parse-request-uri /?ABC, expects ("" #f "ABC") ==> ok
<http-metavariables>-----------------------------------------------------------
test http-metavariables, expects () ==> ok
test http-metavariable-set! & ref, expects "ORAORA!!!" ==> ok
test http-metavariable-ref, expects #f ==> ok
<httpd>------------------------------------------------------------------------
test default servelet, expects "hoge" ==> ok
test servelet jojo, expects "ORAORA!!!" ==> ok
passed.
Testing mw.server.repl ========================================================
testing bindings in #<module mw.server.repl> ... ok
test repl-eval, expects "((8 . 8) 20)" ==> ok
test repl-eval (error), expects "*** ERROR: 8" ==> ok
passed.
Testing mw.server =============================================================
testing bindings in #<module mw.server> ... ok
test run-server, expects "2x2" ==> ok
passed.
Testing mw.set ================================================================
testing bindings in #<module mw.set> ... ok
test , expects (6 "scheme" "lisp" "elisp" "haskell" "sml" "ocaml") ==> ok
test subseq*, expects ("lisp" "elisp") ==> ok
test <class/set/set>, expects (4 . #t) ==> ok
test set-intersection, expects ("ocaml") ==> ok
test map-set$, expects ("object" "hoge" "jojo") ==> ok
test <elt> <= <set-set>, expects (#f #f) ==> ok
test delete! <elt>, expects #f ==> ok
test delete! <set>, expects #f ==> ok
test (<A> <- (subseq* <A> (- (size-of <A>) 2))), expects #f ==> ok
passed.
Testing mw.test.cgi ===========================================================
testing bindings in #<module mw.test.cgi> ... ok
test define-cgi-script, expects #t ==> ok
test call-with-cgi-script 1, expects "JOJO" ==> ok
test call-with-cgi-script 2, expects "abc" ==> ok
passed.
Testing mw.textlight ==========================================================
testing bindings in #<module mw.textlight> ... ok
test read List, expects (ol (li "hoge") (li (ol (li "hoge") (li "jojo"))) (li "bar") (li (ul (li "bar") (li "jojo")))) ==> ok
test read Paragraph, expects (p "hoge" "hoge") ==> ok
test read Preformatted, expects (pre " hoge" "\n" " hoge") ==> ok
test read Macro [table], expects (table (caption "jojo") (tr (th "hoge") (th "bar")) (tr (td "bar") (td "hoge"))) ==> ok
test read Macro [dl], expects (dl (dt "hoge") (dd "bar") (dt "bar") (dd "hoge") (dt "huga") (dd "test jojo abc defg")) ==> ok
passed.
Testing mw.time.http ==========================================================
testing bindings in #<module mw.time.http> ... ok
test time->http-date, expects "Tue, 11 Oct 2005 09:52:12 GMT" ==> ok
passed.
Testing mw.time.w3cdtf ========================================================
testing bindings in #<module mw.time.w3cdtf> ... ok
test w3cdtf->time, expects #t ==> ok
test time->w3cdtf <> w3cdtf->time, expects "2005-08-21T17:38:30Z" ==> ok
test time->w3cdtf <local> w3cdtf->time, expects "2005-08-21T17:38:30+09:00" ==> ok
passed.
Testing mw.user ===============================================================
testing bindings in #<module mw.user> ... ok
test make-user, expects "hoge" ==> ok
test check-user?, expects #t ==> ok
test user-password-change, expects #t ==> ok
passed.
Testing mw.util ===============================================================
testing bindings in #<module mw.util> ... ok
test get-error-string, expects "hoge" ==> ok
test get-error-string long-message, expects "*** ERROR: hoge" ==> ok
test check=>, expects a ==> ok
test let$, expects (1 2 3) ==> (1 2 3)ok
test and*=>, expects #\a ==> ok
test and*=>, expects #f ==> ok
test and=> 1, expects 20 ==> ok
test and=> 2, expects #f ==> ok
test and=> 3, expects 3 ==> ok
test receive-alist 1, expects (20 . 50) ==> ok
test receive-alist 2, expects (20 50) ==> ok
test receive-slot 1, expects (20 30 40) ==> ok
test receive-slot 2, expects (20 40 . 30) ==> ok
test slot-update!, expects 88 ==> ok
test define-table (eq?), expects 8 ==> ok
test define-table (string=?), expects 8 ==> ok
test define-table (), expects b ==> ok
test define-table (get x . def), expects "hoge" ==> ok
test define-table (add delete!), expects (80 . #f) ==> ok
test case*, expects ok ==> ok
passed.
Testing mw.view ===============================================================
testing bindings in #<module mw.view> ... ok
test view 1, expects "hoge" ==> ERROR: GOT #<error "invalid application: (#f \"hoge\")">
test view 2, expects ("hoge" "hoge") ==> ok
failed.
discrepancies found.  Errors are:
test view 1: expects "hoge" => got #<error "invalid application: (#f \"hoge\")">
Testing mw.config =============================================================
testing bindings in #<module mw.config> ... ok
test define-config 1, expects x ==> ok
test define-config 2, expects "abc" ==> ok
test define-config (validator), expects 888 ==> ok
test initialize-config! 1, expects #f ==> ok
test initialize-config! 2, expects 20 ==> ok
test initialize-config! 3, expects ("jojo" "hoge") ==> ok
test with-config, expects (8 "jojo") ==> ok
passed.
Testing mw.entry ==============================================================
testing bindings in #<module mw.entry> ... ok
<entry-main 1>-----------------------------------------------------------------
test dispatch entry 1, expects "world!" ==> ok
test dispatch entry 2, expects "hoge" ==> ok
test dispatch entry 3, expects "ORAORA!" ==> ok
test dispatch entry 4, expects "Foo" ==> ok
test dispatch entry 5, expects "#f" ==> ok
test response header, expects "jojo" ==> ok
test view, expects "jojo" ==> ok
test error handler, expects "500 Internal Server Error" ==> ok
test error handler, expects "999 Test error" ==> ok
test error-view, expects "ORA!" ==> ok
passed.
Testing mw.generator ==========================================================
testing bindings in #<module mw.generator> ... ok
<session 1>--------------------------------------------------------------------
Create  generator.tmp/hoge :mode 600
test make file exists?, expects #t ==> ok
test make file mode?, expects 384 ==> ok
test make file content?, expects "HOGE" ==> ok
Create! generator.tmp/hoge :mode 644
test override file!, expects "hoge" ==> ok
Create  generator.tmp/bar/ :mode 600
test make directory exists?, expects #t ==> ok
test make directory mode?, expects 384 ==> ok
<session 2>--------------------------------------------------------------------
Create  generator.tmp/bar/ :mode 755
Create  generator.tmp/bar/hoge :mode 644
Create  generator.tmp/bar/jojo :mode 644
test recursion directory, expects #t ==> ok
passed.
Testing mw.interp.json ========================================================
testing bindings in #<module mw.interp.json> ... ok
test sexp->json, expects "{\"bar\":8,\"hoge\":[\"a\",\"b\"]}" ==> ok
passed.
Testing mw.interp.sxml ========================================================
testing bindings in #<module mw.interp.sxml> ... ok
test sxml->xml, expects "<a hoge='bar -&gt;'>&lt;- abc</a>" ==> ok
test make-interp-sxml, expects (hoge "ab" (a (|@| (hoge "bar ->")) "abc ->")) ==> ok
test top-level attribute, expects (hoge (|@| (aaa "aaa"))) ==> ok
passed.
Testing mw.interp =============================================================
testing bindings in #<module mw.interp> ... ok
test interp-generic, expects (2 2 2) ==> ok
passed.
Testing mw.mime-type ==========================================================
testing bindings in #<module mw.mime-type> ... ok
test get-mime-type, expects ("text/html" "application/pdf") ==> ok
test file-mime-type, expects "application/rdf+xml" ==> ok
test add-mime-type!, expects ("application/hoge" "application/hoge") ==> ok
passed.
Testing mw.persistent =========================================================
testing bindings in #<module mw.persistent> ... ok
test creating database, expects #t ==> ok
test creating & persistent, expects "hoge" ==> ok
test change instance, expects 99 ==> ok
test serialize <persistent>, expects #t ==> ok
test serialize <hash-table>, expects #t ==> ok
test Collection, expects ("taro" "bar" "hoge") ==> ok
test Transaction 1, expects 99 ==> ok
test Transaction 2, expects #f ==> ok
test Delete, expects #f ==> ok
passed.
Testing mw.plugin =============================================================
testing bindings in #<module mw.plugin> ... ok
test initialize-plugins, expects (8) ==> ok
passed.
Testing mw.servelet.fs ========================================================
testing bindings in #<module mw.servelet.fs> ... ok
test GET /hoge.text, expects #t ==> ok
test GET /, expects #t ==> ok
test Not found, expects "404" ==> ok
test Forbidden, expects "403" ==> ok
passed.
Testing mw.httpd ==============================================================
testing bindings in #<module mw.server.httpd> ... ok
<parse-request-line>-----------------------------------------------------------
test parse-request-line, expects ("GET" "/hoge" "HTTP/1.0") ==> ok
test parse-request-line, expects ("GET" "/hoge" "HTTP/1.1") ==> ok
test parse-request-line error HTTP/1.2?, expects #t ==> ok
<parse-request-uri>------------------------------------------------------------
test parse-request-uri /bar/hoge?jojo, expects ("bar" "/hoge" "jojo") ==> ok
test parse-request-uri /bar, expects ("bar" #f #f) ==> ok
test parse-request-uri /bar?jojo, expects ("bar" #f "jojo") ==> ok
test parse-request-uri /, expects ("" #f #f) ==> ok
test parse-request-uri /?ABC, expects ("" #f "ABC") ==> ok
<http-metavariables>-----------------------------------------------------------
test http-metavariables, expects () ==> ok
test http-metavariable-set! & ref, expects "ORAORA!!!" ==> ok
test http-metavariable-ref, expects #f ==> ok
<httpd>------------------------------------------------------------------------
test default servelet, expects "hoge" ==> ok
test servelet jojo, expects "ORAORA!!!" ==> ok
passed.
Testing mw.server.repl ========================================================
testing bindings in #<module mw.server.repl> ... ok
test repl-eval, expects "((8 . 8) 20)" ==> ok
test repl-eval (error), expects "*** ERROR: 8" ==> ok
passed.
Testing mw.server =============================================================
testing bindings in #<module mw.server> ... ok
test run-server, expects "2x2" ==> ok
passed.
Testing mw.set ================================================================
testing bindings in #<module mw.set> ... ok
test , expects (6 "scheme" "lisp" "elisp" "haskell" "sml" "ocaml") ==> ok
test subseq*, expects ("lisp" "elisp") ==> ok
test <class/set/set>, expects (4 . #t) ==> ok
test set-intersection, expects ("ocaml") ==> ok
test map-set$, expects ("object" "hoge" "jojo") ==> ok
test <elt> <= <set-set>, expects (#f #f) ==> ok
test delete! <elt>, expects #f ==> ok
test delete! <set>, expects #f ==> ok
test (<A> <- (subseq* <A> (- (size-of <A>) 2))), expects #f ==> ok
passed.
Testing mw.test.cgi ===========================================================
testing bindings in #<module mw.test.cgi> ... ok
test define-cgi-script, expects #t ==> ok
test call-with-cgi-script 1, expects "JOJO" ==> ok
test call-with-cgi-script 2, expects "abc" ==> ok
passed.
Testing mw.textlight ==========================================================
testing bindings in #<module mw.textlight> ... ok
test read List, expects (ol (li "hoge") (li (ol (li "hoge") (li "jojo"))) (li "bar") (li (ul (li "bar") (li "jojo")))) ==> ok
test read Paragraph, expects (p "hoge" "hoge") ==> ok
test read Preformatted, expects (pre " hoge" "\n" " hoge") ==> ok
test read Macro [table], expects (table (caption "jojo") (tr (th "hoge") (th "bar")) (tr (td "bar") (td "hoge"))) ==> ok
test read Macro [dl], expects (dl (dt "hoge") (dd "bar") (dt "bar") (dd "hoge") (dt "huga") (dd "test jojo abc defg")) ==> ok
passed.
Testing mw.time.http ==========================================================
testing bindings in #<module mw.time.http> ... ok
test time->http-date, expects "Tue, 11 Oct 2005 09:52:12 GMT" ==> ok
passed.
Testing mw.time.w3cdtf ========================================================
testing bindings in #<module mw.time.w3cdtf> ... ok
test w3cdtf->time, expects #t ==> ok
test time->w3cdtf <> w3cdtf->time, expects "2005-08-21T17:38:30Z" ==> ok
test time->w3cdtf <local> w3cdtf->time, expects "2005-08-21T17:38:30+09:00" ==> ok
passed.
Testing mw.user ===============================================================
testing bindings in #<module mw.user> ... ok
test make-user, expects "hoge" ==> ok
test check-user?, expects #t ==> ok
test user-password-change, expects #t ==> ok
passed.
Testing mw.util ===============================================================
testing bindings in #<module mw.util> ... ok
test get-error-string, expects "hoge" ==> ok
test get-error-string long-message, expects "*** ERROR: hoge" ==> ok
test check=>, expects a ==> ok
test let$, expects (1 2 3) ==> (1 2 3)ok
test and*=>, expects #\a ==> ok
test and*=>, expects #f ==> ok
test and=> 1, expects 20 ==> ok
test and=> 2, expects #f ==> ok
test and=> 3, expects 3 ==> ok
test receive-alist 1, expects (20 . 50) ==> ok
test receive-alist 2, expects (20 50) ==> ok
test receive-slot 1, expects (20 30 40) ==> ok
test receive-slot 2, expects (20 40 . 30) ==> ok
test slot-update!, expects 88 ==> ok
test define-table (eq?), expects 8 ==> ok
test define-table (string=?), expects 8 ==> ok
test define-table (), expects b ==> ok
test define-table (get x . def), expects "hoge" ==> ok
test define-table (add delete!), expects (80 . #f) ==> ok
test case*, expects ok ==> ok
passed.
Testing mw.view ===============================================================
testing bindings in #<module mw.view> ... ok
test view 1, expects "hoge" ==> ERROR: GOT #<error "invalid application: (#f \"hoge\")">
test view 2, expects ("hoge" "hoge") ==> ok
failed.
discrepancies found.  Errors are:
test view 1: expects "hoge" => got #<error "invalid application: (#f \"hoge\")">
Testing mw.config =============================================================
testing bindings in #<module mw.config> ... ok
test define-config 1, expects x ==> ok
test define-config 2, expects "abc" ==> ok
test define-config (validator), expects 888 ==> ok
test initialize-config! 1, expects #f ==> ok
test initialize-config! 2, expects 20 ==> ok
test initialize-config! 3, expects ("jojo" "hoge") ==> ok
test with-config, expects (8 "jojo") ==> ok
passed.
Testing mw.entry ==============================================================
testing bindings in #<module mw.entry> ... ok
<entry-main 1>-----------------------------------------------------------------
test dispatch entry 1, expects "world!" ==> ok
test dispatch entry 2, expects "hoge" ==> ok
test dispatch entry 3, expects "ORAORA!" ==> ok
test dispatch entry 4, expects "Foo" ==> ok
test dispatch entry 5, expects "#f" ==> ok
test response header, expects "jojo" ==> ok
test view, expects "jojo" ==> ok
test error handler, expects "500 Internal Server Error" ==> ok
test error handler, expects "999 Test error" ==> ok
test error-view, expects "ORA!" ==> ok
passed.
Testing mw.generator ==========================================================
testing bindings in #<module mw.generator> ... ok
<session 1>--------------------------------------------------------------------
Create  generator.tmp/hoge :mode 600
test make file exists?, expects #t ==> ok
test make file mode?, expects 384 ==> ok
test make file content?, expects "HOGE" ==> ok
Create! generator.tmp/hoge :mode 644
test override file!, expects "hoge" ==> ok
Create  generator.tmp/bar/ :mode 600
test make directory exists?, expects #t ==> ok
test make directory mode?, expects 384 ==> ok
<session 2>--------------------------------------------------------------------
Create  generator.tmp/bar/ :mode 755
Create  generator.tmp/bar/hoge :mode 644
Create  generator.tmp/bar/jojo :mode 644
test recursion directory, expects #t ==> ok
passed.
Testing mw.interp.json ========================================================
testing bindings in #<module mw.interp.json> ... ok
test sexp->json, expects "{\"bar\":8,\"hoge\":[\"a\",\"b\"]}" ==> ok
passed.
Testing mw.interp.sxml ========================================================
testing bindings in #<module mw.interp.sxml> ... ok
test sxml->xml, expects "<a hoge='bar -&gt;'>&lt;- abc</a>" ==> ok
test make-interp-sxml, expects (hoge "ab" (a (|@| (hoge "bar ->")) "abc ->")) ==> ok
test top-level attribute, expects (hoge (|@| (aaa "aaa"))) ==> ok
passed.
Testing mw.interp =============================================================
testing bindings in #<module mw.interp> ... ok
test interp-generic, expects (2 2 2) ==> ok
passed.
Testing mw.mime-type ==========================================================
testing bindings in #<module mw.mime-type> ... ok
test get-mime-type, expects ("text/html" "application/pdf") ==> ok
test file-mime-type, expects "application/rdf+xml" ==> ok
test add-mime-type!, expects ("application/hoge" "application/hoge") ==> ok
passed.
Testing mw.persistent =========================================================
testing bindings in #<module mw.persistent> ... ok
test creating database, expects #t ==> ok
test creating & persistent, expects "hoge" ==> ok
test change instance, expects 99 ==> ok
test serialize <persistent>, expects #t ==> ok
test serialize <hash-table>, expects #t ==> ok
test Collection, expects ("taro" "bar" "hoge") ==> ok
test Transaction 1, expects 99 ==> ok
test Transaction 2, expects #f ==> ok
test Delete, expects #f ==> ok
passed.
Testing mw.plugin =============================================================
testing bindings in #<module mw.plugin> ... ok
test initialize-plugins, expects (8) ==> ok
passed.
Testing mw.servelet.cgi =======================================================
testing bindings in #<module mw.servelet.cgi> ... ok
test run cgi-servelet, expects "HOGE" ==> ok
passed.
Testing mw.servelet.fs ========================================================
testing bindings in #<module mw.servelet.fs> ... ok
test GET /hoge.text, expects #t ==> ok
test GET /, expects #t ==> ok
test Not found, expects "404" ==> ok
test Forbidden, expects "403" ==> ok
passed.
Testing mw.httpd ==============================================================
testing bindings in #<module mw.server.httpd> ... ok
<parse-request-line>-----------------------------------------------------------
test parse-request-line, expects ("GET" "/hoge" "HTTP/1.0") ==> ok
test parse-request-line, expects ("GET" "/hoge" "HTTP/1.1") ==> ok
test parse-request-line error HTTP/1.2?, expects #t ==> ok
<parse-request-uri>------------------------------------------------------------
test parse-request-uri /bar/hoge?jojo, expects ("bar" "/hoge" "jojo") ==> ok
test parse-request-uri /bar, expects ("bar" #f #f) ==> ok
test parse-request-uri /bar?jojo, expects ("bar" #f "jojo") ==> ok
test parse-request-uri /, expects ("" #f #f) ==> ok
test parse-request-uri /?ABC, expects ("" #f "ABC") ==> ok
<http-metavariables>-----------------------------------------------------------
test http-metavariables, expects () ==> ok
test http-metavariable-set! & ref, expects "ORAORA!!!" ==> ok
test http-metavariable-ref, expects #f ==> ok
<httpd>------------------------------------------------------------------------
test default servelet, expects "hoge" ==> ok
test servelet jojo, expects "ORAORA!!!" ==> ok
passed.
Testing mw.server.repl ========================================================
testing bindings in #<module mw.server.repl> ... ok
test repl-eval, expects "((8 . 8) 20)" ==> ok
test repl-eval (error), expects "*** ERROR: 8" ==> ok
passed.
Testing mw.server =============================================================
testing bindings in #<module mw.server> ... ok
test run-server, expects "2x2" ==> ok
passed.
Testing mw.set ================================================================
testing bindings in #<module mw.set> ... ok
test , expects (6 "scheme" "lisp" "elisp" "haskell" "sml" "ocaml") ==> ok
test subseq*, expects ("lisp" "elisp") ==> ok
test <class/set/set>, expects (4 . #t) ==> ok
test set-intersection, expects ("ocaml") ==> ok
test map-set$, expects ("object" "hoge" "jojo") ==> ok
test <elt> <= <set-set>, expects (#f #f) ==> ok
test delete! <elt>, expects #f ==> ok
test delete! <set>, expects #f ==> ok
test (<A> <- (subseq* <A> (- (size-of <A>) 2))), expects #f ==> ok
passed.
Testing mw.test.cgi ===========================================================
testing bindings in #<module mw.test.cgi> ... ok
test define-cgi-script, expects #t ==> ok
test call-with-cgi-script 1, expects "JOJO" ==> ok
test call-with-cgi-script 2, expects "abc" ==> ok
passed.
Testing mw.textlight ==========================================================
testing bindings in #<module mw.textlight> ... ok
test read List, expects (ol (li "hoge") (li (ol (li "hoge") (li "jojo"))) (li "bar") (li (ul (li "bar") (li "jojo")))) ==> ok
test read Paragraph, expects (p "hoge" "hoge") ==> ok
test read Preformatted, expects (pre " hoge" "\n" " hoge") ==> ok
test read Macro [table], expects (table (caption "jojo") (tr (th "hoge") (th "bar")) (tr (td "bar") (td "hoge"))) ==> ok
test read Macro [dl], expects (dl (dt "hoge") (dd "bar") (dt "bar") (dd "hoge") (dt "huga") (dd "test jojo abc defg")) ==> ok
passed.
Testing mw.time.http ==========================================================
testing bindings in #<module mw.time.http> ... ok
test time->http-date, expects "Tue, 11 Oct 2005 09:52:12 GMT" ==> ok
passed.
Testing mw.time.w3cdtf ========================================================
testing bindings in #<module mw.time.w3cdtf> ... ok
test w3cdtf->time, expects #t ==> ok
test time->w3cdtf <> w3cdtf->time, expects "2005-08-21T17:38:30Z" ==> ok
test time->w3cdtf <local> w3cdtf->time, expects "2005-08-21T17:38:30+09:00" ==> ok
passed.
Testing mw.user ===============================================================
testing bindings in #<module mw.user> ... ok
test make-user, expects "hoge" ==> ok
test check-user?, expects #t ==> ok
test user-password-change, expects #t ==> ok
passed.
Testing mw.util ===============================================================
testing bindings in #<module mw.util> ... ok
test get-error-string, expects "hoge" ==> ok
test get-error-string long-message, expects "*** ERROR: hoge" ==> ok
test check=>, expects a ==> ok
test let$, expects (1 2 3) ==> (1 2 3)ok
test and*=>, expects #\a ==> ok
test and*=>, expects #f ==> ok
test and=> 1, expects 20 ==> ok
test and=> 2, expects #f ==> ok
test and=> 3, expects 3 ==> ok
test receive-alist 1, expects (20 . 50) ==> ok
test receive-alist 2, expects (20 50) ==> ok
test receive-slot 1, expects (20 30 40) ==> ok
test receive-slot 2, expects (20 40 . 30) ==> ok
test slot-update!, expects 88 ==> ok
test define-table (eq?), expects 8 ==> ok
test define-table (string=?), expects 8 ==> ok
test define-table (), expects b ==> ok
test define-table (get x . def), expects "hoge" ==> ok
test define-table (add delete!), expects (80 . #f) ==> ok
test case*, expects ok ==> ok
passed.
Testing mw.view ===============================================================
testing bindings in #<module mw.view> ... ok
test view 1, expects "hoge" ==> ERROR: GOT #<error "invalid application: (#f \"hoge\")">
test view 2, expects ("hoge" "hoge") ==> ok
failed.
discrepancies found.  Errors are:
test view 1: expects "hoge" => got #<error "invalid application: (#f \"hoge\")">
Testing mw.config =============================================================
testing bindings in #<module mw.config> ... ok
test define-config 1, expects x ==> ok
test define-config 2, expects "abc" ==> ok
test define-config (validator), expects 888 ==> ok
test initialize-config! 1, expects #f ==> ok
test initialize-config! 2, expects 20 ==> ok
test initialize-config! 3, expects ("jojo" "hoge") ==> ok
test with-config, expects (8 "jojo") ==> ok
passed.
Testing mw.entry ==============================================================
testing bindings in #<module mw.entry> ... ok
<entry-main 1>-----------------------------------------------------------------
test dispatch entry 1, expects "world!" ==> ok
test dispatch entry 2, expects "hoge" ==> ok
test dispatch entry 3, expects "ORAORA!" ==> ok
test dispatch entry 4, expects "Foo" ==> ok
test dispatch entry 5, expects "#f" ==> ok
test response header, expects "jojo" ==> ok
test view, expects "jojo" ==> ok
test error handler, expects "500 Internal Server Error" ==> ok
test error handler, expects "999 Test error" ==> ok
test error-view, expects "ORA!" ==> ok
passed.
Testing mw.generator ==========================================================
testing bindings in #<module mw.generator> ... ok
<session 1>--------------------------------------------------------------------
Create  generator.tmp/hoge :mode 600
test make file exists?, expects #t ==> ok
test make file mode?, expects 384 ==> ok
test make file content?, expects "HOGE" ==> ok
Create! generator.tmp/hoge :mode 644
test override file!, expects "hoge" ==> ok
Create  generator.tmp/bar/ :mode 600
test make directory exists?, expects #t ==> ok
test make directory mode?, expects 384 ==> ok
<session 2>--------------------------------------------------------------------
Create  generator.tmp/bar/ :mode 755
Create  generator.tmp/bar/hoge :mode 644
Create  generator.tmp/bar/jojo :mode 644
test recursion directory, expects #t ==> ok
passed.
Testing mw.interp.json ========================================================
testing bindings in #<module mw.interp.json> ... ok
test sexp->json, expects "{\"bar\":8,\"hoge\":[\"a\",\"b\"]}" ==> ok
passed.
Testing mw.interp.sxml ========================================================
testing bindings in #<module mw.interp.sxml> ... ok
test sxml->xml, expects "<a hoge='bar -&gt;'>&lt;- abc</a>" ==> ok
test make-interp-sxml, expects (hoge "ab" (a (|@| (hoge "bar ->")) "abc ->")) ==> ok
test top-level attribute, expects (hoge (|@| (aaa "aaa"))) ==> ok
passed.
Testing mw.interp =============================================================
testing bindings in #<module mw.interp> ... ok
test interp-generic, expects (2 2 2) ==> ok
passed.
Testing mw.mime-type ==========================================================
testing bindings in #<module mw.mime-type> ... ok
test get-mime-type, expects ("text/html" "application/pdf") ==> ok
test file-mime-type, expects "application/rdf+xml" ==> ok
test add-mime-type!, expects ("application/hoge" "application/hoge") ==> ok
passed.
Testing mw.persistent =========================================================
testing bindings in #<module mw.persistent> ... ok
test creating database, expects #t ==> ok
test creating & persistent, expects "hoge" ==> ok
test change instance, expects 99 ==> ok
test serialize <persistent>, expects #t ==> ok
test serialize <hash-table>, expects #t ==> ok
test Collection, expects ("taro" "bar" "hoge") ==> ok
test Transaction 1, expects 99 ==> ok
test Transaction 2, expects #f ==> ok
test Delete, expects #f ==> ok
passed.
Testing mw.plugin =============================================================
testing bindings in #<module mw.plugin> ... ok
test initialize-plugins, expects (8) ==> ok
passed.
Testing mw.servelet.cgi =======================================================
testing bindings in #<module mw.servelet.cgi> ... ok
test run cgi-servelet, expects "HOGE" ==> ok
passed.
Testing mw.servelet.fs ========================================================
testing bindings in #<module mw.servelet.fs> ... ok
test GET /hoge.text, expects #t ==> ok
test GET /, expects #t ==> ok
test Not found, expects "404" ==> ok
test Forbidden, expects "403" ==> ok
passed.
Testing mw.httpd ==============================================================
testing bindings in #<module mw.server.httpd> ... ok
<parse-request-line>-----------------------------------------------------------
test parse-request-line, expects ("GET" "/hoge" "HTTP/1.0") ==> ok
test parse-request-line, expects ("GET" "/hoge" "HTTP/1.1") ==> ok
test parse-request-line error HTTP/1.2?, expects #t ==> ok
<parse-request-uri>------------------------------------------------------------
test parse-request-uri /bar/hoge?jojo, expects ("bar" "/hoge" "jojo") ==> ok
test parse-request-uri /bar, expects ("bar" #f #f) ==> ok
test parse-request-uri /bar?jojo, expects ("bar" #f "jojo") ==> ok
test parse-request-uri /, expects ("" #f #f) ==> ok
test parse-request-uri /?ABC, expects ("" #f "ABC") ==> ok
<http-metavariables>-----------------------------------------------------------
test http-metavariables, expects () ==> ok
test http-metavariable-set! & ref, expects "ORAORA!!!" ==> ok
test http-metavariable-ref, expects #f ==> ok
<httpd>------------------------------------------------------------------------
test default servelet, expects "hoge" ==> ok
test servelet jojo, expects "ORAORA!!!" ==> ok
passed.
Testing mw.server.repl ========================================================
testing bindings in #<module mw.server.repl> ... ok
test repl-eval, expects "((8 . 8) 20)" ==> ok
test repl-eval (error), expects "*** ERROR: 8" ==> ok
passed.
Testing mw.server =============================================================
testing bindings in #<module mw.server> ... ok
test run-server, expects "2x2" ==> ok
passed.
Testing mw.set ================================================================
testing bindings in #<module mw.set> ... ok
test , expects (6 "scheme" "lisp" "elisp" "haskell" "sml" "ocaml") ==> ok
test subseq*, expects ("lisp" "elisp") ==> ok
test <class/set/set>, expects (4 . #t) ==> ok
test set-intersection, expects ("ocaml") ==> ok
test map-set$, expects ("object" "hoge" "jojo") ==> ok
test <elt> <= <set-set>, expects (#f #f) ==> ok
test delete! <elt>, expects #f ==> ok
test delete! <set>, expects #f ==> ok
test (<A> <- (subseq* <A> (- (size-of <A>) 2))), expects #f ==> ok
passed.
Testing mw.test.cgi ===========================================================
testing bindings in #<module mw.test.cgi> ... ok
test define-cgi-script, expects #t ==> ok
test call-with-cgi-script 1, expects "JOJO" ==> ok
test call-with-cgi-script 2, expects "abc" ==> ok
passed.
Testing mw.textlight ==========================================================
testing bindings in #<module mw.textlight> ... ok
test read List, expects (ol (li "hoge") (li (ol (li "hoge") (li "jojo"))) (li "bar") (li (ul (li "bar") (li "jojo")))) ==> ok
test read Paragraph, expects (p "hoge" "hoge") ==> ok
test read Preformatted, expects (pre " hoge" "\n" " hoge") ==> ok
test read Macro [table], expects (table (caption "jojo") (tr (th "hoge") (th "bar")) (tr (td "bar") (td "hoge"))) ==> ok
test read Macro [dl], expects (dl (dt "hoge") (dd "bar") (dt "bar") (dd "hoge") (dt "huga") (dd "test jojo abc defg")) ==> ok
passed.
Testing mw.time.http ==========================================================
testing bindings in #<module mw.time.http> ... ok
test time->http-date, expects "Tue, 11 Oct 2005 09:52:12 GMT" ==> ok
passed.
Testing mw.time.w3cdtf ========================================================
testing bindings in #<module mw.time.w3cdtf> ... ok
test w3cdtf->time, expects #t ==> ok
test time->w3cdtf <> w3cdtf->time, expects "2005-08-21T17:38:30Z" ==> ok
test time->w3cdtf <local> w3cdtf->time, expects "2005-08-21T17:38:30+09:00" ==> ok
passed.
Testing mw.user ===============================================================
testing bindings in #<module mw.user> ... ok
test make-user, expects "hoge" ==> ok
test check-user?, expects #t ==> ok
test user-password-change, expects #t ==> ok
passed.
Testing mw.util ===============================================================
testing bindings in #<module mw.util> ... ok
test get-error-string, expects "hoge" ==> ok
test get-error-string long-message, expects "*** ERROR: hoge" ==> ok
test check=>, expects a ==> ok
test let$, expects (1 2 3) ==> (1 2 3)ok
test and*=>, expects #\a ==> ok
test and*=>, expects #f ==> ok
test and=> 1, expects 20 ==> ok
test and=> 2, expects #f ==> ok
test and=> 3, expects 3 ==> ok
test receive-alist 1, expects (20 . 50) ==> ok
test receive-alist 2, expects (20 50) ==> ok
test receive-slot 1, expects (20 30 40) ==> ok
test receive-slot 2, expects (20 40 . 30) ==> ok
test slot-update!, expects 88 ==> ok
test define-table (eq?), expects 8 ==> ok
test define-table (string=?), expects 8 ==> ok
test define-table (), expects b ==> ok
test define-table (get x . def), expects "hoge" ==> ok
test define-table (add delete!), expects (80 . #f) ==> ok
test case*, expects ok ==> ok
passed.
Testing mw.view ===============================================================
testing bindings in #<module mw.view> ... ok
test view 1, expects "hoge" ==> ok
test view 2, expects ("hoge" "hoge") ==> ok
passed.
Testing mw.config =============================================================
testing bindings in #<module mw.config> ... ok
test define-config 1, expects x ==> ok
test define-config 2, expects "abc" ==> ok
test define-config (validator), expects 888 ==> ok
test initialize-config! 1, expects #f ==> ok
test initialize-config! 2, expects 20 ==> ok
test initialize-config! 3, expects ("jojo" "hoge") ==> ok
test with-config, expects (8 "jojo") ==> ok
passed.
Testing mw.entry ==============================================================
testing bindings in #<module mw.entry> ... ok
<entry-main 1>-----------------------------------------------------------------
test dispatch entry 1, expects "world!" ==> ok
test dispatch entry 3, expects "ORAORA!" ==> ok
test dispatch entry 4, expects "Foo" ==> ok
test dispatch entry 5, expects "#f" ==> ok
test response header, expects "jojo" ==> ok
test view, expects "jojo" ==> ok
test error handler, expects "500 Internal Server Error" ==> ok
test error handler, expects "999 Test error" ==> ok
test error-view, expects "ORA!" ==> ok
passed.
Testing mw.generator ==========================================================
testing bindings in #<module mw.generator> ... ok
<session 1>--------------------------------------------------------------------
Create  generator.tmp/hoge :mode 600
test make file exists?, expects #t ==> ok
test make file mode?, expects 384 ==> ok
test make file content?, expects "HOGE" ==> ok
Create! generator.tmp/hoge :mode 644
test override file!, expects "hoge" ==> ok
Create  generator.tmp/bar/ :mode 600
test make directory exists?, expects #t ==> ok
test make directory mode?, expects 384 ==> ok
<session 2>--------------------------------------------------------------------
Create  generator.tmp/bar/ :mode 755
Create  generator.tmp/bar/hoge :mode 644
Create  generator.tmp/bar/jojo :mode 644
test recursion directory, expects #t ==> ok
passed.
Testing mw.interp.json ========================================================
testing bindings in #<module mw.interp.json> ... ok
test sexp->json, expects "{\"bar\":8,\"hoge\":[\"a\",\"b\"]}" ==> ok
passed.
Testing mw.interp.sxml ========================================================
testing bindings in #<module mw.interp.sxml> ... ok
test sxml->xml, expects "<a hoge='bar -&gt;'>&lt;- abc</a>" ==> ok
test make-interp-sxml, expects (hoge "ab" (a (|@| (hoge "bar ->")) "abc ->")) ==> ok
test top-level attribute, expects (hoge (|@| (aaa "aaa"))) ==> ok
passed.
Testing mw.interp =============================================================
testing bindings in #<module mw.interp> ... ok
test interp-generic, expects (2 2 2) ==> ok
passed.
Testing mw.mime-type ==========================================================
testing bindings in #<module mw.mime-type> ... ok
test get-mime-type, expects ("text/html" "application/pdf") ==> ok
test file-mime-type, expects "application/rdf+xml" ==> ok
test add-mime-type!, expects ("application/hoge" "application/hoge") ==> ok
passed.
Testing mw.persistent =========================================================
testing bindings in #<module mw.persistent> ... ok
test creating database, expects #t ==> ok
test creating & persistent, expects "hoge" ==> ok
test change instance, expects 99 ==> ok
test serialize <persistent>, expects #t ==> ok
test serialize <hash-table>, expects #t ==> ok
test Collection, expects ("taro" "bar" "hoge") ==> ok
test Transaction 1, expects 99 ==> ok
test Transaction 2, expects #f ==> ok
test Delete, expects #f ==> ok
passed.
Testing mw.plugin =============================================================
testing bindings in #<module mw.plugin> ... ok
test initialize-plugins, expects (8) ==> ok
passed.
Testing mw.servelet.cgi =======================================================
testing bindings in #<module mw.servelet.cgi> ... ok
test run cgi-servelet, expects "HOGE" ==> ok
passed.
Testing mw.servelet.fs ========================================================
testing bindings in #<module mw.servelet.fs> ... ok
test GET /hoge.text, expects #t ==> ok
test GET /, expects #t ==> ok
test Not found, expects "404" ==> ok
test Forbidden, expects "403" ==> ok
passed.
Testing mw.httpd ==============================================================
testing bindings in #<module mw.server.httpd> ... ok
<parse-request-line>-----------------------------------------------------------
test parse-request-line, expects ("GET" "/hoge" "HTTP/1.0") ==> ok
test parse-request-line, expects ("GET" "/hoge" "HTTP/1.1") ==> ok
test parse-request-line error HTTP/1.2?, expects #t ==> ok
<parse-request-uri>------------------------------------------------------------
test parse-request-uri /bar/hoge?jojo, expects ("bar" "/hoge" "jojo") ==> ok
test parse-request-uri /bar, expects ("bar" #f #f) ==> ok
test parse-request-uri /bar?jojo, expects ("bar" #f "jojo") ==> ok
test parse-request-uri /, expects ("" #f #f) ==> ok
test parse-request-uri /?ABC, expects ("" #f "ABC") ==> ok
<http-metavariables>-----------------------------------------------------------
test http-metavariables, expects () ==> ok
test http-metavariable-set! & ref, expects "ORAORA!!!" ==> ok
test http-metavariable-ref, expects #f ==> ok
<httpd>------------------------------------------------------------------------
test default servelet, expects "hoge" ==> ok
test servelet jojo, expects "ORAORA!!!" ==> ok
passed.
Testing mw.server.repl ========================================================
testing bindings in #<module mw.server.repl> ... ok
test repl-eval, expects "((8 . 8) 20)" ==> ok
test repl-eval (error), expects "*** ERROR: 8" ==> ok
passed.
Testing mw.server =============================================================
testing bindings in #<module mw.server> ... ok
test run-server, expects "2x2" ==> ok
passed.
Testing mw.set ================================================================
testing bindings in #<module mw.set> ... ok
test , expects (6 "scheme" "lisp" "elisp" "haskell" "sml" "ocaml") ==> ok
test subseq*, expects ("lisp" "elisp") ==> ok
test <class/set/set>, expects (4 . #t) ==> ok
test set-intersection, expects ("ocaml") ==> ok
test map-set$, expects ("object" "hoge" "jojo") ==> ok
test <elt> <= <set-set>, expects (#f #f) ==> ok
test delete! <elt>, expects #f ==> ok
test delete! <set>, expects #f ==> ok
test (<A> <- (subseq* <A> (- (size-of <A>) 2))), expects #f ==> ok
passed.
Testing mw.test.cgi ===========================================================
testing bindings in #<module mw.test.cgi> ... ok
test define-cgi-script, expects #t ==> ok
test call-with-cgi-script 1, expects "JOJO" ==> ok
test call-with-cgi-script 2, expects "abc" ==> ok
passed.
Testing mw.textlight ==========================================================
testing bindings in #<module mw.textlight> ... ok
test read List, expects (ol (li "hoge") (li (ol (li "hoge") (li "jojo"))) (li "bar") (li (ul (li "bar") (li "jojo")))) ==> ok
test read Paragraph, expects (p "hoge" "hoge") ==> ok
test read Preformatted, expects (pre " hoge" "\n" " hoge") ==> ok
test read Macro [table], expects (table (caption "jojo") (tr (th "hoge") (th "bar")) (tr (td "bar") (td "hoge"))) ==> ok
test read Macro [dl], expects (dl (dt "hoge") (dd "bar") (dt "bar") (dd "hoge") (dt "huga") (dd "test jojo abc defg")) ==> ok
passed.
Testing mw.time.http ==========================================================
testing bindings in #<module mw.time.http> ... ok
test time->http-date, expects "Tue, 11 Oct 2005 09:52:12 GMT" ==> ok
passed.
Testing mw.time.w3cdtf ========================================================
testing bindings in #<module mw.time.w3cdtf> ... ok
test w3cdtf->time, expects #t ==> ok
test time->w3cdtf <> w3cdtf->time, expects "2005-08-21T17:38:30Z" ==> ok
test time->w3cdtf <local> w3cdtf->time, expects "2005-08-21T17:38:30+09:00" ==> ok
passed.
Testing mw.user ===============================================================
testing bindings in #<module mw.user> ... ok
test make-user, expects "hoge" ==> ok
test check-user?, expects #t ==> ok
test user-password-change, expects #t ==> ok
passed.
Testing mw.util ===============================================================
testing bindings in #<module mw.util> ... ok
test get-error-string, expects "hoge" ==> ok
test get-error-string long-message, expects "*** ERROR: hoge" ==> ok
test check=>, expects a ==> ok
test let$, expects (1 2 3) ==> (1 2 3)ok
test and*=>, expects #\a ==> ok
test and*=>, expects #f ==> ok
test and=> 1, expects 20 ==> ok
test and=> 2, expects #f ==> ok
test and=> 3, expects 3 ==> ok
test receive-alist 1, expects (20 . 50) ==> ok
test receive-alist 2, expects (20 50) ==> ok
test receive-slot 1, expects (20 30 40) ==> ok
test receive-slot 2, expects (20 40 . 30) ==> ok
test slot-update!, expects 88 ==> ok
test define-table (eq?), expects 8 ==> ok
test define-table (string=?), expects 8 ==> ok
test define-table (), expects b ==> ok
test define-table (get x . def), expects "hoge" ==> ok
test define-table (add delete!), expects (80 . #f) ==> ok
test case*, expects ok ==> ok
passed.
Testing mw.view ===============================================================
testing bindings in #<module mw.view> ... ok
test view 1, expects "hoge" ==> ok
test view 2, expects "hogehoge" ==> ok
passed.
Testing mw.config =============================================================
testing bindings in #<module mw.config> ... ok
test define-config 1, expects x ==> ok
test define-config 2, expects "abc" ==> ok
test define-config (validator), expects 888 ==> ok
test initialize-config! 1, expects #f ==> ok
test initialize-config! 2, expects 20 ==> ok
test initialize-config! 3, expects ("jojo" "hoge") ==> ok
test with-config, expects (8 "jojo") ==> ok
passed.
Testing mw.entry ==============================================================
testing bindings in #<module mw.entry> ... ok
<entry-main 1>-----------------------------------------------------------------
test dispatch entry 1, expects "world!" ==> ok
test dispatch entry 3, expects "ORAORA!" ==> ok
test dispatch entry 4, expects "Foo" ==> ok
test dispatch entry 5, expects "#f" ==> ok
test response header, expects "jojo" ==> ok
test view, expects "jojo" ==> ok
test error handler, expects "500 Internal Server Error" ==> ok
test error handler, expects "999 Test error" ==> ok
test error-view, expects "ORA!" ==> ok
passed.
Testing mw.generator ==========================================================
testing bindings in #<module mw.generator> ... ok
<session 1>--------------------------------------------------------------------
Create  generator.tmp/hoge :mode 600
test make file exists?, expects #t ==> ok
test make file mode?, expects 384 ==> ok
test make file content?, expects "HOGE" ==> ok
Create! generator.tmp/hoge :mode 644
test override file!, expects "hoge" ==> ok
Create  generator.tmp/bar/ :mode 600
test make directory exists?, expects #t ==> ok
test make directory mode?, expects 384 ==> ok
<session 2>--------------------------------------------------------------------
Create  generator.tmp/bar/ :mode 755
Create  generator.tmp/bar/hoge :mode 644
Create  generator.tmp/bar/jojo :mode 644
test recursion directory, expects #t ==> ok
passed.
Testing mw.interp.json ========================================================
testing bindings in #<module mw.interp.json> ... ok
test sexp->json, expects "{\"bar\":8,\"hoge\":[\"a\",\"b\"]}" ==> ok
passed.
Testing mw.interp.sxml ========================================================
testing bindings in #<module mw.interp.sxml> ... ok
test sxml->xml, expects "<a hoge='bar -&gt;'>&lt;- abc</a>" ==> ok
test make-interp-sxml, expects (hoge "ab" (a (|@| (hoge "bar ->")) "abc ->")) ==> ok
test top-level attribute, expects (hoge (|@| (aaa "aaa"))) ==> ok
passed.
Testing mw.interp =============================================================
testing bindings in #<module mw.interp> ... ok
test interp-generic, expects (2 2 2) ==> ok
passed.
Testing mw.mime-type ==========================================================
testing bindings in #<module mw.mime-type> ... ok
test get-mime-type, expects ("text/html" "application/pdf") ==> ok
test file-mime-type, expects "application/rdf+xml" ==> ok
test add-mime-type!, expects ("application/hoge" "application/hoge") ==> ok
passed.
Testing mw.persistent =========================================================
testing bindings in #<module mw.persistent> ... ok
test creating database, expects #t ==> ok
test creating & persistent, expects "hoge" ==> ok
test change instance, expects 99 ==> ok
test serialize <persistent>, expects #t ==> ok
test serialize <hash-table>, expects #t ==> ok
test Collection, expects ("taro" "bar" "hoge") ==> ok
test Transaction 1, expects 99 ==> ok
test Transaction 2, expects #f ==> ok
test Delete, expects #f ==> ok
passed.
Testing mw.plugin =============================================================
testing bindings in #<module mw.plugin> ... ok
test initialize-plugins, expects (8) ==> ok
passed.
Testing mw.servelet.cgi =======================================================
testing bindings in #<module mw.servelet.cgi> ... ok
test run cgi-servelet, expects "HOGE" ==> ok
passed.
Testing mw.servelet.fs ========================================================
testing bindings in #<module mw.servelet.fs> ... ok
test GET /hoge.text, expects #t ==> ok
test GET /, expects #t ==> ok
test Not found, expects "404" ==> ok
test Forbidden, expects "403" ==> ok
passed.
Testing mw.httpd ==============================================================
testing bindings in #<module mw.server.httpd> ... ok
<parse-request-line>-----------------------------------------------------------
test parse-request-line, expects ("GET" "/hoge" "HTTP/1.0") ==> ok
test parse-request-line, expects ("GET" "/hoge" "HTTP/1.1") ==> ok
test parse-request-line error HTTP/1.2?, expects #t ==> ok
<parse-request-uri>------------------------------------------------------------
test parse-request-uri /bar/hoge?jojo, expects ("bar" "/hoge" "jojo") ==> ok
test parse-request-uri /bar, expects ("bar" #f #f) ==> ok
test parse-request-uri /bar?jojo, expects ("bar" #f "jojo") ==> ok
test parse-request-uri /, expects ("" #f #f) ==> ok
test parse-request-uri /?ABC, expects ("" #f "ABC") ==> ok
<http-metavariables>-----------------------------------------------------------
test http-metavariables, expects () ==> ok
test http-metavariable-set! & ref, expects "ORAORA!!!" ==> ok
test http-metavariable-ref, expects #f ==> ok
<httpd>------------------------------------------------------------------------
test default servelet, expects "hoge" ==> ok
test servelet jojo, expects "ORAORA!!!" ==> ok
passed.
Testing mw.server.repl ========================================================
testing bindings in #<module mw.server.repl> ... ok
test repl-eval, expects "((8 . 8) 20)" ==> ok
test repl-eval (error), expects "*** ERROR: 8" ==> ok
passed.
Testing mw.server =============================================================
testing bindings in #<module mw.server> ... ok
test run-server, expects "2x2" ==> ok
passed.
Testing mw.set ================================================================
testing bindings in #<module mw.set> ... ok
test , expects (6 "scheme" "lisp" "elisp" "haskell" "sml" "ocaml") ==> ok
test subseq*, expects ("lisp" "elisp") ==> ok
test <class/set/set>, expects (4 . #t) ==> ok
test set-intersection, expects ("ocaml") ==> ok
test map-set$, expects ("object" "hoge" "jojo") ==> ok
test <elt> <= <set-set>, expects (#f #f) ==> ok
test delete! <elt>, expects #f ==> ok
test delete! <set>, expects #f ==> ok
test (<A> <- (subseq* <A> (- (size-of <A>) 2))), expects #f ==> ok
passed.
Testing mw.test.cgi ===========================================================
testing bindings in #<module mw.test.cgi> ... ok
test define-cgi-script, expects #t ==> ok
test call-with-cgi-script 1, expects "JOJO" ==> ok
test call-with-cgi-script 2, expects "abc" ==> ok
passed.
Testing mw.textlight ==========================================================
testing bindings in #<module mw.textlight> ... ok
test read List, expects (ol (li "hoge") (li (ol (li "hoge") (li "jojo"))) (li "bar") (li (ul (li "bar") (li "jojo")))) ==> ok
test read Paragraph, expects (p "hoge" "hoge") ==> ok
test read Preformatted, expects (pre " hoge" "\n" " hoge") ==> ok
test read Macro [table], expects (table (caption "jojo") (tr (th "hoge") (th "bar")) (tr (td "bar") (td "hoge"))) ==> ok
test read Macro [dl], expects (dl (dt "hoge") (dd "bar") (dt "bar") (dd "hoge") (dt "huga") (dd "test jojo abc defg")) ==> ok
passed.
Testing mw.time.http ==========================================================
testing bindings in #<module mw.time.http> ... ok
test time->http-date, expects "Tue, 11 Oct 2005 09:52:12 GMT" ==> ok
passed.
Testing mw.time.w3cdtf ========================================================
testing bindings in #<module mw.time.w3cdtf> ... ok
test w3cdtf->time, expects #t ==> ok
test time->w3cdtf <> w3cdtf->time, expects "2005-08-21T17:38:30Z" ==> ok
test time->w3cdtf <local> w3cdtf->time, expects "2005-08-21T17:38:30+09:00" ==> ok
passed.
Testing mw.user ===============================================================
testing bindings in #<module mw.user> ... ok
test make-user, expects "hoge" ==> ok
test check-user?, expects #t ==> ok
test user-password-change, expects #t ==> ok
passed.
Testing mw.util ===============================================================
testing bindings in #<module mw.util> ... ok
test get-error-string, expects "hoge" ==> ok
test get-error-string long-message, expects "*** ERROR: hoge" ==> ok
test check=>, expects a ==> ok
test let$, expects (1 2 3) ==> (1 2 3)ok
test and*=>, expects #\a ==> ok
test and*=>, expects #f ==> ok
test and=> 1, expects 20 ==> ok
test and=> 2, expects #f ==> ok
test and=> 3, expects 3 ==> ok
test receive-alist 1, expects (20 . 50) ==> ok
test receive-alist 2, expects (20 50) ==> ok
test receive-slot 1, expects (20 30 40) ==> ok
test receive-slot 2, expects (20 40 . 30) ==> ok
test slot-update!, expects 88 ==> ok
test define-table (eq?), expects 8 ==> ok
test define-table (string=?), expects 8 ==> ok
test define-table (), expects b ==> ok
test define-table (get x . def), expects "hoge" ==> ok
test define-table (add delete!), expects (80 . #f) ==> ok
test case*, expects ok ==> ok
passed.
Testing mw.view ===============================================================
testing bindings in #<module mw.view> ... ok
test view 1, expects "hoge" ==> ok
test view 2, expects "hogehoge" ==> ok
passed.
Testing mw.config =============================================================
testing bindings in #<module mw.config> ... ok
test define-config 1, expects x ==> ok
test define-config 2, expects "abc" ==> ok
test define-config (validator), expects 888 ==> ok
test initialize-config! 1, expects #f ==> ok
test initialize-config! 2, expects 20 ==> ok
test initialize-config! 3, expects ("jojo" "hoge") ==> ok
test with-config, expects (8 "jojo") ==> ok
passed.
Testing mw.entry ==============================================================
testing bindings in #<module mw.entry> ... ok
<entry-main 1>-----------------------------------------------------------------
test dispatch entry 1, expects "world!" ==> ok
test dispatch entry 3, expects "ORAORA!" ==> ok
test dispatch entry 4, expects "Foo" ==> ok
test dispatch entry 5, expects "#f" ==> ok
test dispatch entry 6, expects "((hoge bar))" ==> ok
test response header, expects "jojo" ==> ok
test view, expects "jojo" ==> ok
test error handler, expects "500 Internal Server Error" ==> ok
test error handler, expects "999 Test error" ==> ok
test error-view, expects "ORA!" ==> ok
passed.
Testing mw.generator ==========================================================
testing bindings in #<module mw.generator> ... ok
<session 1>--------------------------------------------------------------------
Create  generator.tmp/hoge :mode 600
test make file exists?, expects #t ==> ok
test make file mode?, expects 384 ==> ok
test make file content?, expects "HOGE" ==> ok
Create! generator.tmp/hoge :mode 644
test override file!, expects "hoge" ==> ok
Create  generator.tmp/bar/ :mode 600
test make directory exists?, expects #t ==> ok
test make directory mode?, expects 384 ==> ok
<session 2>--------------------------------------------------------------------
Create  generator.tmp/bar/ :mode 755
Create  generator.tmp/bar/hoge :mode 644
Create  generator.tmp/bar/jojo :mode 644
test recursion directory, expects #t ==> ok
passed.
Testing mw.interp.json ========================================================
testing bindings in #<module mw.interp.json> ... ok
test sexp->json, expects "{\"bar\":8,\"hoge\":[\"a\",\"b\"]}" ==> ok
passed.
Testing mw.interp.sxml ========================================================
testing bindings in #<module mw.interp.sxml> ... ok
test sxml->xml, expects "<a hoge='bar -&gt;'>&lt;- abc</a>" ==> ok
test make-interp-sxml, expects (hoge "ab" (a (|@| (hoge "bar ->")) "abc ->")) ==> ok
test top-level attribute, expects (hoge (|@| (aaa "aaa"))) ==> ok
passed.
Testing mw.interp =============================================================
testing bindings in #<module mw.interp> ... ok
test interp-generic, expects (2 2 2) ==> ok
passed.
Testing mw.mime-type ==========================================================
testing bindings in #<module mw.mime-type> ... ok
test get-mime-type, expects ("text/html" "application/pdf") ==> ok
test file-mime-type, expects "application/rdf+xml" ==> ok
test add-mime-type!, expects ("application/hoge" "application/hoge") ==> ok
passed.
Testing mw.persistent =========================================================
testing bindings in #<module mw.persistent> ... ok
test creating database, expects #t ==> ok
test creating & persistent, expects "hoge" ==> ok
test change instance, expects 99 ==> ok
test serialize <persistent>, expects #t ==> ok
test serialize <hash-table>, expects #t ==> ok
test Collection, expects ("taro" "bar" "hoge") ==> ok
test Transaction 1, expects 99 ==> ok
test Transaction 2, expects #f ==> ok
test Delete, expects #f ==> ok
passed.
Testing mw.plugin =============================================================
testing bindings in #<module mw.plugin> ... ok
test initialize-plugins, expects (8) ==> ok
passed.
Testing mw.servelet.cgi =======================================================
testing bindings in #<module mw.servelet.cgi> ... ok
test run cgi-servelet, expects "HOGE" ==> ok
passed.
Testing mw.servelet.fs ========================================================
testing bindings in #<module mw.servelet.fs> ... ok
test GET /hoge.text, expects #t ==> ok
test GET /, expects #t ==> ok
test Not found, expects "404" ==> ok
test Forbidden, expects "403" ==> ok
passed.
Testing mw.httpd ==============================================================
testing bindings in #<module mw.server.httpd> ... ok
<parse-request-line>-----------------------------------------------------------
test parse-request-line, expects ("GET" "/hoge" "HTTP/1.0") ==> ok
test parse-request-line, expects ("GET" "/hoge" "HTTP/1.1") ==> ok
test parse-request-line error HTTP/1.2?, expects #t ==> ok
<parse-request-uri>------------------------------------------------------------
test parse-request-uri /bar/hoge?jojo, expects ("bar" "/hoge" "jojo") ==> ok
test parse-request-uri /bar, expects ("bar" #f #f) ==> ok
test parse-request-uri /bar?jojo, expects ("bar" #f "jojo") ==> ok
test parse-request-uri /, expects ("" #f #f) ==> ok
test parse-request-uri /?ABC, expects ("" #f "ABC") ==> ok
<http-metavariables>-----------------------------------------------------------
test http-metavariables, expects () ==> ok
test http-metavariable-set! & ref, expects "ORAORA!!!" ==> ok
test http-metavariable-ref, expects #f ==> ok
<httpd>------------------------------------------------------------------------
test default servelet, expects "hoge" ==> ok
test servelet jojo, expects "ORAORA!!!" ==> ok
passed.
Testing mw.server.repl ========================================================
testing bindings in #<module mw.server.repl> ... ok
test repl-eval, expects "((8 . 8) 20)" ==> ok
test repl-eval (error), expects "*** ERROR: 8" ==> ok
passed.
Testing mw.server =============================================================
testing bindings in #<module mw.server> ... ok
test run-server, expects "2x2" ==> ok
passed.
Testing mw.set ================================================================
testing bindings in #<module mw.set> ... ok
test , expects (6 "scheme" "lisp" "elisp" "haskell" "sml" "ocaml") ==> ok
test subseq*, expects ("lisp" "elisp") ==> ok
test <class/set/set>, expects (4 . #t) ==> ok
test set-intersection, expects ("ocaml") ==> ok
test map-set$, expects ("object" "hoge" "jojo") ==> ok
test <elt> <= <set-set>, expects (#f #f) ==> ok
test delete! <elt>, expects #f ==> ok
test delete! <set>, expects #f ==> ok
test (<A> <- (subseq* <A> (- (size-of <A>) 2))), expects #f ==> ok
passed.
Testing mw.test.cgi ===========================================================
testing bindings in #<module mw.test.cgi> ... ok
test define-cgi-script, expects #t ==> ok
test call-with-cgi-script 1, expects "JOJO" ==> ok
test call-with-cgi-script 2, expects "abc" ==> ok
passed.
Testing mw.textlight ==========================================================
testing bindings in #<module mw.textlight> ... ok
test read List, expects (ol (li "hoge") (li (ol (li "hoge") (li "jojo"))) (li "bar") (li (ul (li "bar") (li "jojo")))) ==> ok
test read Paragraph, expects (p "hoge" "hoge") ==> ok
test read Preformatted, expects (pre " hoge" "\n" " hoge") ==> ok
test read Macro [table], expects (table (caption "jojo") (tr (th "hoge") (th "bar")) (tr (td "bar") (td "hoge"))) ==> ok
test read Macro [dl], expects (dl (dt "hoge") (dd "bar") (dt "bar") (dd "hoge") (dt "huga") (dd "test jojo abc defg")) ==> ok
passed.
Testing mw.time.http ==========================================================
testing bindings in #<module mw.time.http> ... ok
test time->http-date, expects "Tue, 11 Oct 2005 09:52:12 GMT" ==> ok
passed.
Testing mw.time.w3cdtf ========================================================
testing bindings in #<module mw.time.w3cdtf> ... ok
test w3cdtf->time, expects #t ==> ok
test time->w3cdtf <> w3cdtf->time, expects "2005-08-21T17:38:30Z" ==> ok
test time->w3cdtf <local> w3cdtf->time, expects "2005-08-21T17:38:30+09:00" ==> ok
passed.
Testing mw.user ===============================================================
testing bindings in #<module mw.user> ... ok
test make-user, expects "hoge" ==> ok
test check-user?, expects #t ==> ok
test user-password-change, expects #t ==> ok
passed.
Testing mw.util ===============================================================
testing bindings in #<module mw.util> ... ok
test get-error-string, expects "hoge" ==> ok
test get-error-string long-message, expects "*** ERROR: hoge" ==> ok
test check=>, expects a ==> ok
test let$, expects (1 2 3) ==> (1 2 3)ok
test and*=>, expects #\a ==> ok
test and*=>, expects #f ==> ok
test and=> 1, expects 20 ==> ok
test and=> 2, expects #f ==> ok
test and=> 3, expects 3 ==> ok
test receive-alist 1, expects (20 . 50) ==> ok
test receive-alist 2, expects (20 50) ==> ok
test receive-slot 1, expects (20 30 40) ==> ok
test receive-slot 2, expects (20 40 . 30) ==> ok
test slot-update!, expects 88 ==> ok
test define-table (eq?), expects 8 ==> ok
test define-table (string=?), expects 8 ==> ok
test define-table (), expects b ==> ok
test define-table (get x . def), expects "hoge" ==> ok
test define-table (add delete!), expects (80 . #f) ==> ok
test case*, expects ok ==> ok
passed.
Testing mw.view ===============================================================
testing bindings in #<module mw.view> ... ok
test view 1, expects "hoge" ==> ok
test view 2, expects "hogehoge" ==> ok
passed.
Testing mw.config =============================================================
testing bindings in #<module mw.config> ... ok
test define-config 1, expects x ==> ok
test define-config 2, expects "abc" ==> ok
test define-config (validator), expects 888 ==> ok
test initialize-config! 1, expects #f ==> ok
test initialize-config! 2, expects 20 ==> ok
test initialize-config! 3, expects ("jojo" "hoge") ==> ok
test with-config, expects (8 "jojo") ==> ok
passed.
Testing mw.entry ==============================================================
testing bindings in #<module mw.entry> ... ok
<entry-main 1>-----------------------------------------------------------------
test dispatch entry 1, expects "world!" ==> ok
test dispatch entry 3, expects "ORAORA!" ==> ok
test dispatch entry 4, expects "Foo" ==> ok
test dispatch entry 5, expects "#f" ==> ok
test dispatch entry 6, expects "((hoge bar))" ==> ok
test response header, expects "jojo" ==> ok
test view, expects "jojo" ==> ok
test error handler, expects "500 Internal Server Error" ==> ok
test error handler, expects "999 Test error" ==> ok
test error-view, expects "ORA!" ==> ok
passed.
Testing mw.generator ==========================================================
testing bindings in #<module mw.generator> ... ok
<session 1>--------------------------------------------------------------------
Create  generator.tmp/hoge :mode 600
test make file exists?, expects #t ==> ok
test make file mode?, expects 384 ==> ok
test make file content?, expects "HOGE" ==> ok
Create! generator.tmp/hoge :mode 644
test override file!, expects "hoge" ==> ok
Create  generator.tmp/bar/ :mode 600
test make directory exists?, expects #t ==> ok
test make directory mode?, expects 384 ==> ok
<session 2>--------------------------------------------------------------------
Create  generator.tmp/bar/ :mode 755
Create  generator.tmp/bar/hoge :mode 644
Create  generator.tmp/bar/jojo :mode 644
test recursion directory, expects #t ==> ok
passed.
Testing mw.interp.json ========================================================
testing bindings in #<module mw.interp.json> ... ok
test sexp->json, expects "{\"bar\":8,\"hoge\":[\"a\",\"b\"]}" ==> ok
passed.
Testing mw.interp.sxml ========================================================
testing bindings in #<module mw.interp.sxml> ... ok
test sxml->xml, expects "<a hoge='bar -&gt;'>&lt;- abc</a>" ==> ok
test interp-sxml, expects (jojo (ORA "MUDAMUDAMUDA!")) ==> ok
test make-interp-sxml, expects (hoge "ab" (a (|@| (hoge "bar ->")) "abc ->")) ==> ok
test top-level attribute, expects (hoge (|@| (aaa "aaa"))) ==> ok
passed.
Testing mw.interp =============================================================
testing bindings in #<module mw.interp> ... ok
test interp-generic, expects (2 2 2) ==> ok
passed.
Testing mw.mime-type ==========================================================
testing bindings in #<module mw.mime-type> ... ok
test get-mime-type, expects ("text/html" "application/pdf") ==> ok
test file-mime-type, expects "application/rdf+xml" ==> ok
test add-mime-type!, expects ("application/hoge" "application/hoge") ==> ok
passed.
Testing mw.persistent =========================================================
testing bindings in #<module mw.persistent> ... ok
test creating database, expects #t ==> ok
test creating & persistent, expects "hoge" ==> ok
test change instance, expects 99 ==> ok
test serialize <persistent>, expects #t ==> ok
test serialize <hash-table>, expects #t ==> ok
test Collection, expects ("taro" "bar" "hoge") ==> ok
test Transaction 1, expects 99 ==> ok
test Transaction 2, expects #f ==> ok
test Delete, expects #f ==> ok
passed.
Testing mw.plugin =============================================================
testing bindings in #<module mw.plugin> ... ok
test initialize-plugins, expects (8) ==> ok
passed.
Testing mw.servelet.cgi =======================================================
testing bindings in #<module mw.servelet.cgi> ... ok
test run cgi-servelet, expects "HOGE" ==> ok
passed.
Testing mw.servelet.fs ========================================================
testing bindings in #<module mw.servelet.fs> ... ok
test GET /hoge.text, expects #t ==> ok
test GET /, expects #t ==> ok
test Not found, expects "404" ==> ok
test Forbidden, expects "403" ==> ok
passed.
Testing mw.httpd ==============================================================
testing bindings in #<module mw.server.httpd> ... ok
<parse-request-line>-----------------------------------------------------------
test parse-request-line, expects ("GET" "/hoge" "HTTP/1.0") ==> ok
test parse-request-line, expects ("GET" "/hoge" "HTTP/1.1") ==> ok
test parse-request-line error HTTP/1.2?, expects #t ==> ok
<parse-request-uri>------------------------------------------------------------
test parse-request-uri /bar/hoge?jojo, expects ("bar" "/hoge" "jojo") ==> ok
test parse-request-uri /bar, expects ("bar" #f #f) ==> ok
test parse-request-uri /bar?jojo, expects ("bar" #f "jojo") ==> ok
test parse-request-uri /, expects ("" #f #f) ==> ok
test parse-request-uri /?ABC, expects ("" #f "ABC") ==> ok
<http-metavariables>-----------------------------------------------------------
test http-metavariables, expects () ==> ok
test http-metavariable-set! & ref, expects "ORAORA!!!" ==> ok
test http-metavariable-ref, expects #f ==> ok
<httpd>------------------------------------------------------------------------
test default servelet, expects "hoge" ==> ok
test servelet jojo, expects "ORAORA!!!" ==> ok
passed.
Testing mw.server.repl ========================================================
testing bindings in #<module mw.server.repl> ... ok
test repl-eval, expects "((8 . 8) 20)" ==> ok
test repl-eval (error), expects "*** ERROR: 8" ==> ok
passed.
Testing mw.server =============================================================
testing bindings in #<module mw.server> ... ok
test run-server, expects "2x2" ==> ok
passed.
Testing mw.set ================================================================
testing bindings in #<module mw.set> ... ok
test , expects (6 "scheme" "lisp" "elisp" "haskell" "sml" "ocaml") ==> ok
test subseq*, expects ("lisp" "elisp") ==> ok
test <class/set/set>, expects (4 . #t) ==> ok
test set-intersection, expects ("ocaml") ==> ok
test map-set$, expects ("object" "hoge" "jojo") ==> ok
test <elt> <= <set-set>, expects (#f #f) ==> ok
test delete! <elt>, expects #f ==> ok
test delete! <set>, expects #f ==> ok
test (<A> <- (subseq* <A> (- (size-of <A>) 2))), expects #f ==> ok
passed.
Testing mw.test.cgi ===========================================================
testing bindings in #<module mw.test.cgi> ... ok
test define-cgi-script, expects #t ==> ok
test call-with-cgi-script 1, expects "JOJO" ==> ok
test call-with-cgi-script 2, expects "abc" ==> ok
passed.
Testing mw.textlight ==========================================================
testing bindings in #<module mw.textlight> ... ok
test read List, expects (ol (li "hoge") (li (ol (li "hoge") (li "jojo"))) (li "bar") (li (ul (li "bar") (li "jojo")))) ==> ok
test read Paragraph, expects (p "hoge" "hoge") ==> ok
test read Preformatted, expects (pre " hoge" "\n" " hoge") ==> ok
test read Macro [table], expects (table (caption "jojo") (tr (th "hoge") (th "bar")) (tr (td "bar") (td "hoge"))) ==> ok
test read Macro [dl], expects (dl (dt "hoge") (dd "bar") (dt "bar") (dd "hoge") (dt "huga") (dd "test jojo abc defg")) ==> ok
passed.
Testing mw.time.http ==========================================================
testing bindings in #<module mw.time.http> ... ok
test time->http-date, expects "Tue, 11 Oct 2005 09:52:12 GMT" ==> ok
passed.
Testing mw.time.w3cdtf ========================================================
testing bindings in #<module mw.time.w3cdtf> ... ok
test w3cdtf->time, expects #t ==> ok
test time->w3cdtf <> w3cdtf->time, expects "2005-08-21T17:38:30Z" ==> ok
test time->w3cdtf <local> w3cdtf->time, expects "2005-08-21T17:38:30+09:00" ==> ok
passed.
Testing mw.user ===============================================================
testing bindings in #<module mw.user> ... ok
test make-user, expects "hoge" ==> ok
test check-user?, expects #t ==> ok
test user-password-change, expects #t ==> ok
passed.
Testing mw.util ===============================================================
testing bindings in #<module mw.util> ... ok
test get-error-string, expects "hoge" ==> ok
test get-error-string long-message, expects "*** ERROR: hoge" ==> ok
test check=>, expects a ==> ok
test let$, expects (1 2 3) ==> (1 2 3)ok
test and*=>, expects #\a ==> ok
test and*=>, expects #f ==> ok
test and=> 1, expects 20 ==> ok
test and=> 2, expects #f ==> ok
test and=> 3, expects 3 ==> ok
test receive-alist 1, expects (20 . 50) ==> ok
test receive-alist 2, expects (20 50) ==> ok
test receive-slot 1, expects (20 30 40) ==> ok
test receive-slot 2, expects (20 40 . 30) ==> ok
test slot-update!, expects 88 ==> ok
test define-table (eq?), expects 8 ==> ok
test define-table (string=?), expects 8 ==> ok
test define-table (), expects b ==> ok
test define-table (get x . def), expects "hoge" ==> ok
test define-table (add delete!), expects (80 . #f) ==> ok
test case*, expects ok ==> ok
passed.
Testing mw.view ===============================================================
testing bindings in #<module mw.view> ... ok
test view 1, expects "hoge" ==> ok
test view 2, expects "hogehoge" ==> ok
passed.
Testing mw.config =============================================================
testing bindings in #<module mw.config> ... ok
test define-config 1, expects x ==> ok
test define-config 2, expects "abc" ==> ok
test define-config (validator), expects 888 ==> ok
test initialize-config! 1, expects #f ==> ok
test initialize-config! 2, expects 20 ==> ok
test initialize-config! 3, expects ("jojo" "hoge") ==> ok
test with-config, expects (8 "jojo") ==> ok
passed.
Testing mw.entry ==============================================================
testing bindings in #<module mw.entry> ... ok
<entry-main 1>-----------------------------------------------------------------
test dispatch entry 1, expects "world!" ==> ok
test dispatch entry 3, expects "ORAORA!" ==> ok
test dispatch entry 4, expects "Foo" ==> ok
test dispatch entry 5, expects "#f" ==> ok
test dispatch entry 6, expects "((hoge bar))" ==> ok
test dispatch entry 7, expects "hoge" ==> ok
test dispatch entry 8, expects "bar" ==> ok
test response header, expects "jojo" ==> ok
test view, expects "jojo" ==> ok
test error handler, expects "500 Internal Server Error" ==> ok
test error handler, expects "999 Test error" ==> ok
test error-view, expects "ORA!" ==> ok
passed.
Testing mw.generator ==========================================================
testing bindings in #<module mw.generator> ... ok
<session 1>--------------------------------------------------------------------
Create  generator.tmp/hoge :mode 600
test make file exists?, expects #t ==> ok
test make file mode?, expects 384 ==> ok
test make file content?, expects "HOGE" ==> ok
Create! generator.tmp/hoge :mode 644
test override file!, expects "hoge" ==> ok
Create  generator.tmp/bar/ :mode 600
test make directory exists?, expects #t ==> ok
test make directory mode?, expects 384 ==> ok
<session 2>--------------------------------------------------------------------
Create  generator.tmp/bar/ :mode 755
Create  generator.tmp/bar/hoge :mode 644
Create  generator.tmp/bar/jojo :mode 644
test recursion directory, expects #t ==> ok
passed.
Testing mw.interp.json ========================================================
testing bindings in #<module mw.interp.json> ... ok
test sexp->json, expects "{\"bar\":8,\"hoge\":[\"a\",\"b\"]}" ==> ok
passed.
Testing mw.interp.sxml ========================================================
testing bindings in #<module mw.interp.sxml> ... ok
test sxml->xml, expects "<a hoge='bar -&gt;'>&lt;- abc</a>" ==> ok
test interp-sxml, expects (jojo (ORA "MUDAMUDAMUDA!")) ==> ok
test make-interp-sxml, expects (hoge "ab" (a (|@| (hoge "bar ->")) "abc ->")) ==> ok
test top-level attribute, expects (hoge (|@| (aaa "aaa"))) ==> ok
passed.
Testing mw.interp =============================================================
testing bindings in #<module mw.interp> ... ok
test interp-generic, expects (2 2 2) ==> ok
passed.
Testing mw.mime-type ==========================================================
testing bindings in #<module mw.mime-type> ... ok
test get-mime-type, expects ("text/html" "application/pdf") ==> ok
test file-mime-type, expects "application/rdf+xml" ==> ok
test add-mime-type!, expects ("application/hoge" "application/hoge") ==> ok
passed.
Testing mw.persistent =========================================================
testing bindings in #<module mw.persistent> ... ok
test creating database, expects #t ==> ok
test creating & persistent, expects "hoge" ==> ok
test change instance, expects 99 ==> ok
test serialize <persistent>, expects #t ==> ok
test serialize <hash-table>, expects #t ==> ok
test Collection, expects ("taro" "bar" "hoge") ==> ok
test Transaction 1, expects 99 ==> ok
test Transaction 2, expects #f ==> ok
test Delete, expects #f ==> ok
passed.
Testing mw.plugin =============================================================
testing bindings in #<module mw.plugin> ... ok
test initialize-plugins, expects (8) ==> ok
passed.
Testing mw.servelet.cgi =======================================================
testing bindings in #<module mw.servelet.cgi> ... ok
test run cgi-servelet, expects "HOGE" ==> ok
passed.
Testing mw.servelet.fs ========================================================
testing bindings in #<module mw.servelet.fs> ... ok
test GET /hoge.text, expects #t ==> ok
test GET /, expects #t ==> ok
test Not found, expects "404" ==> ok
test Forbidden, expects "403" ==> ok
passed.
Testing mw.httpd ==============================================================
testing bindings in #<module mw.server.httpd> ... ok
<parse-request-line>-----------------------------------------------------------
test parse-request-line, expects ("GET" "/hoge" "HTTP/1.0") ==> ok
test parse-request-line, expects ("GET" "/hoge" "HTTP/1.1") ==> ok
test parse-request-line error HTTP/1.2?, expects #t ==> ok
<parse-request-uri>------------------------------------------------------------
test parse-request-uri /bar/hoge?jojo, expects ("bar" "/hoge" "jojo") ==> ok
test parse-request-uri /bar, expects ("bar" #f #f) ==> ok
test parse-request-uri /bar?jojo, expects ("bar" #f "jojo") ==> ok
test parse-request-uri /, expects ("" #f #f) ==> ok
test parse-request-uri /?ABC, expects ("" #f "ABC") ==> ok
<http-metavariables>-----------------------------------------------------------
test http-metavariables, expects () ==> ok
test http-metavariable-set! & ref, expects "ORAORA!!!" ==> ok
test http-metavariable-ref, expects #f ==> ok
<httpd>------------------------------------------------------------------------
test default servelet, expects "hoge" ==> ok
test servelet jojo, expects "ORAORA!!!" ==> ok
passed.
Testing mw.server.repl ========================================================
testing bindings in #<module mw.server.repl> ... ok
test repl-eval, expects "((8 . 8) 20)" ==> ok
test repl-eval (error), expects "*** ERROR: 8" ==> ok
passed.
Testing mw.server =============================================================
testing bindings in #<module mw.server> ... ok
test run-server, expects "2x2" ==> ok
passed.
Testing mw.set ================================================================
testing bindings in #<module mw.set> ... ok
test , expects (6 "scheme" "lisp" "elisp" "haskell" "sml" "ocaml") ==> ok
test subseq*, expects ("lisp" "elisp") ==> ok
test <class/set/set>, expects (4 . #t) ==> ok
test set-intersection, expects ("ocaml") ==> ok
test map-set$, expects ("object" "hoge" "jojo") ==> ok
test <elt> <= <set-set>, expects (#f #f) ==> ok
test delete! <elt>, expects #f ==> ok
test delete! <set>, expects #f ==> ok
test (<A> <- (subseq* <A> (- (size-of <A>) 2))), expects #f ==> ok
passed.
Testing mw.test.cgi ===========================================================
testing bindings in #<module mw.test.cgi> ... ok
test define-cgi-script, expects #t ==> ok
test call-with-cgi-script 1, expects "JOJO" ==> ok
test call-with-cgi-script 2, expects "abc" ==> ok
passed.
Testing mw.textlight ==========================================================
testing bindings in #<module mw.textlight> ... ok
test read h2, expects (h2 "Headline") ==> ok
test read h3, expects (h3 "Headline") ==> ok
test read h6, expects (h6 "Headline") ==> ok
test read List, expects (ol (li "hoge") (li (ol (li "hoge") (li "jojo"))) (li "bar") (li (ul (li "bar") (li "jojo")))) ==> ok
test read Paragraph, expects (p "hoge" "hoge") ==> ok
test read Preformatted, expects (pre " hoge" "\n" " hoge") ==> ok
test read Macro [table], expects (table (tr (td "hoge") (td "bar")) (tr (td "bar") (td "hoge"))) ==> ok
test read Macro [table] th, expects (table (tr (th "hoge") (th "bar")) (tr (td "bar") (td "hoge"))) ==> ok
test read Macro [table caption], expects (table (caption "jojo") (tr (td "hoge") (td "bar")) (tr (td "bar") (td "hoge"))) ==> ok
test read Macro [dl], expects (dl (dt "hoge") (dd "bar") (dt "bar") (dd "hoge") (dt "huga") (dd "test jojo abc defg")) ==> ok
passed.
Testing mw.time.http ==========================================================
testing bindings in #<module mw.time.http> ... ok
test time->http-date, expects "Tue, 11 Oct 2005 09:52:12 GMT" ==> ok
passed.
Testing mw.time.w3cdtf ========================================================
testing bindings in #<module mw.time.w3cdtf> ... ok
test w3cdtf->time, expects #t ==> ok
test time->w3cdtf <> w3cdtf->time, expects "2005-08-21T17:38:30Z" ==> ok
test time->w3cdtf <local> w3cdtf->time, expects "2005-08-21T17:38:30+09:00" ==> ok
passed.
Testing mw.user ===============================================================
testing bindings in #<module mw.user> ... ok
test make-user, expects "hoge" ==> ok
test check-user?, expects #t ==> ok
test user-password-change, expects #t ==> ok
passed.
Testing mw.util ===============================================================
testing bindings in #<module mw.util> ... ok
test get-error-string, expects "hoge" ==> ok
test get-error-string long-message, expects "*** ERROR: hoge" ==> ok
test check=>, expects a ==> ok
test let$, expects (1 2 3) ==> (1 2 3)ok
test and*=>, expects #\a ==> ok
test and*=>, expects #f ==> ok
test and=> 1, expects 20 ==> ok
test and=> 2, expects #f ==> ok
test and=> 3, expects 3 ==> ok
test receive-alist 1, expects (20 . 50) ==> ok
test receive-alist 2, expects (20 50) ==> ok
test receive-slot 1, expects (20 30 40) ==> ok
test receive-slot 2, expects (20 40 . 30) ==> ok
test slot-update!, expects 88 ==> ok
test define-table (eq?), expects 8 ==> ok
test define-table (string=?), expects 8 ==> ok
test define-table (), expects b ==> ok
test define-table (get x . def), expects "hoge" ==> ok
test define-table (add delete!), expects (80 . #f) ==> ok
test case*, expects ok ==> ok
passed.
Testing mw.view ===============================================================
testing bindings in #<module mw.view> ... ok
test view 1, expects "hoge" ==> ok
test view 2, expects "hogehoge" ==> ok
passed.
Testing mw.config =============================================================
testing bindings in #<module mw.config> ... ok
test define-config 1, expects x ==> ok
test define-config 2, expects "abc" ==> ok
test define-config (validator), expects 888 ==> ok
test initialize-config! 1, expects #f ==> ok
test initialize-config! 2, expects 20 ==> ok
test initialize-config! 3, expects ("jojo" "hoge") ==> ok
test with-config, expects (8 "jojo") ==> ok
passed.
Testing mw.entry ==============================================================
testing bindings in #<module mw.entry> ... ok
<entry-main 1>-----------------------------------------------------------------
test dispatch entry 1, expects "world!" ==> ok
test dispatch entry 3, expects "ORAORA!" ==> ok
test dispatch entry 4, expects "Foo" ==> ok
test dispatch entry 5, expects "#f" ==> ok
test dispatch entry 6, expects "((hoge bar))" ==> ok
test dispatch entry 7, expects "hoge" ==> ok
test dispatch entry 8, expects "bar" ==> ok
test response header, expects "jojo" ==> ok
test view, expects "jojo" ==> ok
test error handler, expects "500 Internal Server Error" ==> ok
test error handler, expects "999 Test error" ==> ok
test error-view, expects "ORA!" ==> ok
passed.
Testing mw.generator ==========================================================
testing bindings in #<module mw.generator> ... ok
<session 1>--------------------------------------------------------------------
Create  generator.tmp/hoge :mode 600
test make file exists?, expects #t ==> ok
test make file mode?, expects 384 ==> ok
test make file content?, expects "HOGE" ==> ok
Create! generator.tmp/hoge :mode 644
test override file!, expects "hoge" ==> ok
Create  generator.tmp/bar/ :mode 600
test make directory exists?, expects #t ==> ok
test make directory mode?, expects 384 ==> ok
<session 2>--------------------------------------------------------------------
Create  generator.tmp/bar/ :mode 755
Create  generator.tmp/bar/hoge :mode 644
Create  generator.tmp/bar/jojo :mode 644
test recursion directory, expects #t ==> ok
passed.
Testing mw.interp.json ========================================================
testing bindings in #<module mw.interp.json> ... ok
test sexp->json, expects "{\"bar\":8,\"hoge\":[\"a\",\"b\"]}" ==> ok
passed.
Testing mw.interp.sxml ========================================================
testing bindings in #<module mw.interp.sxml> ... ok
test sxml->xml, expects "<a hoge='bar -&gt;'>&lt;- abc</a>" ==> ok
test interp-sxml, expects (jojo (ORA "MUDAMUDAMUDA!")) ==> ok
test make-interp-sxml, expects (hoge "ab" (a (|@| (hoge "bar ->")) "abc ->")) ==> ok
test top-level attribute, expects (hoge (|@| (aaa "aaa"))) ==> ok
passed.
Testing mw.interp =============================================================
testing bindings in #<module mw.interp> ... ok
test interp-generic, expects (2 2 2) ==> ok
passed.
Testing mw.mime-type ==========================================================
testing bindings in #<module mw.mime-type> ... ok
test get-mime-type, expects ("text/html" "application/pdf") ==> ok
test file-mime-type, expects "application/rdf+xml" ==> ok
test add-mime-type!, expects ("application/hoge" "application/hoge") ==> ok
passed.
Testing mw.persistent =========================================================
testing bindings in #<module mw.persistent> ... ok
test creating database, expects #t ==> ok
test creating & persistent, expects "hoge" ==> ok
test change instance, expects 99 ==> ok
test serialize <persistent>, expects #t ==> ok
test serialize <hash-table>, expects #t ==> ok
test Collection, expects ("taro" "bar" "hoge") ==> ok
test Transaction 1, expects 99 ==> ok
test Transaction 2, expects #f ==> ok
test Delete, expects #f ==> ok
passed.
Testing mw.plugin =============================================================
testing bindings in #<module mw.plugin> ... ok
test initialize-plugins, expects (8) ==> ok
passed.
Testing mw.servelet.cgi =======================================================
testing bindings in #<module mw.servelet.cgi> ... ok
test run cgi-servelet, expects "HOGE" ==> ok
passed.
Testing mw.servelet.fs ========================================================
testing bindings in #<module mw.servelet.fs> ... ok
test GET /hoge.text, expects #t ==> ok
test GET /, expects #t ==> ok
test Not found, expects "404" ==> ok
test Forbidden, expects "403" ==> ok
passed.
Testing mw.httpd ==============================================================
testing bindings in #<module mw.server.httpd> ... ok
<parse-request-line>-----------------------------------------------------------
test parse-request-line, expects ("GET" "/hoge" "HTTP/1.0") ==> ok
test parse-request-line, expects ("GET" "/hoge" "HTTP/1.1") ==> ok
test parse-request-line error HTTP/1.2?, expects #t ==> ok
<parse-request-uri>------------------------------------------------------------
test parse-request-uri /bar/hoge?jojo, expects ("bar" "/hoge" "jojo") ==> ok
test parse-request-uri /bar, expects ("bar" #f #f) ==> ok
test parse-request-uri /bar?jojo, expects ("bar" #f "jojo") ==> ok
test parse-request-uri /, expects ("" #f #f) ==> ok
test parse-request-uri /?ABC, expects ("" #f "ABC") ==> ok
<http-metavariables>-----------------------------------------------------------
test http-metavariables, expects () ==> ok
test http-metavariable-set! & ref, expects "ORAORA!!!" ==> ok
test http-metavariable-ref, expects #f ==> ok
<httpd>------------------------------------------------------------------------
test default servelet, expects "hoge" ==> ok
test servelet jojo, expects "ORAORA!!!" ==> ok
passed.
Testing mw.server.repl ========================================================
testing bindings in #<module mw.server.repl> ... ok
test repl-eval, expects "((8 . 8) 20)" ==> ok
test repl-eval (error), expects "*** ERROR: 8" ==> ok
passed.
Testing mw.server =============================================================
testing bindings in #<module mw.server> ... ok
test run-server, expects "2x2" ==> ok
passed.
Testing mw.set ================================================================
testing bindings in #<module mw.set> ... ok
test , expects (6 "scheme" "lisp" "elisp" "haskell" "sml" "ocaml") ==> ok
test subseq*, expects ("lisp" "elisp") ==> ok
test <class/set/set>, expects (4 . #t) ==> ok
test set-intersection, expects ("ocaml") ==> ok
test map-set$, expects ("object" "hoge" "jojo") ==> ok
test <elt> <= <set-set>, expects (#f #f) ==> ok
test delete! <elt>, expects #f ==> ok
test delete! <set>, expects #f ==> ok
test (<A> <- (subseq* <A> (- (size-of <A>) 2))), expects #f ==> ok
passed.
Testing mw.test.cgi ===========================================================
testing bindings in #<module mw.test.cgi> ... ok
test define-cgi-script, expects #t ==> ok
test call-with-cgi-script 1, expects "JOJO" ==> ok
test call-with-cgi-script 2, expects "abc" ==> ok
passed.
Testing mw.textlight ==========================================================
testing bindings in #<module mw.textlight> ... ok
test read h2, expects (h2 "Headline") ==> ok
test read h3, expects (h3 "Headline") ==> ok
test read h6, expects (h6 "Headline") ==> ok
test read List, expects (ol (li "hoge") (li (ol (li "hoge") (li "jojo"))) (li "bar") (li (ul (li "bar") (li "jojo")))) ==> ok
test read Paragraph, expects (p "hoge" "hoge") ==> ok
test read Preformatted, expects (pre " hoge" "\n" " hoge") ==> ok
test skip comment line, expects (p "hoge" "hoge") ==> ok
test read Macro [table], expects (table (tr (td "hoge") (td "bar")) (tr (td "bar") (td "hoge"))) ==> ok
test read Macro [table] th, expects (table (tr (th "hoge") (th "bar")) (tr (td "bar") (td "hoge"))) ==> ok
test read Macro [table caption], expects (table (caption "jojo") (tr (td "hoge") (td "bar")) (tr (td "bar") (td "hoge"))) ==> ok
test read Macro [dl], expects (dl (dt "hoge") (dd "bar") (dt "bar") (dd "hoge") (dt "huga") (dd "test jojo abc defg")) ==> ok
passed.
Testing mw.time.http ==========================================================
testing bindings in #<module mw.time.http> ... ok
test time->http-date, expects "Tue, 11 Oct 2005 09:52:12 GMT" ==> ok
passed.
Testing mw.time.w3cdtf ========================================================
testing bindings in #<module mw.time.w3cdtf> ... ok
test w3cdtf->time, expects #t ==> ok
test time->w3cdtf <> w3cdtf->time, expects "2005-08-21T17:38:30Z" ==> ok
test time->w3cdtf <local> w3cdtf->time, expects "2005-08-21T17:38:30+09:00" ==> ok
passed.
Testing mw.user ===============================================================
testing bindings in #<module mw.user> ... ok
test make-user, expects "hoge" ==> ok
test check-user?, expects #t ==> ok
test user-password-change, expects #t ==> ok
passed.
Testing mw.util ===============================================================
testing bindings in #<module mw.util> ... ok
test get-error-string, expects "hoge" ==> ok
test get-error-string long-message, expects "*** ERROR: hoge" ==> ok
test check=>, expects a ==> ok
test let$, expects (1 2 3) ==> (1 2 3)ok
test and*=>, expects #\a ==> ok
test and*=>, expects #f ==> ok
test and=> 1, expects 20 ==> ok
test and=> 2, expects #f ==> ok
test and=> 3, expects 3 ==> ok
test receive-alist 1, expects (20 . 50) ==> ok
test receive-alist 2, expects (20 50) ==> ok
test receive-slot 1, expects (20 30 40) ==> ok
test receive-slot 2, expects (20 40 . 30) ==> ok
test slot-update!, expects 88 ==> ok
test define-table (eq?), expects 8 ==> ok
test define-table (string=?), expects 8 ==> ok
test define-table (), expects b ==> ok
test define-table (get x . def), expects "hoge" ==> ok
test define-table (add delete!), expects (80 . #f) ==> ok
test case*, expects ok ==> ok
passed.
Testing mw.view ===============================================================
testing bindings in #<module mw.view> ... ok
test view 1, expects "hoge" ==> ok
test view 2, expects "hogehoge" ==> ok
passed.
Testing mw.config =============================================================
testing bindings in #<module mw.config> ... ok
test define-config 1, expects x ==> ok
test define-config 2, expects "abc" ==> ok
test define-config (validator), expects 888 ==> ok
test initialize-config! 1, expects #f ==> ok
test initialize-config! 2, expects 20 ==> ok
test initialize-config! 3, expects ("jojo" "hoge") ==> ok
test with-config, expects (8 "jojo") ==> ok
passed.
Testing mw.entry ==============================================================
testing bindings in #<module mw.entry> ... ok
<entry-main 1>-----------------------------------------------------------------
test dispatch entry 1, expects "world!" ==> ok
test dispatch entry 3, expects "ORAORA!" ==> ok
test dispatch entry 4, expects "Foo" ==> ok
test dispatch entry 5, expects "#f" ==> ok
test dispatch entry 6, expects "((hoge bar))" ==> ok
test dispatch entry 7, expects "hoge" ==> ok
test dispatch entry 8, expects "bar" ==> ok
test response header, expects "jojo" ==> ok
test view, expects "jojo" ==> ok
test error handler, expects "500 Internal Server Error" ==> ok
test error handler, expects "999 Test error" ==> ok
test error-view, expects "ORA!" ==> ok
passed.
Testing mw.generator ==========================================================
testing bindings in #<module mw.generator> ... ok
<session 1>--------------------------------------------------------------------
Create  generator.tmp/hoge :mode 600
test make file exists?, expects #t ==> ok
test make file mode?, expects 384 ==> ok
test make file content?, expects "HOGE" ==> ok
Create! generator.tmp/hoge :mode 644
test override file!, expects "hoge" ==> ok
Create  generator.tmp/bar/ :mode 600
test make directory exists?, expects #t ==> ok
test make directory mode?, expects 384 ==> ok
<session 2>--------------------------------------------------------------------
Create  generator.tmp/bar/ :mode 755
Create  generator.tmp/bar/hoge :mode 644
Create  generator.tmp/bar/jojo :mode 644
test recursion directory, expects #t ==> ok
passed.
Testing mw.interp.json ========================================================
testing bindings in #<module mw.interp.json> ... ok
test sexp->json, expects "{\"bar\":8,\"hoge\":[\"a\",\"b\"]}" ==> ok
passed.
Testing mw.interp.sxml ========================================================
testing bindings in #<module mw.interp.sxml> ... ok
test sxml->xml, expects "<a hoge='bar -&gt;'>&lt;- abc</a>" ==> ok
test interp-sxml, expects (jojo (ORA "MUDAMUDAMUDA!")) ==> ok
test make-interp-sxml, expects (hoge "ab" (a (|@| (hoge "bar ->")) "abc ->")) ==> ok
test top-level attribute, expects (hoge (|@| (aaa "aaa"))) ==> ok
passed.
Testing mw.interp =============================================================
testing bindings in #<module mw.interp> ... ok
test interp-generic, expects (2 2 2) ==> ok
passed.
Testing mw.mime-type ==========================================================
testing bindings in #<module mw.mime-type> ... ok
test get-mime-type, expects ("text/html" "application/pdf") ==> ok
test file-mime-type, expects "application/rdf+xml" ==> ok
test add-mime-type!, expects ("application/hoge" "application/hoge") ==> ok
passed.
Testing mw.persistent =========================================================
testing bindings in #<module mw.persistent> ... ok
test creating database, expects #t ==> ok
test creating & persistent, expects "hoge" ==> ok
test change instance, expects 99 ==> ok
test serialize <persistent>, expects #t ==> ok
test serialize <hash-table>, expects #t ==> ok
test Collection, expects ("taro" "bar" "hoge") ==> ok
test Transaction 1, expects 99 ==> ok
test Transaction 2, expects #f ==> ok
test Delete, expects #f ==> ok
passed.
Testing mw.plugin =============================================================
testing bindings in #<module mw.plugin> ... ok
test initialize-plugins, expects (8) ==> ok
passed.
Testing mw.servelet.cgi =======================================================
testing bindings in #<module mw.servelet.cgi> ... ok
test run cgi-servelet, expects "HOGE" ==> ok
passed.
Testing mw.servelet.fs ========================================================
testing bindings in #<module mw.servelet.fs> ... ok
test GET /hoge.text, expects #t ==> ok
test GET /, expects #t ==> ok
test Not found, expects "404" ==> ok
test Forbidden, expects "403" ==> ok
passed.
Testing mw.httpd ==============================================================
testing bindings in #<module mw.server.httpd> ... ok
<parse-request-line>-----------------------------------------------------------
test parse-request-line, expects ("GET" "/hoge" "HTTP/1.0") ==> ok
test parse-request-line, expects ("GET" "/hoge" "HTTP/1.1") ==> ok
test parse-request-line error HTTP/1.2?, expects #t ==> ok
<parse-request-uri>------------------------------------------------------------
test parse-request-uri /bar/hoge?jojo, expects ("bar" "/hoge" "jojo") ==> ok
test parse-request-uri /bar, expects ("bar" #f #f) ==> ok
test parse-request-uri /bar?jojo, expects ("bar" #f "jojo") ==> ok
test parse-request-uri /, expects ("" #f #f) ==> ok
test parse-request-uri /?ABC, expects ("" #f "ABC") ==> ok
<http-metavariables>-----------------------------------------------------------
test http-metavariables, expects () ==> ok
test http-metavariable-set! & ref, expects "ORAORA!!!" ==> ok
test http-metavariable-ref, expects #f ==> ok
<httpd>------------------------------------------------------------------------
test default servelet, expects "hoge" ==> ok
test servelet jojo, expects "ORAORA!!!" ==> ok
passed.
Testing mw.server.repl ========================================================
testing bindings in #<module mw.server.repl> ... ok
test repl-eval, expects "((8 . 8) 20)" ==> ok
test repl-eval (error), expects "*** ERROR: 8" ==> ok
passed.
Testing mw.server =============================================================
testing bindings in #<module mw.server> ... ok
test run-server, expects "2x2" ==> ok
passed.
Testing mw.set ================================================================
testing bindings in #<module mw.set> ... ok
test , expects (6 "scheme" "lisp" "elisp" "haskell" "sml" "ocaml") ==> ok
test subseq*, expects ("lisp" "elisp") ==> ok
test <class/set/set>, expects (4 . #t) ==> ok
test set-intersection, expects ("ocaml") ==> ok
test map-set$, expects ("object" "hoge" "jojo") ==> ok
test <elt> <= <set-set>, expects (#f #f) ==> ok
test delete! <elt>, expects #f ==> ok
test delete! <set>, expects #f ==> ok
test (<A> <- (subseq* <A> (- (size-of <A>) 2))), expects #f ==> ok
passed.
Testing mw.test.cgi ===========================================================
testing bindings in #<module mw.test.cgi> ... ok
test define-cgi-script, expects #t ==> ok
test call-with-cgi-script 1, expects "JOJO" ==> ok
test call-with-cgi-script 2, expects "abc" ==> ok
passed.
Testing mw.textlight ==========================================================
testing bindings in #<module mw.textlight> ... ok
test read h2, expects (h2 "Headline") ==> ok
test read h3, expects (h3 "Headline") ==> ok
test read h6, expects (h6 "Headline") ==> ok
test read List, expects (ol (li "hoge") (li (ol (li "hoge") (li "jojo"))) (li "bar") (li (ul (li "bar") (li "jojo")))) ==> ok
test read Paragraph, expects (p "hoge" "hoge") ==> ok
test read Preformatted, expects (pre " hoge" "\n" " hoge") ==> ok
test skip comment line, expects (p "hoge" "hoge") ==> ok
test read Macro [table], expects (table (tr (td "hoge") (td "bar")) (tr (td "bar") (td "hoge"))) ==> ok
test read Macro [table] th, expects (table (tr (th "hoge") (th "bar")) (tr (td "bar") (td "hoge"))) ==> ok
test read Macro [table caption], expects (table (caption "jojo") (tr (td "hoge") (td "bar")) (tr (td "bar") (td "hoge"))) ==> ok
test read Macro [dl], expects (dl (dt "hoge") (dd "bar") (dt "bar") (dd "hoge") (dt "huga") (dd "test jojo abc defg")) ==> ok
passed.
Testing mw.time.http ==========================================================
testing bindings in #<module mw.time.http> ... ok
test time->http-date, expects "Tue, 11 Oct 2005 09:52:12 GMT" ==> ok
passed.
Testing mw.time.w3cdtf ========================================================
testing bindings in #<module mw.time.w3cdtf> ... ok
test w3cdtf->time, expects #t ==> ok
test time->w3cdtf <> w3cdtf->time, expects "2005-08-21T17:38:30Z" ==> ok
test time->w3cdtf <local> w3cdtf->time, expects "2005-08-21T17:38:30+09:00" ==> ok
passed.
Testing mw.user ===============================================================
testing bindings in #<module mw.user> ... ok
test make-user, expects "hoge" ==> ok
test check-user?, expects #t ==> ok
test match-user 1, expects "hoge" ==> ok
test match-user 2, expects #f ==> ok
test match-user 3, expects "hoge" ==> ok
test user-password-change, expects #t ==> ok
passed.
Testing mw.util ===============================================================
testing bindings in #<module mw.util> ... ok
test get-error-string, expects "hoge" ==> ok
test get-error-string long-message, expects "*** ERROR: hoge" ==> ok
test check=>, expects a ==> ok
test let$, expects (1 2 3) ==> (1 2 3)ok
test and*=>, expects #\a ==> ok
test and*=>, expects #f ==> ok
test and=> 1, expects 20 ==> ok
test and=> 2, expects #f ==> ok
test and=> 3, expects 3 ==> ok
test receive-alist 1, expects (20 . 50) ==> ok
test receive-alist 2, expects (20 50) ==> ok
test receive-slot 1, expects (20 30 40) ==> ok
test receive-slot 2, expects (20 40 . 30) ==> ok
test slot-update!, expects 88 ==> ok
test define-table (eq?), expects 8 ==> ok
test define-table (string=?), expects 8 ==> ok
test define-table (), expects b ==> ok
test define-table (get x . def), expects "hoge" ==> ok
test define-table (add delete!), expects (80 . #f) ==> ok
test case*, expects ok ==> ok
passed.
Testing mw.view ===============================================================
testing bindings in #<module mw.view> ... ok
test view 1, expects "hoge" ==> ok
test view 2, expects "hogehoge" ==> ok
passed.
Testing mw.config =============================================================
testing bindings in #<module mw.config> ... ok
test define-config 1, expects x ==> ok
test define-config 2, expects "abc" ==> ok
test define-config (validator), expects 888 ==> ok
test initialize-config! 1, expects #f ==> ok
test initialize-config! 2, expects 20 ==> ok
test initialize-config! 3, expects ("jojo" "hoge") ==> ok
test with-config, expects (8 "jojo") ==> ok
passed.
Testing mw.entry ==============================================================
testing bindings in #<module mw.entry> ... ok
<entry-main 1>-----------------------------------------------------------------
test dispatch entry 1, expects "world!" ==> ok
test dispatch entry 3, expects "ORAORA!" ==> ok
test dispatch entry 4, expects "Foo" ==> ok
test dispatch entry 5, expects "#f" ==> ok
test dispatch entry 6, expects "((hoge bar))" ==> ok
test dispatch entry 7, expects "hoge" ==> ok
test dispatch entry 8, expects "bar" ==> ok
test response header, expects "jojo" ==> ok
test view, expects "jojo" ==> ok
test error handler, expects "500 Internal Server Error" ==> ok
test error handler, expects "999 Test error" ==> ok
test error-view, expects "ORA!" ==> ok
passed.
Testing mw.generator ==========================================================
testing bindings in #<module mw.generator> ... ok
<session 1>--------------------------------------------------------------------
Create  generator.tmp/hoge :mode 600
test make file exists?, expects #t ==> ok
test make file mode?, expects 384 ==> ok
test make file content?, expects "HOGE" ==> ok
Create! generator.tmp/hoge :mode 644
test override file!, expects "hoge" ==> ok
Create  generator.tmp/bar/ :mode 600
test make directory exists?, expects #t ==> ok
test make directory mode?, expects 384 ==> ok
<session 2>--------------------------------------------------------------------
Create  generator.tmp/bar/ :mode 755
Create  generator.tmp/bar/hoge :mode 644
Create  generator.tmp/bar/jojo :mode 644
test recursion directory, expects #t ==> ok
passed.
Testing mw.interp.json ========================================================
testing bindings in #<module mw.interp.json> ... ok
test sexp->json, expects "{\"bar\":8,\"hoge\":[\"a\",\"b\"]}" ==> ok
passed.
Testing mw.interp.sxml ========================================================
testing bindings in #<module mw.interp.sxml> ... ok
test sxml->xml, expects "<a hoge='bar -&gt;'>&lt;- abc</a>" ==> ok
test interp-sxml, expects (jojo (ORA "MUDAMUDAMUDA!")) ==> ok
test make-interp-sxml, expects (hoge "ab" (a (|@| (hoge "bar ->")) "abc ->")) ==> ok
test top-level attribute, expects (hoge (|@| (aaa "aaa"))) ==> ok
passed.
Testing mw.interp =============================================================
testing bindings in #<module mw.interp> ... ok
test interp-generic, expects (2 2 2) ==> ok
passed.
Testing mw.mime-type ==========================================================
testing bindings in #<module mw.mime-type> ... ok
test get-mime-type, expects ("text/html" "application/pdf") ==> ok
test file-mime-type, expects "application/rdf+xml" ==> ok
test add-mime-type!, expects ("application/hoge" "application/hoge") ==> ok
passed.
Testing mw.persistent =========================================================
testing bindings in #<module mw.persistent> ... ok
test creating database, expects #t ==> ok
test creating & persistent, expects "hoge" ==> ok
test change instance, expects 99 ==> ok
test serialize <persistent>, expects #t ==> ok
test serialize <hash-table>, expects #t ==> ok
test Collection, expects ("taro" "bar" "hoge") ==> ok
test Transaction 1, expects 99 ==> ok
test Transaction 2, expects #f ==> ok
test Delete, expects #f ==> ok
passed.
Testing mw.plugin =============================================================
testing bindings in #<module mw.plugin> ... ok
test initialize-plugins, expects (8) ==> ok
passed.
Testing mw.servelet.cgi =======================================================
testing bindings in #<module mw.servelet.cgi> ... ok
test run cgi-servelet, expects "HOGE" ==> ok
passed.
Testing mw.servelet.fs ========================================================
testing bindings in #<module mw.servelet.fs> ... ok
test GET /hoge.text, expects #t ==> ok
test GET /, expects #t ==> ok
test Not found, expects "404" ==> ok
test Forbidden, expects "403" ==> ok
passed.
Testing mw.httpd ==============================================================
testing bindings in #<module mw.server.httpd> ... ok
<parse-request-line>-----------------------------------------------------------
test parse-request-line, expects ("GET" "/hoge" "HTTP/1.0") ==> ok
test parse-request-line, expects ("GET" "/hoge" "HTTP/1.1") ==> ok
test parse-request-line error HTTP/1.2?, expects #t ==> ok
<parse-request-uri>------------------------------------------------------------
test parse-request-uri /bar/hoge?jojo, expects ("bar" "/hoge" "jojo") ==> ok
test parse-request-uri /bar, expects ("bar" #f #f) ==> ok
test parse-request-uri /bar?jojo, expects ("bar" #f "jojo") ==> ok
test parse-request-uri /, expects ("" #f #f) ==> ok
test parse-request-uri /?ABC, expects ("" #f "ABC") ==> ok
<http-metavariables>-----------------------------------------------------------
test http-metavariables, expects () ==> ok
test http-metavariable-set! & ref, expects "ORAORA!!!" ==> ok
test http-metavariable-ref, expects #f ==> ok
<httpd>------------------------------------------------------------------------
test default servelet, expects "hoge" ==> ok
test servelet jojo, expects "ORAORA!!!" ==> ok
passed.
Testing mw.server.repl ========================================================
testing bindings in #<module mw.server.repl> ... ok
test repl-eval, expects "((8 . 8) 20)" ==> ok
test repl-eval (error), expects "*** ERROR: 8" ==> ok
passed.
Testing mw.server =============================================================
testing bindings in #<module mw.server> ... ok
test run-server, expects "2x2" ==> ok
passed.
Testing mw.set ================================================================
testing bindings in #<module mw.set> ... ok
test , expects (6 "scheme" "lisp" "elisp" "haskell" "sml" "ocaml") ==> ok
test subseq*, expects ("lisp" "elisp") ==> ok
test <class/set/set>, expects (4 . #t) ==> ok
test set-intersection, expects ("ocaml") ==> ok
test map-set$, expects ("object" "hoge" "jojo") ==> ok
test <elt> <= <set-set>, expects (#f #f) ==> ok
test delete! <elt>, expects #f ==> ok
test delete! <set>, expects #f ==> ok
test (<A> <- (subseq* <A> (- (size-of <A>) 2))), expects #f ==> ok
passed.
Testing mw.test.cgi ===========================================================
testing bindings in #<module mw.test.cgi> ... ok
test define-cgi-script, expects #t ==> ok
test call-with-cgi-script 1, expects "JOJO" ==> ok
test call-with-cgi-script 2, expects "abc" ==> ok
passed.
Testing mw.textlight ==========================================================
testing bindings in #<module mw.textlight> ... ok
test read h2, expects (h2 "Headline") ==> ok
test read h3, expects (h3 "Headline") ==> ok
test read h6, expects (h6 "Headline") ==> ok
test read List, expects (ol (li "hoge") (li (ol (li "hoge") (li "jojo"))) (li "bar") (li (ul (li "bar") (li "jojo")))) ==> ok
test read Paragraph, expects (p "hoge" "hoge") ==> ok
test read Preformatted, expects (pre " hoge" "\n" " hoge") ==> ok
test skip comment line, expects (p "hoge" "hoge") ==> ok
test read Macro [table], expects (table (tr (td "hoge") (td "bar")) (tr (td "bar") (td "hoge"))) ==> ok
test read Macro [table] th, expects (table (tr (th "hoge") (th "bar")) (tr (td "bar") (td "hoge"))) ==> ok
test read Macro [table caption], expects (table (caption "jojo") (tr (td "hoge") (td "bar")) (tr (td "bar") (td "hoge"))) ==> ok
test read Macro [dl], expects (dl (dt "hoge") (dd "bar") (dt "bar") (dd "hoge") (dt "huga") (dd "test jojo abc defg")) ==> ok
passed.
Testing mw.time.http ==========================================================
testing bindings in #<module mw.time.http> ... ok
test time->http-date, expects "Tue, 11 Oct 2005 09:52:12 GMT" ==> ok
passed.
Testing mw.time.w3cdtf ========================================================
testing bindings in #<module mw.time.w3cdtf> ... ok
test w3cdtf->time, expects #t ==> ok
test time->w3cdtf <> w3cdtf->time, expects "2005-08-21T17:38:30Z" ==> ok
test time->w3cdtf <local> w3cdtf->time, expects "2005-08-21T17:38:30+09:00" ==> ok
passed.
Testing mw.user ===============================================================
testing bindings in #<module mw.user> ... ok
test make-user, expects "hoge" ==> ok
test match-user 1, expects "hoge" ==> ok
test match-user 2, expects #f ==> ok
test match-user 3, expects "hoge" ==> ok
test user-password-change, expects #t ==> ERROR: GOT #<error "unbound variable: check-user?">
failed.
discrepancies found.  Errors are:
test user-password-change: expects #t => got #<error "unbound variable: check-user?">
Testing mw.util ===============================================================
testing bindings in #<module mw.util> ... ok
test get-error-string, expects "hoge" ==> ok
test get-error-string long-message, expects "*** ERROR: hoge" ==> ok
test check=>, expects a ==> ok
test let$, expects (1 2 3) ==> (1 2 3)ok
test and*=>, expects #\a ==> ok
test and*=>, expects #f ==> ok
test and=> 1, expects 20 ==> ok
test and=> 2, expects #f ==> ok
test and=> 3, expects 3 ==> ok
test receive-alist 1, expects (20 . 50) ==> ok
test receive-alist 2, expects (20 50) ==> ok
test receive-slot 1, expects (20 30 40) ==> ok
test receive-slot 2, expects (20 40 . 30) ==> ok
test slot-update!, expects 88 ==> ok
test define-table (eq?), expects 8 ==> ok
test define-table (string=?), expects 8 ==> ok
test define-table (), expects b ==> ok
test define-table (get x . def), expects "hoge" ==> ok
test define-table (add delete!), expects (80 . #f) ==> ok
test case*, expects ok ==> ok
passed.
Testing mw.view ===============================================================
testing bindings in #<module mw.view> ... ok
test view 1, expects "hoge" ==> ok
test view 2, expects "hogehoge" ==> ok
passed.
Testing mw.config =============================================================
testing bindings in #<module mw.config> ... ok
test define-config 1, expects x ==> ok
test define-config 2, expects "abc" ==> ok
test define-config (validator), expects 888 ==> ok
test initialize-config! 1, expects #f ==> ok
test initialize-config! 2, expects 20 ==> ok
test initialize-config! 3, expects ("jojo" "hoge") ==> ok
test with-config, expects (8 "jojo") ==> ok
passed.
Testing mw.entry ==============================================================
testing bindings in #<module mw.entry> ... ok
<entry-main 1>-----------------------------------------------------------------
test dispatch entry 1, expects "world!" ==> ok
test dispatch entry 3, expects "ORAORA!" ==> ok
test dispatch entry 4, expects "Foo" ==> ok
test dispatch entry 5, expects "#f" ==> ok
test dispatch entry 6, expects "((hoge bar))" ==> ok
test dispatch entry 7, expects "hoge" ==> ok
test dispatch entry 8, expects "bar" ==> ok
test response header, expects "jojo" ==> ok
test view, expects "jojo" ==> ok
test error handler, expects "500 Internal Server Error" ==> ok
test error handler, expects "999 Test error" ==> ok
test error-view, expects "ORA!" ==> ok
passed.
Testing mw.generator ==========================================================
testing bindings in #<module mw.generator> ... ok
<session 1>--------------------------------------------------------------------
Create  generator.tmp/hoge :mode 600
test make file exists?, expects #t ==> ok
test make file mode?, expects 384 ==> ok
test make file content?, expects "HOGE" ==> ok
Create! generator.tmp/hoge :mode 644
test override file!, expects "hoge" ==> ok
Create  generator.tmp/bar/ :mode 600
test make directory exists?, expects #t ==> ok
test make directory mode?, expects 384 ==> ok
<session 2>--------------------------------------------------------------------
Create  generator.tmp/bar/ :mode 755
Create  generator.tmp/bar/hoge :mode 644
Create  generator.tmp/bar/jojo :mode 644
test recursion directory, expects #t ==> ok
passed.
Testing mw.interp.json ========================================================
testing bindings in #<module mw.interp.json> ... ok
test sexp->json, expects "{\"bar\":8,\"hoge\":[\"a\",\"b\"]}" ==> ok
passed.
Testing mw.interp.sxml ========================================================
testing bindings in #<module mw.interp.sxml> ... ok
test sxml->xml, expects "<a hoge='bar -&gt;'>&lt;- abc</a>" ==> ok
test interp-sxml, expects (jojo (ORA "MUDAMUDAMUDA!")) ==> ok
test make-interp-sxml, expects (hoge "ab" (a (|@| (hoge "bar ->")) "abc ->")) ==> ok
test top-level attribute, expects (hoge (|@| (aaa "aaa"))) ==> ok
passed.
Testing mw.interp =============================================================
testing bindings in #<module mw.interp> ... ok
test interp-generic, expects (2 2 2) ==> ok
passed.
Testing mw.mime-type ==========================================================
testing bindings in #<module mw.mime-type> ... ok
test get-mime-type, expects ("text/html" "application/pdf") ==> ok
test file-mime-type, expects "application/rdf+xml" ==> ok
test add-mime-type!, expects ("application/hoge" "application/hoge") ==> ok
passed.
Testing mw.persistent =========================================================
testing bindings in #<module mw.persistent> ... ok
test creating database, expects #t ==> ok
test creating & persistent, expects "hoge" ==> ok
test change instance, expects 99 ==> ok
test serialize <persistent>, expects #t ==> ok
test serialize <hash-table>, expects #t ==> ok
test Collection, expects ("taro" "bar" "hoge") ==> ok
test Transaction 1, expects 99 ==> ok
test Transaction 2, expects #f ==> ok
test Delete, expects #f ==> ok
passed.
Testing mw.plugin =============================================================
testing bindings in #<module mw.plugin> ... ok
test initialize-plugins, expects (8) ==> ok
passed.
Testing mw.servelet.cgi =======================================================
testing bindings in #<module mw.servelet.cgi> ... ok
test run cgi-servelet, expects "HOGE" ==> ok
passed.
Testing mw.servelet.fs ========================================================
testing bindings in #<module mw.servelet.fs> ... ok
test GET /hoge.text, expects #t ==> ok
test GET /, expects #t ==> ok
test Not found, expects "404" ==> ok
test Forbidden, expects "403" ==> ok
passed.
Testing mw.httpd ==============================================================
testing bindings in #<module mw.server.httpd> ... ok
<parse-request-line>-----------------------------------------------------------
test parse-request-line, expects ("GET" "/hoge" "HTTP/1.0") ==> ok
test parse-request-line, expects ("GET" "/hoge" "HTTP/1.1") ==> ok
test parse-request-line error HTTP/1.2?, expects #t ==> ok
<parse-request-uri>------------------------------------------------------------
test parse-request-uri /bar/hoge?jojo, expects ("bar" "/hoge" "jojo") ==> ok
test parse-request-uri /bar, expects ("bar" #f #f) ==> ok
test parse-request-uri /bar?jojo, expects ("bar" #f "jojo") ==> ok
test parse-request-uri /, expects ("" #f #f) ==> ok
test parse-request-uri /?ABC, expects ("" #f "ABC") ==> ok
<http-metavariables>-----------------------------------------------------------
test http-metavariables, expects () ==> ok
test http-metavariable-set! & ref, expects "ORAORA!!!" ==> ok
test http-metavariable-ref, expects #f ==> ok
<httpd>------------------------------------------------------------------------
test default servelet, expects "hoge" ==> ok
test servelet jojo, expects "ORAORA!!!" ==> ok
passed.
Testing mw.server.repl ========================================================
testing bindings in #<module mw.server.repl> ... ok
test repl-eval, expects "((8 . 8) 20)" ==> ok
test repl-eval (error), expects "*** ERROR: 8" ==> ok
passed.
Testing mw.server =============================================================
testing bindings in #<module mw.server> ... ok
test run-server, expects "2x2" ==> ok
passed.
Testing mw.set ================================================================
testing bindings in #<module mw.set> ... ok
test , expects (6 "scheme" "lisp" "elisp" "haskell" "sml" "ocaml") ==> ok
test subseq*, expects ("lisp" "elisp") ==> ok
test <class/set/set>, expects (4 . #t) ==> ok
test set-intersection, expects ("ocaml") ==> ok
test map-set$, expects ("object" "hoge" "jojo") ==> ok
test <elt> <= <set-set>, expects (#f #f) ==> ok
test delete! <elt>, expects #f ==> ok
test delete! <set>, expects #f ==> ok
test (<A> <- (subseq* <A> (- (size-of <A>) 2))), expects #f ==> ok
passed.
Testing mw.test.cgi ===========================================================
testing bindings in #<module mw.test.cgi> ... ok
test define-cgi-script, expects #t ==> ok
test call-with-cgi-script 1, expects "JOJO" ==> ok
test call-with-cgi-script 2, expects "abc" ==> ok
passed.
Testing mw.textlight ==========================================================
testing bindings in #<module mw.textlight> ... ok
test read h2, expects (h2 "Headline") ==> ok
test read h3, expects (h3 "Headline") ==> ok
test read h6, expects (h6 "Headline") ==> ok
test read List, expects (ol (li "hoge") (li (ol (li "hoge") (li "jojo"))) (li "bar") (li (ul (li "bar") (li "jojo")))) ==> ok
test read Paragraph, expects (p "hoge" "hoge") ==> ok
test read Preformatted, expects (pre " hoge" "\n" " hoge") ==> ok
test skip comment line, expects (p "hoge" "hoge") ==> ok
test read Macro [table], expects (table (tr (td "hoge") (td "bar")) (tr (td "bar") (td "hoge"))) ==> ok
test read Macro [table] th, expects (table (tr (th "hoge") (th "bar")) (tr (td "bar") (td "hoge"))) ==> ok
test read Macro [table caption], expects (table (caption "jojo") (tr (td "hoge") (td "bar")) (tr (td "bar") (td "hoge"))) ==> ok
test read Macro [dl], expects (dl (dt "hoge") (dd "bar") (dt "bar") (dd "hoge") (dt "huga") (dd "test jojo abc defg")) ==> ok
passed.
Testing mw.time.http ==========================================================
testing bindings in #<module mw.time.http> ... ok
test time->http-date, expects "Tue, 11 Oct 2005 09:52:12 GMT" ==> ok
passed.
Testing mw.time.w3cdtf ========================================================
testing bindings in #<module mw.time.w3cdtf> ... ok
test w3cdtf->time, expects #t ==> ok
test time->w3cdtf <> w3cdtf->time, expects "2005-08-21T17:38:30Z" ==> ok
test time->w3cdtf <local> w3cdtf->time, expects "2005-08-21T17:38:30+09:00" ==> ok
passed.
Testing mw.user ===============================================================
testing bindings in #<module mw.user> ... ok
test make-user, expects "hoge" ==> ok
test match-user 1, expects "hoge" ==> ok
test match-user 2, expects #f ==> ok
test match-user 3, expects "hoge" ==> ok
test user-password-change, expects (#f "hoge") ==> ok
passed.
Testing mw.util ===============================================================
testing bindings in #<module mw.util> ... ok
test get-error-string, expects "hoge" ==> ok
test get-error-string long-message, expects "*** ERROR: hoge" ==> ok
test check=>, expects a ==> ok
test let$, expects (1 2 3) ==> (1 2 3)ok
test and*=>, expects #\a ==> ok
test and*=>, expects #f ==> ok
test and=> 1, expects 20 ==> ok
test and=> 2, expects #f ==> ok
test and=> 3, expects 3 ==> ok
test receive-alist 1, expects (20 . 50) ==> ok
test receive-alist 2, expects (20 50) ==> ok
test receive-slot 1, expects (20 30 40) ==> ok
test receive-slot 2, expects (20 40 . 30) ==> ok
test slot-update!, expects 88 ==> ok
test define-table (eq?), expects 8 ==> ok
test define-table (string=?), expects 8 ==> ok
test define-table (), expects b ==> ok
test define-table (get x . def), expects "hoge" ==> ok
test define-table (add delete!), expects (80 . #f) ==> ok
test case*, expects ok ==> ok
passed.
Testing mw.view ===============================================================
testing bindings in #<module mw.view> ... ok
test view 1, expects "hoge" ==> ok
test view 2, expects "hogehoge" ==> ok
passed.
Testing mw.config =============================================================
testing bindings in #<module mw.config> ... ok
test define-config 1, expects x ==> ok
test define-config 2, expects "abc" ==> ok
test define-config (validator), expects 888 ==> ok
test initialize-config! 1, expects #f ==> ok
test initialize-config! 2, expects 20 ==> ok
test initialize-config! 3, expects ("jojo" "hoge") ==> ok
test with-config, expects (8 "jojo") ==> ok
passed.
Testing mw.entry ==============================================================
testing bindings in #<module mw.entry> ... ok
<entry-main 1>-----------------------------------------------------------------
test define-entry, expects "world!" ==> ok
test define-entry, expects "ABCDEFG" ==> ok
test define-entry, expects "ABCDEFG-ABCDEFG" ==> ok
test define-entry, expects "555" ==> ok
test define-entry, expects "ORAORA!" ==> ok
test define-entry, expects "Foo" ==> ok
test define-entry, expects "#f" ==> ok
test define-entry, expects "((hoge bar))" ==> ok
test define-entry, expects "hoge" ==> ok
test define-entry, expects "bar" ==> ok
test response header, expects "jojo" ==> ok
test view, expects "jojo" ==> ok
test error handler, expects "500 Internal Server Error" ==> ok
test error handler, expects "999 Test error" ==> ok
test error-view, expects "ORA!" ==> ok
passed.
Testing mw.generator ==========================================================
testing bindings in #<module mw.generator> ... ok
<session 1>--------------------------------------------------------------------
Create  generator.tmp/hoge :mode 600
test make file exists?, expects #t ==> ok
test make file mode?, expects 384 ==> ok
test make file content?, expects "HOGE" ==> ok
Create! generator.tmp/hoge :mode 644
test override file!, expects "hoge" ==> ok
Create  generator.tmp/bar/ :mode 600
test make directory exists?, expects #t ==> ok
test make directory mode?, expects 384 ==> ok
<session 2>--------------------------------------------------------------------
Create  generator.tmp/bar/ :mode 755
Create  generator.tmp/bar/hoge :mode 644
Create  generator.tmp/bar/jojo :mode 644
test recursion directory, expects #t ==> ok
passed.
Testing mw.interp.json ========================================================
testing bindings in #<module mw.interp.json> ... ok
test sexp->json, expects "{\"bar\":8,\"hoge\":[\"a\",\"b\"]}" ==> ok
passed.
Testing mw.interp.sxml ========================================================
testing bindings in #<module mw.interp.sxml> ... ok
test sxml->xml, expects "<a hoge='bar -&gt;'>&lt;- abc</a>" ==> ok
test interp-sxml, expects (jojo (ORA "MUDAMUDAMUDA!")) ==> ok
test make-interp-sxml, expects (hoge "ab" (a (|@| (hoge "bar ->")) "abc ->")) ==> ok
test top-level attribute, expects (hoge (|@| (aaa "aaa"))) ==> ok
passed.
Testing mw.interp =============================================================
testing bindings in #<module mw.interp> ... ok
test interp-generic, expects (2 2 2) ==> ok
passed.
Testing mw.mime-type ==========================================================
testing bindings in #<module mw.mime-type> ... ok
test get-mime-type, expects ("text/html" "application/pdf") ==> ok
test file-mime-type, expects "application/rdf+xml" ==> ok
test add-mime-type!, expects ("application/hoge" "application/hoge") ==> ok
passed.
Testing mw.persistent =========================================================
testing bindings in #<module mw.persistent> ... ok
test creating database, expects #t ==> ok
test creating & persistent, expects "hoge" ==> ok
test change instance, expects 99 ==> ok
test serialize <persistent>, expects #t ==> ok
test serialize <hash-table>, expects #t ==> ok
test Collection, expects ("taro" "bar" "hoge") ==> ok
test Transaction 1, expects 99 ==> ok
test Transaction 2, expects #f ==> ok
test Delete, expects #f ==> ok
passed.
Testing mw.plugin =============================================================
testing bindings in #<module mw.plugin> ... ok
test initialize-plugins, expects (8) ==> ok
passed.
Testing mw.servelet.cgi =======================================================
testing bindings in #<module mw.servelet.cgi> ... ok
test run cgi-servelet, expects "HOGE" ==> ok
passed.
Testing mw.servelet.fs ========================================================
testing bindings in #<module mw.servelet.fs> ... ok
test GET /hoge.text, expects #t ==> ok
test GET /, expects #t ==> ok
test Not found, expects "404" ==> ok
test Forbidden, expects "403" ==> ok
passed.
Testing mw.httpd ==============================================================
testing bindings in #<module mw.server.httpd> ... ok
<parse-request-line>-----------------------------------------------------------
test parse-request-line, expects ("GET" "/hoge" "HTTP/1.0") ==> ok
test parse-request-line, expects ("GET" "/hoge" "HTTP/1.1") ==> ok
test parse-request-line error HTTP/1.2?, expects #t ==> ok
<parse-request-uri>------------------------------------------------------------
test parse-request-uri /bar/hoge?jojo, expects ("bar" "/hoge" "jojo") ==> ok
test parse-request-uri /bar, expects ("bar" #f #f) ==> ok
test parse-request-uri /bar?jojo, expects ("bar" #f "jojo") ==> ok
test parse-request-uri /, expects ("" #f #f) ==> ok
test parse-request-uri /?ABC, expects ("" #f "ABC") ==> ok
<http-metavariables>-----------------------------------------------------------
test http-metavariables, expects () ==> ok
test http-metavariable-set! & ref, expects "ORAORA!!!" ==> ok
test http-metavariable-ref, expects #f ==> ok
<httpd>------------------------------------------------------------------------
test default servelet, expects "hoge" ==> ok
test servelet jojo, expects "ORAORA!!!" ==> ok
passed.
Testing mw.server.repl ========================================================
testing bindings in #<module mw.server.repl> ... ok
test repl-eval, expects "((8 . 8) 20)" ==> ok
test repl-eval (error), expects "*** ERROR: 8" ==> ok
passed.
Testing mw.server =============================================================
testing bindings in #<module mw.server> ... ok
test run-server, expects "2x2" ==> ok
passed.
Testing mw.set ================================================================
testing bindings in #<module mw.set> ... ok
test , expects (6 "scheme" "lisp" "elisp" "haskell" "sml" "ocaml") ==> ok
test subseq*, expects ("lisp" "elisp") ==> ok
test <class/set/set>, expects (4 . #t) ==> ok
test set-intersection, expects ("ocaml") ==> ok
test map-set$, expects ("object" "hoge" "jojo") ==> ok
test <elt> <= <set-set>, expects (#f #f) ==> ok
test delete! <elt>, expects #f ==> ok
test delete! <set>, expects #f ==> ok
test (<A> <- (subseq* <A> (- (size-of <A>) 2))), expects #f ==> ok
passed.
Testing mw.test.cgi ===========================================================
testing bindings in #<module mw.test.cgi> ... ok
test define-cgi-script, expects #t ==> ok
test call-with-cgi-script 1, expects "JOJO" ==> ok
test call-with-cgi-script 2, expects "abc" ==> ok
passed.
Testing mw.textlight ==========================================================
testing bindings in #<module mw.textlight> ... ok
test read h2, expects (h2 "Headline") ==> ok
test read h3, expects (h3 "Headline") ==> ok
test read h6, expects (h6 "Headline") ==> ok
test read List, expects (ol (li "hoge") (li (ol (li "hoge") (li "jojo"))) (li "bar") (li (ul (li "bar") (li "jojo")))) ==> ok
test read Paragraph, expects (p "hoge" "hoge") ==> ok
test read Preformatted, expects (pre " hoge" "\n" " hoge") ==> ok
test skip comment line, expects (p "hoge" "hoge") ==> ok
test read Macro [table], expects (table (tr (td "hoge") (td "bar")) (tr (td "bar") (td "hoge"))) ==> ok
test read Macro [table] th, expects (table (tr (th "hoge") (th "bar")) (tr (td "bar") (td "hoge"))) ==> ok
test read Macro [table caption], expects (table (caption "jojo") (tr (td "hoge") (td "bar")) (tr (td "bar") (td "hoge"))) ==> ok
test read Macro [dl], expects (dl (dt "hoge") (dd "bar") (dt "bar") (dd "hoge") (dt "huga") (dd "test jojo abc defg")) ==> ok
passed.
Testing mw.time.http ==========================================================
testing bindings in #<module mw.time.http> ... ok
test time->http-date, expects "Tue, 11 Oct 2005 09:52:12 GMT" ==> ok
passed.
Testing mw.time.w3cdtf ========================================================
testing bindings in #<module mw.time.w3cdtf> ... ok
test w3cdtf->time, expects #t ==> ok
test time->w3cdtf <> w3cdtf->time, expects "2005-08-21T17:38:30Z" ==> ok
test time->w3cdtf <local> w3cdtf->time, expects "2005-08-21T17:38:30+09:00" ==> ok
passed.
Testing mw.user ===============================================================
testing bindings in #<module mw.user> ... ok
test make-user, expects "hoge" ==> ok
test match-user 1, expects "hoge" ==> ok
test match-user 2, expects #f ==> ok
test match-user 3, expects "hoge" ==> ok
test user-password-change, expects (#f "hoge") ==> ok
passed.
Testing mw.util ===============================================================
testing bindings in #<module mw.util> ... ok
test get-error-string, expects "hoge" ==> ok
test get-error-string long-message, expects "*** ERROR: hoge" ==> ok
test check=>, expects a ==> ok
test let$, expects (1 2 3) ==> (1 2 3)ok
test and*=>, expects #\a ==> ok
test and*=>, expects #f ==> ok
test and=> 1, expects 20 ==> ok
test and=> 2, expects #f ==> ok
test and=> 3, expects 3 ==> ok
test receive-alist 1, expects (20 . 50) ==> ok
test receive-alist 2, expects (20 50) ==> ok
test receive-slot 1, expects (20 30 40) ==> ok
test receive-slot 2, expects (20 40 . 30) ==> ok
test slot-update!, expects 88 ==> ok
test define-table (eq?), expects 8 ==> ok
test define-table (string=?), expects 8 ==> ok
test define-table (), expects b ==> ok
test define-table (get x . def), expects "hoge" ==> ok
test define-table (add delete!), expects (80 . #f) ==> ok
test case*, expects ok ==> ok
passed.
Testing mw.view ===============================================================
testing bindings in #<module mw.view> ... ok
test view, expects "hoge" ==> ok
test view, expects "hogehoge" ==> ok
test view, expects "hogehogehoge" ==> ok
passed.
Testing mw.config =============================================================
testing bindings in #<module mw.config> ... ok
test define-config 1, expects x ==> ok
test define-config 2, expects "abc" ==> ok
test define-config (validator), expects 888 ==> ok
test initialize-config! 1, expects #f ==> ok
test initialize-config! 2, expects 20 ==> ok
test initialize-config! 3, expects ("jojo" "hoge") ==> ok
test with-config, expects (8 "jojo") ==> ok
passed.
Testing mw.entry ==============================================================
testing bindings in #<module mw.entry> ... ok
<entry-main 1>-----------------------------------------------------------------
test define-entry, expects "world!" ==> ok
test define-entry, expects "ABCDEFG" ==> ok
test define-entry, expects "ABCDEFG-ABCDEFG" ==> ok
test define-entry, expects "555" ==> ok
test define-entry, expects "ORAORA!" ==> ok
test define-entry, expects "Foo" ==> ok
test define-entry, expects "#f" ==> ok
test define-entry, expects "((hoge bar))" ==> ok
test define-entry, expects "hoge" ==> ok
test define-entry, expects "bar" ==> ok
test response header, expects "jojo" ==> ok
test view, expects "jojo" ==> ok
test error handler, expects "500 Internal Server Error" ==> ok
test error handler, expects "999 Test error" ==> ok
test error-view, expects "ORA!" ==> ok
passed.
Testing mw.generator ==========================================================
testing bindings in #<module mw.generator> ... ok
<session 1>--------------------------------------------------------------------
Create  generator.tmp/hoge :mode 600
test make file exists?, expects #t ==> ok
test make file mode?, expects 384 ==> ok
test make file content?, expects "HOGE" ==> ok
Create! generator.tmp/hoge :mode 644
test override file!, expects "hoge" ==> ok
Create  generator.tmp/bar/ :mode 600
test make directory exists?, expects #t ==> ok
test make directory mode?, expects 384 ==> ok
<session 2>--------------------------------------------------------------------
Create  generator.tmp/bar/ :mode 755
Create  generator.tmp/bar/hoge :mode 644
Create  generator.tmp/bar/jojo :mode 644
test recursion directory, expects #t ==> ok
passed.
Testing mw.interp.json ========================================================
testing bindings in #<module mw.interp.json> ... ok
test sexp->json, expects "{\"bar\":8,\"hoge\":[\"a\",\"b\"]}" ==> ok
passed.
Testing mw.interp.sxml ========================================================
testing bindings in #<module mw.interp.sxml> ... ok
test sxml->xml, expects "<a hoge='bar -&gt;'>&lt;- abc</a>" ==> ok
test interp-sxml, expects (jojo (ORA "MUDAMUDAMUDA!")) ==> ok
test make-interp-sxml, expects (hoge "ab" (a (|@| (hoge "bar ->")) "abc ->")) ==> ok
test top-level attribute, expects (hoge (|@| (aaa "aaa"))) ==> ok
passed.
Testing mw.interp =============================================================
testing bindings in #<module mw.interp> ... ok
test interp-generic, expects (2 2 2) ==> ok
passed.
Testing mw.mime-type ==========================================================
testing bindings in #<module mw.mime-type> ... ok
test get-mime-type, expects ("text/html" "application/pdf") ==> ok
test file-mime-type, expects "application/rdf+xml" ==> ok
test add-mime-type!, expects ("application/hoge" "application/hoge") ==> ok
passed.
Testing mw.persistent =========================================================
testing bindings in #<module mw.persistent> ... ok
test creating database, expects #t ==> ok
test creating & persistent, expects "hoge" ==> ok
test change instance, expects 99 ==> ok
test serialize <persistent>, expects #t ==> ok
test serialize <hash-table>, expects #t ==> ok
test Collection, expects ("taro" "bar" "hoge") ==> ok
test Transaction 1, expects 99 ==> ok
test Transaction 2, expects #f ==> ok
test Delete, expects #f ==> ok
passed.
Testing mw.plugin =============================================================
testing bindings in #<module mw.plugin> ... ok
test initialize-plugins, expects (8) ==> ok
passed.
Testing mw.servelet.cgi =======================================================
testing bindings in #<module mw.servelet.cgi> ... ok
test run cgi-servelet, expects "HOGE" ==> ok
passed.
Testing mw.servelet.fs ========================================================
testing bindings in #<module mw.servelet.fs> ... ok
test GET /hoge.text, expects #t ==> ok
test GET /, expects #t ==> ok
test Not found, expects "404" ==> ok
test Forbidden, expects "403" ==> ok
passed.
Testing mw.httpd ==============================================================
testing bindings in #<module mw.server.httpd> ... ok
<parse-request-line>-----------------------------------------------------------
test parse-request-line, expects ("GET" "/hoge" "HTTP/1.0") ==> ok
test parse-request-line, expects ("GET" "/hoge" "HTTP/1.1") ==> ok
test parse-request-line error HTTP/1.2?, expects #t ==> ok
<parse-request-uri>------------------------------------------------------------
test parse-request-uri /bar/hoge?jojo, expects ("bar" "/hoge" "jojo") ==> ok
test parse-request-uri /bar, expects ("bar" #f #f) ==> ok
test parse-request-uri /bar?jojo, expects ("bar" #f "jojo") ==> ok
test parse-request-uri /, expects ("" #f #f) ==> ok
test parse-request-uri /?ABC, expects ("" #f "ABC") ==> ok
<http-metavariables>-----------------------------------------------------------
test http-metavariables, expects () ==> ok
test http-metavariable-set! & ref, expects "ORAORA!!!" ==> ok
test http-metavariable-ref, expects #f ==> ok
<httpd>------------------------------------------------------------------------
test default servelet, expects "hoge" ==> ok
test servelet jojo, expects "ORAORA!!!" ==> ok
passed.
Testing mw.server.repl ========================================================
testing bindings in #<module mw.server.repl> ... ok
test repl-eval, expects "((8 . 8) 20)" ==> ok
test repl-eval (error), expects "*** ERROR: 8" ==> ok
passed.
Testing mw.server =============================================================
testing bindings in #<module mw.server> ... ok
test run-server, expects "2x2" ==> ok
passed.
Testing mw.set ================================================================
testing bindings in #<module mw.set> ... ok
test , expects (6 "scheme" "lisp" "elisp" "haskell" "sml" "ocaml") ==> ok
test subseq*, expects ("lisp" "elisp") ==> ok
test <class/set/set>, expects (4 . #t) ==> ok
test set-intersection, expects ("ocaml") ==> ok
test map-set$, expects ("object" "hoge" "jojo") ==> ok
test <elt> <= <set-set>, expects (#f #f) ==> ok
test delete! <elt>, expects #f ==> ok
test delete! <set>, expects #f ==> ok
test (<A> <- (subseq* <A> (- (size-of <A>) 2))), expects #f ==> ok
passed.
Testing mw.test.cgi ===========================================================
testing bindings in #<module mw.test.cgi> ... ok
test define-cgi-script, expects #t ==> ok
test call-with-cgi-script 1, expects "JOJO" ==> ok
test call-with-cgi-script 2, expects "abc" ==> ok
passed.
Testing mw.textlight ==========================================================
Testing mw.time.http ==========================================================
testing bindings in #<module mw.time.http> ... ok
test time->http-date, expects "Tue, 11 Oct 2005 09:52:12 GMT" ==> ok
passed.
Testing mw.time.w3cdtf ========================================================
testing bindings in #<module mw.time.w3cdtf> ... ok
test w3cdtf->time, expects #t ==> ok
test time->w3cdtf <> w3cdtf->time, expects "2005-08-21T17:38:30Z" ==> ok
test time->w3cdtf <local> w3cdtf->time, expects "2005-08-21T17:38:30+09:00" ==> ok
passed.
Testing mw.user ===============================================================
testing bindings in #<module mw.user> ... ok
test make-user, expects "hoge" ==> ok
test match-user 1, expects "hoge" ==> ok
test match-user 2, expects #f ==> ok
test match-user 3, expects "hoge" ==> ok
test user-password-change, expects (#f "hoge") ==> ok
passed.
Testing mw.util ===============================================================
testing bindings in #<module mw.util> ... ok
test get-error-string, expects "hoge" ==> ok
test get-error-string long-message, expects "*** ERROR: hoge" ==> ok
test check=>, expects a ==> ok
test let$, expects (1 2 3) ==> (1 2 3)ok
test and*=>, expects #\a ==> ok
test and*=>, expects #f ==> ok
test and=> 1, expects 20 ==> ok
test and=> 2, expects #f ==> ok
test and=> 3, expects 3 ==> ok
test receive-alist 1, expects (20 . 50) ==> ok
test receive-alist 2, expects (20 50) ==> ok
test receive-slot 1, expects (20 30 40) ==> ok
test receive-slot 2, expects (20 40 . 30) ==> ok
test slot-update!, expects 88 ==> ok
test define-table (eq?), expects 8 ==> ok
test define-table (string=?), expects 8 ==> ok
test define-table (), expects b ==> ok
test define-table (get x . def), expects "hoge" ==> ok
test define-table (add delete!), expects (80 . #f) ==> ok
test case*, expects ok ==> ok
passed.
Testing mw.view ===============================================================
testing bindings in #<module mw.view> ... ok
test view, expects "hoge" ==> ok
test view, expects "hogehoge" ==> ok
test view, expects "hogehogehoge" ==> ok
passed.
Testing mw.config =============================================================
testing bindings in #<module mw.config> ... ok
test define-config 1, expects x ==> ok
test define-config 2, expects "abc" ==> ok
test define-config (validator), expects 888 ==> ok
test initialize-config! 1, expects #f ==> ok
test initialize-config! 2, expects 20 ==> ok
test initialize-config! 3, expects ("jojo" "hoge") ==> ok
test with-config, expects (8 "jojo") ==> ok
passed.
Testing mw.entry ==============================================================
testing bindings in #<module mw.entry> ... ok
<entry-main 1>-----------------------------------------------------------------
test define-entry, expects "world!" ==> ok
test define-entry, expects "ABCDEFG" ==> ok
test define-entry, expects "ABCDEFG-ABCDEFG" ==> ok
test define-entry, expects "555" ==> ok
test define-entry, expects "ORAORA!" ==> ok
test define-entry, expects "Foo" ==> ok
test define-entry, expects "#f" ==> ok
test define-entry, expects "((hoge bar))" ==> ok
test define-entry, expects "hoge" ==> ok
test define-entry, expects "bar" ==> ok
test response header, expects "jojo" ==> ok
test view, expects "jojo" ==> ok
test error handler, expects "500 Internal Server Error" ==> ok
test error handler, expects "999 Test error" ==> ok
test error-view, expects "ORA!" ==> ok
passed.
Testing mw.generator ==========================================================
testing bindings in #<module mw.generator> ... ok
<session 1>--------------------------------------------------------------------
Create  generator.tmp/hoge :mode 600
test make file exists?, expects #t ==> ok
test make file mode?, expects 384 ==> ok
test make file content?, expects "HOGE" ==> ok
Create! generator.tmp/hoge :mode 644
test override file!, expects "hoge" ==> ok
Create  generator.tmp/bar/ :mode 600
test make directory exists?, expects #t ==> ok
test make directory mode?, expects 384 ==> ok
<session 2>--------------------------------------------------------------------
Create  generator.tmp/bar/ :mode 755
Create  generator.tmp/bar/hoge :mode 644
Create  generator.tmp/bar/jojo :mode 644
test recursion directory, expects #t ==> ok
passed.
Testing mw.interp.json ========================================================
testing bindings in #<module mw.interp.json> ... ok
test sexp->json, expects "{\"bar\":8,\"hoge\":[\"a\",\"b\"]}" ==> ok
passed.
Testing mw.interp.sxml ========================================================
testing bindings in #<module mw.interp.sxml> ... ok
test sxml->xml, expects "<a hoge='bar -&gt;'>&lt;- abc</a>" ==> ok
test interp-sxml, expects (jojo (ORA "MUDAMUDAMUDA!")) ==> ok
test make-interp-sxml, expects (hoge "ab" (a (|@| (hoge "bar ->")) "abc ->")) ==> ok
test top-level attribute, expects (hoge (|@| (aaa "aaa"))) ==> ok
passed.
Testing mw.interp =============================================================
testing bindings in #<module mw.interp> ... ok
test interp-generic, expects (2 2 2) ==> ok
passed.
Testing mw.mime-type ==========================================================
testing bindings in #<module mw.mime-type> ... ok
test get-mime-type, expects ("text/html" "application/pdf") ==> ok
test file-mime-type, expects "application/rdf+xml" ==> ok
test add-mime-type!, expects ("application/hoge" "application/hoge") ==> ok
passed.
Testing mw.persistent =========================================================
testing bindings in #<module mw.persistent> ... ok
test creating database, expects #t ==> ok
test creating & persistent, expects "hoge" ==> ok
test change instance, expects 99 ==> ok
test serialize <persistent>, expects #t ==> ok
test serialize <hash-table>, expects #t ==> ok
test Collection, expects ("taro" "bar" "hoge") ==> ok
test Transaction 1, expects 99 ==> ok
test Transaction 2, expects #f ==> ok
test Delete, expects #f ==> ok
passed.
Testing mw.plugin =============================================================
testing bindings in #<module mw.plugin> ... ok
test initialize-plugins, expects (8) ==> ok
passed.
Testing mw.servelet.cgi =======================================================
testing bindings in #<module mw.servelet.cgi> ... ok
test run cgi-servelet, expects "HOGE" ==> ok
passed.
Testing mw.servelet.fs ========================================================
testing bindings in #<module mw.servelet.fs> ... ok
test GET /hoge.text, expects #t ==> ok
test GET /, expects #t ==> ok
test Not found, expects "404" ==> ok
test Forbidden, expects "403" ==> ok
passed.
Testing mw.httpd ==============================================================
testing bindings in #<module mw.server.httpd> ... ok
<parse-request-line>-----------------------------------------------------------
test parse-request-line, expects ("GET" "/hoge" "HTTP/1.0") ==> ok
test parse-request-line, expects ("GET" "/hoge" "HTTP/1.1") ==> ok
test parse-request-line error HTTP/1.2?, expects #t ==> ok
<parse-request-uri>------------------------------------------------------------
test parse-request-uri /bar/hoge?jojo, expects ("bar" "/hoge" "jojo") ==> ok
test parse-request-uri /bar, expects ("bar" #f #f) ==> ok
test parse-request-uri /bar?jojo, expects ("bar" #f "jojo") ==> ok
test parse-request-uri /, expects ("" #f #f) ==> ok
test parse-request-uri /?ABC, expects ("" #f "ABC") ==> ok
<http-metavariables>-----------------------------------------------------------
test http-metavariables, expects () ==> ok
test http-metavariable-set! & ref, expects "ORAORA!!!" ==> ok
test http-metavariable-ref, expects #f ==> ok
<httpd>------------------------------------------------------------------------
test default servelet, expects "hoge" ==> ok
test servelet jojo, expects "ORAORA!!!" ==> ok
passed.
Testing mw.server.repl ========================================================
testing bindings in #<module mw.server.repl> ... ok
test repl-eval, expects "((8 . 8) 20)" ==> ok
test repl-eval (error), expects "*** ERROR: 8" ==> ok
passed.
Testing mw.server =============================================================
testing bindings in #<module mw.server> ... ok
test run-server, expects "2x2" ==> ok
passed.
Testing mw.set ================================================================
testing bindings in #<module mw.set> ... ok
test , expects (6 "scheme" "lisp" "elisp" "haskell" "sml" "ocaml") ==> ok
test subseq*, expects ("lisp" "elisp") ==> ok
test <class/set/set>, expects (4 . #t) ==> ok
test set-intersection, expects ("ocaml") ==> ok
test map-set$, expects ("object" "hoge" "jojo") ==> ok
test <elt> <= <set-set>, expects (#f #f) ==> ok
test delete! <elt>, expects #f ==> ok
test delete! <set>, expects #f ==> ok
test (<A> <- (subseq* <A> (- (size-of <A>) 2))), expects #f ==> ok
passed.
Testing mw.test.cgi ===========================================================
testing bindings in #<module mw.test.cgi> ... ok
test define-cgi-script, expects #t ==> ok
test call-with-cgi-script 1, expects "JOJO" ==> ok
test call-with-cgi-script 2, expects "abc" ==> ok
passed.
Testing mw.textlight ==========================================================
testing bindings in #<module mw.textlight> ... ok
test read h2, expects (h2 "Headline") ==> ok
test read h3, expects (h3 "Headline") ==> ok
test read h6, expects (h6 "Headline") ==> ok
test read List, expects (ol (li "hoge") (li (ol (li "hoge") (li "jojo"))) (li "bar") (li (ul (li "bar") (li "jojo")))) ==> ok
test read Paragraph, expects (p "hoge" "hoge") ==> ok
test read Preformatted, expects (pre " hoge" "\n" " hoge") ==> ok
test skip comment line, expects (p "hoge" "hoge") ==> ok
test read Macro [table], expects (table (tr (td "hoge") (td "bar")) (tr (td "bar") (td "hoge"))) ==> ok
test read Macro [table] th, expects (table (tr (th "hoge") (th "bar")) (tr (td "bar") (td "hoge"))) ==> ok
test read Macro [table caption], expects (table (caption "jojo") (tr (td "hoge") (td "bar")) (tr (td "bar") (td "hoge"))) ==> ok
test read Macro [dl], expects (dl (dt "hoge") (dd "bar") (dt "bar") (dd "hoge") (dt "huga") (dd "test jojo abc defg")) ==> ok
passed.
Testing mw.time.http ==========================================================
testing bindings in #<module mw.time.http> ... ok
test time->http-date, expects "Tue, 11 Oct 2005 09:52:12 GMT" ==> ok
passed.
Testing mw.time.w3cdtf ========================================================
testing bindings in #<module mw.time.w3cdtf> ... ok
test w3cdtf->time, expects #t ==> ok
test time->w3cdtf <> w3cdtf->time, expects "2005-08-21T17:38:30Z" ==> ok
test time->w3cdtf <local> w3cdtf->time, expects "2005-08-21T17:38:30+09:00" ==> ok
passed.
Testing mw.user ===============================================================
testing bindings in #<module mw.user> ... ok
test make-user, expects "hoge" ==> ok
test match-user 1, expects "hoge" ==> ok
test match-user 2, expects #f ==> ok
test match-user 3, expects "hoge" ==> ok
test user-password-change, expects (#f "hoge") ==> ok
passed.
Testing mw.util ===============================================================
testing bindings in #<module mw.util> ... ok
test get-error-string, expects "hoge" ==> ok
test get-error-string long-message, expects "*** ERROR: hoge" ==> ok
test check=>, expects a ==> ok
test let$, expects (1 2 3) ==> (1 2 3)ok
test and*=>, expects #\a ==> ok
test and*=>, expects #f ==> ok
test and=> 1, expects 20 ==> ok
test and=> 2, expects #f ==> ok
test and=> 3, expects 3 ==> ok
test receive-alist 1, expects (20 . 50) ==> ok
test receive-alist 2, expects (20 50) ==> ok
test receive-slot 1, expects (20 30 40) ==> ok
test receive-slot 2, expects (20 40 . 30) ==> ok
test slot-update!, expects 88 ==> ok
test define-table (eq?), expects 8 ==> ok
test define-table (string=?), expects 8 ==> ok
test define-table (), expects b ==> ok
test define-table (get x . def), expects "hoge" ==> ok
test define-table (add delete!), expects (80 . #f) ==> ok
test case*, expects ok ==> ok
passed.
Testing mw.view ===============================================================
testing bindings in #<module mw.view> ... ok
test view, expects "hoge" ==> ok
test view, expects "hogehoge" ==> ok
test view, expects "hogehogehoge" ==> ok
passed.
Testing mw.config =============================================================
testing bindings in #<module mw.config> ... ok
test define-config 1, expects x ==> ok
test define-config 2, expects "abc" ==> ok
test define-config (validator), expects 888 ==> ok
test initialize-config! 1, expects #f ==> ok
test initialize-config! 2, expects 20 ==> ok
test initialize-config! 3, expects ("jojo" "hoge") ==> ok
test with-config, expects (8 "jojo") ==> ok
passed.
Testing mw.entry ==============================================================
testing bindings in #<module mw.entry> ... ok
<entry-main 1>-----------------------------------------------------------------
test define-entry, expects "world!" ==> ok
test define-entry, expects "hello" ==> ok
test define-entry, expects "ABCDEFG-ABCDEFG" ==> ok
test define-entry, expects "555" ==> ok
test define-entry, expects "#f" ==> ok
test define-entry, expects "((hoge bar))" ==> ok
test define-entry, expects "hoge" ==> ok
test define-entry, expects "bar" ==> ok
test response header, expects "jojo" ==> ok
test view, expects "jojo" ==> ok
test error handler, expects "500 Internal Server Error" ==> ok
test error handler, expects "999 Test error" ==> ok
test error-view, expects "ORA!" ==> ok
passed.
Testing mw.generator ==========================================================
testing bindings in #<module mw.generator> ... ok
<session 1>--------------------------------------------------------------------
Create  generator.tmp/hoge :mode 600
test make file exists?, expects #t ==> ok
test make file mode?, expects 384 ==> ok
test make file content?, expects "HOGE" ==> ok
Create! generator.tmp/hoge :mode 644
test override file!, expects "hoge" ==> ok
Create  generator.tmp/bar/ :mode 600
test make directory exists?, expects #t ==> ok
test make directory mode?, expects 384 ==> ok
<session 2>--------------------------------------------------------------------
Create  generator.tmp/bar/ :mode 755
Create  generator.tmp/bar/hoge :mode 644
Create  generator.tmp/bar/jojo :mode 644
test recursion directory, expects #t ==> ok
passed.
Testing mw.interp.json ========================================================
testing bindings in #<module mw.interp.json> ... ok
test sexp->json, expects "{\"bar\":8,\"hoge\":[\"a\",\"b\"]}" ==> ok
passed.
Testing mw.interp.sxml ========================================================
testing bindings in #<module mw.interp.sxml> ... ok
test sxml->xml, expects "<a hoge='bar -&gt;'>&lt;- abc</a>" ==> ok
test interp-sxml, expects (jojo (ORA "MUDAMUDAMUDA!")) ==> ok
test make-interp-sxml, expects (hoge "ab" (a (|@| (hoge "bar ->")) "abc ->")) ==> ok
test top-level attribute, expects (hoge (|@| (aaa "aaa"))) ==> ok
passed.
Testing mw.interp =============================================================
testing bindings in #<module mw.interp> ... ok
test interp-generic, expects (2 2 2) ==> ok
passed.
Testing mw.mime-type ==========================================================
testing bindings in #<module mw.mime-type> ... ok
test get-mime-type, expects ("text/html" "application/pdf") ==> ok
test file-mime-type, expects "application/rdf+xml" ==> ok
test add-mime-type!, expects ("application/hoge" "application/hoge") ==> ok
passed.
Testing mw.persistent =========================================================
testing bindings in #<module mw.persistent> ... ok
test creating database, expects #t ==> ok
test creating & persistent, expects "hoge" ==> ok
test change instance, expects 99 ==> ok
test serialize <persistent>, expects #t ==> ok
test serialize <hash-table>, expects #t ==> ok
test Collection, expects ("taro" "bar" "hoge") ==> ok
test Transaction 1, expects 99 ==> ok
test Transaction 2, expects #f ==> ok
test Delete, expects #f ==> ok
passed.
Testing mw.plugin =============================================================
testing bindings in #<module mw.plugin> ... ok
test initialize-plugins, expects (8) ==> ok
passed.
Testing mw.servelet.cgi =======================================================
testing bindings in #<module mw.servelet.cgi> ... ok
test run cgi-servelet, expects "HOGE" ==> ok
passed.
Testing mw.servelet.fs ========================================================
testing bindings in #<module mw.servelet.fs> ... ok
test GET /hoge.text, expects #t ==> ok
test GET /, expects #t ==> ok
test Not found, expects "404" ==> ok
test Forbidden, expects "403" ==> ok
passed.
Testing mw.httpd ==============================================================
testing bindings in #<module mw.server.httpd> ... ok
<parse-request-line>-----------------------------------------------------------
test parse-request-line, expects ("GET" "/hoge" "HTTP/1.0") ==> ok
test parse-request-line, expects ("GET" "/hoge" "HTTP/1.1") ==> ok
test parse-request-line error HTTP/1.2?, expects #t ==> ok
<parse-request-uri>------------------------------------------------------------
test parse-request-uri /bar/hoge?jojo, expects ("bar" "/hoge" "jojo") ==> ok
test parse-request-uri /bar, expects ("bar" #f #f) ==> ok
test parse-request-uri /bar?jojo, expects ("bar" #f "jojo") ==> ok
test parse-request-uri /, expects ("" #f #f) ==> ok
test parse-request-uri /?ABC, expects ("" #f "ABC") ==> ok
<http-metavariables>-----------------------------------------------------------
test http-metavariables, expects () ==> ok
test http-metavariable-set! & ref, expects "ORAORA!!!" ==> ok
test http-metavariable-ref, expects #f ==> ok
<httpd>------------------------------------------------------------------------
test default servelet, expects "hoge" ==> ok
test servelet jojo, expects "ORAORA!!!" ==> ok
passed.
Testing mw.server.repl ========================================================
testing bindings in #<module mw.server.repl> ... ok
test repl-eval, expects "((8 . 8) 20)" ==> ok
test repl-eval (error), expects "*** ERROR: 8" ==> ok
passed.
Testing mw.server =============================================================
testing bindings in #<module mw.server> ... ok
test run-server, expects "2x2" ==> ok
passed.
Testing mw.set ================================================================
testing bindings in #<module mw.set> ... ok
test , expects (6 "scheme" "lisp" "elisp" "haskell" "sml" "ocaml") ==> ok
test subseq*, expects ("lisp" "elisp") ==> ok
test <class/set/set>, expects (4 . #t) ==> ok
test set-intersection, expects ("ocaml") ==> ok
test map-set$, expects ("object" "hoge" "jojo") ==> ok
test <elt> <= <set-set>, expects (#f #f) ==> ok
test delete! <elt>, expects #f ==> ok
test delete! <set>, expects #f ==> ok
test (<A> <- (subseq* <A> (- (size-of <A>) 2))), expects #f ==> ok
passed.
Testing mw.test.cgi ===========================================================
testing bindings in #<module mw.test.cgi> ... ok
test define-cgi-script, expects #t ==> ok
test call-with-cgi-script 1, expects "JOJO" ==> ok
test call-with-cgi-script 2, expects "abc" ==> ok
passed.
Testing mw.textlight ==========================================================
testing bindings in #<module mw.textlight> ... ok
test read h2, expects (h2 "Headline") ==> ok
test read h3, expects (h3 "Headline") ==> ok
test read h6, expects (h6 "Headline") ==> ok
test read List, expects (ol (li "hoge") (li (ol (li "hoge") (li "jojo"))) (li "bar") (li (ul (li "bar") (li "jojo")))) ==> ok
test read Paragraph, expects (p "hoge" "hoge") ==> ok
test read Preformatted, expects (pre " hoge" "\n" " hoge") ==> ok
test skip comment line, expects (p "hoge" "hoge") ==> ok
test read Macro [table], expects (table (tr (td "hoge") (td "bar")) (tr (td "bar") (td "hoge"))) ==> ok
test read Macro [table] th, expects (table (tr (th "hoge") (th "bar")) (tr (td "bar") (td "hoge"))) ==> ok
test read Macro [table caption], expects (table (caption "jojo") (tr (td "hoge") (td "bar")) (tr (td "bar") (td "hoge"))) ==> ok
test read Macro [dl], expects (dl (dt "hoge") (dd "bar") (dt "bar") (dd "hoge") (dt "huga") (dd "test jojo abc defg")) ==> ok
passed.
Testing mw.time.http ==========================================================
testing bindings in #<module mw.time.http> ... ok
test time->http-date, expects "Tue, 11 Oct 2005 09:52:12 GMT" ==> ok
passed.
Testing mw.time.w3cdtf ========================================================
testing bindings in #<module mw.time.w3cdtf> ... ok
test w3cdtf->time, expects #t ==> ok
test time->w3cdtf <> w3cdtf->time, expects "2005-08-21T17:38:30Z" ==> ok
test time->w3cdtf <local> w3cdtf->time, expects "2005-08-21T17:38:30+09:00" ==> ok
passed.
Testing mw.user ===============================================================
testing bindings in #<module mw.user> ... ok
test make-user, expects "hoge" ==> ok
test match-user 1, expects "hoge" ==> ok
test match-user 2, expects #f ==> ok
test match-user 3, expects "hoge" ==> ok
test user-password-change, expects (#f "hoge") ==> ok
passed.
Testing mw.util ===============================================================
testing bindings in #<module mw.util> ... ok
test get-error-string, expects "hoge" ==> ok
test get-error-string long-message, expects "*** ERROR: hoge" ==> ok
test check=>, expects a ==> ok
test let$, expects (1 2 3) ==> (1 2 3)ok
test and*=>, expects #\a ==> ok
test and*=>, expects #f ==> ok
test and=> 1, expects 20 ==> ok
test and=> 2, expects #f ==> ok
test and=> 3, expects 3 ==> ok
test receive-alist 1, expects (20 . 50) ==> ok
test receive-alist 2, expects (20 50) ==> ok
test receive-slot 1, expects (20 30 40) ==> ok
test receive-slot 2, expects (20 40 . 30) ==> ok
test slot-update!, expects 88 ==> ok
test define-table (eq?), expects 8 ==> ok
test define-table (string=?), expects 8 ==> ok
test define-table (), expects b ==> ok
test define-table (get x . def), expects "hoge" ==> ok
test define-table (add delete!), expects (80 . #f) ==> ok
test case*, expects ok ==> ok
passed.
Testing mw.view ===============================================================
testing bindings in #<module mw.view> ... ok
test view, expects "hoge" ==> ok
test view, expects "hogehoge" ==> ok
passed.
Testing mw.config =============================================================
testing bindings in #<module mw.config> ... ok
test define-config 1, expects x ==> ok
test define-config 2, expects "abc" ==> ok
test define-config (validator), expects 888 ==> ok
test initialize-config! 1, expects #f ==> ok
test initialize-config! 2, expects 20 ==> ok
test initialize-config! 3, expects ("jojo" "hoge") ==> ok
test with-config, expects (8 "jojo") ==> ok
passed.
Testing mw.entry ==============================================================
testing bindings in #<module mw.entry> ... ok
<entry-main 1>-----------------------------------------------------------------
test define-entry, expects "world!" ==> ok
test define-entry, expects "hello" ==> ok
test define-entry, expects "ABCDEFG-ABCDEFG" ==> ok
test define-entry, expects "555" ==> ok
test define-entry, expects "#f" ==> ok
test define-entry, expects "((hoge bar))" ==> ok
test define-entry, expects "hoge" ==> ok
test define-entry, expects "bar" ==> ok
test response header, expects "jojo" ==> ok
test view, expects "jojo" ==> ok
test error handler, expects "500 Internal Server Error" ==> ok
test error handler, expects "999 Test error" ==> ok
test error-view, expects "ORA!" ==> ok
passed.
Testing mw.generator ==========================================================
testing bindings in #<module mw.generator> ... ok
<session 1>--------------------------------------------------------------------
Create  generator.tmp/hoge :mode 600
test make file exists?, expects #t ==> ok
test make file mode?, expects 384 ==> ok
test make file content?, expects "HOGE" ==> ok
Create! generator.tmp/hoge :mode 644
test override file!, expects "hoge" ==> ok
Create  generator.tmp/bar/ :mode 600
test make directory exists?, expects #t ==> ok
test make directory mode?, expects 384 ==> ok
<session 2>--------------------------------------------------------------------
Create  generator.tmp/bar/ :mode 755
Create  generator.tmp/bar/hoge :mode 644
Create  generator.tmp/bar/jojo :mode 644
test recursion directory, expects #t ==> ok
passed.
Testing mw.interp.json ========================================================
testing bindings in #<module mw.interp.json> ... ok
test sexp->json, expects "{\"bar\":8,\"hoge\":[\"a\",\"b\"]}" ==> ok
passed.
Testing mw.interp.sxml ========================================================
testing bindings in #<module mw.interp.sxml> ... ok
test sxml->xml, expects "<a hoge='bar -&gt;'>&lt;- abc</a>" ==> ok
test interp-sxml, expects (jojo (ORA "MUDAMUDAMUDA!")) ==> ok
test make-interp-sxml, expects (hoge "ab" (a (|@| (hoge "bar ->")) "abc ->")) ==> ok
test top-level attribute, expects (hoge (|@| (aaa "aaa"))) ==> ok
passed.
Testing mw.interp =============================================================
testing bindings in #<module mw.interp> ... ok
test interp-generic, expects (2 2 2) ==> ok
passed.
Testing mw.mime-type ==========================================================
testing bindings in #<module mw.mime-type> ... ok
test get-mime-type, expects ("text/html" "application/pdf") ==> ok
test file-mime-type, expects "application/rdf+xml" ==> ok
test add-mime-type!, expects ("application/hoge" "application/hoge") ==> ok
passed.
Testing mw.persistent =========================================================
testing bindings in #<module mw.persistent> ... ok
test creating database, expects #t ==> ok
test creating & persistent, expects "hoge" ==> ok
test change instance, expects 99 ==> ok
test serialize <persistent>, expects #t ==> ok
test serialize <hash-table>, expects #t ==> ok
test Collection, expects ("taro" "bar" "hoge") ==> ok
test Transaction 1, expects 99 ==> ok
test Transaction 2, expects #f ==> ok
test Delete, expects #f ==> ok
passed.
Testing mw.plugin =============================================================
testing bindings in #<module mw.plugin> ... ok
test initialize-plugins, expects (8) ==> ok
passed.
Testing mw.servelet.cgi =======================================================
testing bindings in #<module mw.servelet.cgi> ... ok
test run cgi-servelet, expects "HOGE" ==> ok
passed.
Testing mw.servelet.fs ========================================================
testing bindings in #<module mw.servelet.fs> ... ok
test GET /hoge.text, expects #t ==> ok
test GET /, expects #t ==> ok
test Not found, expects "404" ==> ok
test Forbidden, expects "403" ==> ok
passed.
Testing mw.httpd ==============================================================
testing bindings in #<module mw.server.httpd> ... ok
<parse-request-line>-----------------------------------------------------------
test parse-request-line, expects ("GET" "/hoge" "HTTP/1.0") ==> ok
test parse-request-line, expects ("GET" "/hoge" "HTTP/1.1") ==> ok
test parse-request-line error HTTP/1.2?, expects #t ==> ok
<parse-request-uri>------------------------------------------------------------
test parse-request-uri /bar/hoge?jojo, expects ("bar" "/hoge" "jojo") ==> ok
test parse-request-uri /bar, expects ("bar" #f #f) ==> ok
test parse-request-uri /bar?jojo, expects ("bar" #f "jojo") ==> ok
test parse-request-uri /, expects ("" #f #f) ==> ok
test parse-request-uri /?ABC, expects ("" #f "ABC") ==> ok
<http-metavariables>-----------------------------------------------------------
test http-metavariables, expects () ==> ok
test http-metavariable-set! & ref, expects "ORAORA!!!" ==> ok
test http-metavariable-ref, expects #f ==> ok
<httpd>------------------------------------------------------------------------
test default servelet, expects "hoge" ==> ok
test servelet jojo, expects "ORAORA!!!" ==> ok
passed.
Testing mw.server.repl ========================================================
testing bindings in #<module mw.server.repl> ... ok
test repl-eval, expects "((8 . 8) 20)" ==> ok
test repl-eval (error), expects "*** ERROR: 8" ==> ok
passed.
Testing mw.server =============================================================
testing bindings in #<module mw.server> ... ok
test run-server, expects "2x2" ==> ok
passed.
Testing mw.set ================================================================
testing bindings in #<module mw.set> ... ok
test , expects (6 "scheme" "lisp" "elisp" "haskell" "sml" "ocaml") ==> ok
test subseq*, expects ("lisp" "elisp") ==> ok
test <class/set/set>, expects (4 . #t) ==> ok
test set-intersection, expects ("ocaml") ==> ok
test map-set$, expects ("object" "hoge" "jojo") ==> ok
test <elt> <= <set-set>, expects (#f #f) ==> ok
test delete! <elt>, expects #f ==> ok
test delete! <set>, expects #f ==> ok
test (<A> <- (subseq* <A> (- (size-of <A>) 2))), expects #f ==> ok
passed.
Testing mw.test.cgi ===========================================================
testing bindings in #<module mw.test.cgi> ... ok
test define-cgi-script, expects #t ==> ok
test call-with-cgi-script 1, expects "JOJO" ==> ok
test call-with-cgi-script 2, expects "abc" ==> ok
passed.
Testing mw.textlight ==========================================================
testing bindings in #<module mw.textlight> ... ok
test read h2, expects (h2 "Headline") ==> ok
test read h3, expects (h3 "Headline") ==> ok
test read h6, expects (h6 "Headline") ==> ok
test read List, expects (ol (li "hoge") (li (ol (li "hoge") (li "jojo"))) (li "bar") (li (ul (li "bar") (li "jojo")))) ==> ok
test read Paragraph, expects (p "hoge" "hoge") ==> ok
test read Preformatted, expects (pre " hoge" "\n" " hoge") ==> ok
test skip comment line, expects (p "hoge" "hoge") ==> ok
test read Macro [table], expects (table (tr (td "hoge") (td "bar")) (tr (td "bar") (td "hoge"))) ==> ok
test read Macro [table] th, expects (table (tr (th "hoge") (th "bar")) (tr (td "bar") (td "hoge"))) ==> ok
test read Macro [table caption], expects (table (caption "jojo") (tr (td "hoge") (td "bar")) (tr (td "bar") (td "hoge"))) ==> ok
test read Macro [dl], expects (dl (dt "hoge") (dd "bar") (dt "bar") (dd "hoge") (dt "huga") (dd "test jojo abc defg")) ==> ok
passed.
Testing mw.time.http ==========================================================
testing bindings in #<module mw.time.http> ... ok
test time->http-date, expects "Tue, 11 Oct 2005 09:52:12 GMT" ==> ok
passed.
Testing mw.time.w3cdtf ========================================================
testing bindings in #<module mw.time.w3cdtf> ... ok
test w3cdtf->time, expects #t ==> ok
test time->w3cdtf <> w3cdtf->time, expects "2005-08-21T17:38:30Z" ==> ok
test time->w3cdtf <local> w3cdtf->time, expects "2005-08-21T17:38:30+09:00" ==> ok
passed.
Testing mw.user ===============================================================
testing bindings in #<module mw.user> ... ok
test make-user, expects "hoge" ==> ok
test match-user 1, expects "hoge" ==> ok
test match-user 2, expects #f ==> ok
test match-user 3, expects "hoge" ==> ok
test user-password-change, expects (#f "hoge") ==> ok
passed.
Testing mw.util ===============================================================
testing bindings in #<module mw.util> ... ok
test get-error-string, expects "hoge" ==> ok
test get-error-string long-message, expects "*** ERROR: hoge" ==> ok
test check=>, expects a ==> ERROR: GOT (a b c)
test let$, expects (1 2 3) ==> (1 2 3)ok
test and*=>, expects #\a ==> ok
test and*=>, expects #f ==> ok
test and=> 1, expects 20 ==> ok
test and=> 2, expects #f ==> ok
test and=> 3, expects 3 ==> ok
test receive-alist 1, expects (20 . 50) ==> ok
test receive-alist 2, expects (20 50) ==> ok
test receive-slot 1, expects (20 30 40) ==> ok
test receive-slot 2, expects (20 40 . 30) ==> ok
test slot-update!, expects 88 ==> ok
test define-table (eq?), expects 8 ==> ok
test define-table (string=?), expects 8 ==> ok
test define-table (), expects b ==> ok
test define-table (get x . def), expects "hoge" ==> ok
test define-table (add delete!), expects (80 . #f) ==> ok
test case*, expects ok ==> ok
failed.
discrepancies found.  Errors are:
test check=>: expects a => got (a b c)
Testing mw.view ===============================================================
testing bindings in #<module mw.view> ... ok
test view, expects "hoge" ==> ok
test view, expects "hogehoge" ==> ok
passed.
Testing mw.config =============================================================
testing bindings in #<module mw.config> ... ok
test define-config 1, expects x ==> ok
test define-config 2, expects "abc" ==> ok
test define-config (validator), expects 888 ==> ok
test initialize-config! 1, expects #f ==> ok
test initialize-config! 2, expects 20 ==> ok
test initialize-config! 3, expects ("jojo" "hoge") ==> ok
test with-config, expects (8 "jojo") ==> ok
passed.
Testing mw.entry ==============================================================
testing bindings in #<module mw.entry> ... ok
<entry util>-------------------------------------------------------------------
test path-info->list, expects ("hoge" "bar") ==> ok
test path-info->list, expects ("hoge") ==> ok
test path-info->list, expects ("_") ==> ok
<entry-main>-------------------------------------------------------------------
test define-entry, expects "world!" ==> ok
test define-entry, expects "hello" ==> ok
test define-entry, expects "ABCDEFG-ABCDEFG" ==> ok
test define-entry, expects "555" ==> ok
test define-entry, expects "#f" ==> ok
test define-entry, expects "((hoge bar))" ==> ok
test define-entry, expects "hoge" ==> ok
test define-entry, expects "bar" ==> ok
test response header, expects "jojo" ==> ok
test view, expects "jojo" ==> ok
test error handler, expects "500 Internal Server Error" ==> ok
test error handler, expects "999 Test error" ==> ok
test error-view, expects "ORA!" ==> ok
passed.
Testing mw.generator ==========================================================
testing bindings in #<module mw.generator> ... ok
<session 1>--------------------------------------------------------------------
Create  generator.tmp/hoge :mode 600
test make file exists?, expects #t ==> ok
test make file mode?, expects 384 ==> ok
test make file content?, expects "HOGE" ==> ok
Create! generator.tmp/hoge :mode 644
test override file!, expects "hoge" ==> ok
Create  generator.tmp/bar/ :mode 600
test make directory exists?, expects #t ==> ok
test make directory mode?, expects 384 ==> ok
<session 2>--------------------------------------------------------------------
Create  generator.tmp/bar/ :mode 755
Create  generator.tmp/bar/hoge :mode 644
Create  generator.tmp/bar/jojo :mode 644
test recursion directory, expects #t ==> ok
passed.
Testing mw.interp.json ========================================================
testing bindings in #<module mw.interp.json> ... ok
test sexp->json, expects "{\"bar\":8,\"hoge\":[\"a\",\"b\"]}" ==> ok
passed.
Testing mw.interp.sxml ========================================================
testing bindings in #<module mw.interp.sxml> ... ok
test sxml->xml, expects "<a hoge='bar -&gt;'>&lt;- abc</a>" ==> ok
test interp-sxml, expects (jojo (ORA "MUDAMUDAMUDA!")) ==> ok
test make-interp-sxml, expects (hoge "ab" (a (|@| (hoge "bar ->")) "abc ->")) ==> ok
test top-level attribute, expects (hoge (|@| (aaa "aaa"))) ==> ok
passed.
Testing mw.interp =============================================================
testing bindings in #<module mw.interp> ... ok
test interp-generic, expects (2 2 2) ==> ok
passed.
Testing mw.mime-type ==========================================================
testing bindings in #<module mw.mime-type> ... ok
test get-mime-type, expects ("text/html" "application/pdf") ==> ok
test file-mime-type, expects "application/rdf+xml" ==> ok
test add-mime-type!, expects ("application/hoge" "application/hoge") ==> ok
passed.
Testing mw.persistent =========================================================
testing bindings in #<module mw.persistent> ... ok
test creating database, expects #t ==> ok
test creating & persistent, expects "hoge" ==> ok
test change instance, expects 99 ==> ok
test serialize <persistent>, expects #t ==> ok
test serialize <hash-table>, expects #t ==> ok
test Collection, expects ("taro" "bar" "hoge") ==> ok
test Transaction 1, expects 99 ==> ok
test Transaction 2, expects #f ==> ok
test Delete, expects #f ==> ok
passed.
Testing mw.plugin =============================================================
testing bindings in #<module mw.plugin> ... ok
test initialize-plugins, expects (8) ==> ok
passed.
Testing mw.servelet.cgi =======================================================
testing bindings in #<module mw.servelet.cgi> ... ok
test run cgi-servelet, expects "HOGE" ==> ok
passed.
Testing mw.servelet.fs ========================================================
testing bindings in #<module mw.servelet.fs> ... ok
test GET /hoge.text, expects #t ==> ok
test GET /, expects #t ==> ok
test Not found, expects "404" ==> ok
test Forbidden, expects "403" ==> ok
passed.
Testing mw.httpd ==============================================================
testing bindings in #<module mw.server.httpd> ... ok
<parse-request-line>-----------------------------------------------------------
test parse-request-line, expects ("GET" "/hoge" "HTTP/1.0") ==> ok
test parse-request-line, expects ("GET" "/hoge" "HTTP/1.1") ==> ok
test parse-request-line error HTTP/1.2?, expects #t ==> ok
<parse-request-uri>------------------------------------------------------------
test parse-request-uri /bar/hoge?jojo, expects ("bar" "/hoge" "jojo") ==> ok
test parse-request-uri /bar, expects ("bar" #f #f) ==> ok
test parse-request-uri /bar?jojo, expects ("bar" #f "jojo") ==> ok
test parse-request-uri /, expects ("" #f #f) ==> ok
test parse-request-uri /?ABC, expects ("" #f "ABC") ==> ok
<http-metavariables>-----------------------------------------------------------
test http-metavariables, expects () ==> ok
test http-metavariable-set! & ref, expects "ORAORA!!!" ==> ok
test http-metavariable-ref, expects #f ==> ok
<httpd>------------------------------------------------------------------------
test default servelet, expects "hoge" ==> ok
test servelet jojo, expects "ORAORA!!!" ==> ok
passed.
Testing mw.server.repl ========================================================
testing bindings in #<module mw.server.repl> ... ok
test repl-eval, expects "((8 . 8) 20)" ==> ok
test repl-eval (error), expects "*** ERROR: 8" ==> ok
passed.
Testing mw.server =============================================================
testing bindings in #<module mw.server> ... ok
test run-server, expects "2x2" ==> ok
passed.
Testing mw.set ================================================================
testing bindings in #<module mw.set> ... ok
test , expects (6 "scheme" "lisp" "elisp" "haskell" "sml" "ocaml") ==> ok
test subseq*, expects ("lisp" "elisp") ==> ok
test <class/set/set>, expects (4 . #t) ==> ok
test set-intersection, expects ("ocaml") ==> ok
test map-set$, expects ("object" "hoge" "jojo") ==> ok
test <elt> <= <set-set>, expects (#f #f) ==> ok
test delete! <elt>, expects #f ==> ok
test delete! <set>, expects #f ==> ok
test (<A> <- (subseq* <A> (- (size-of <A>) 2))), expects #f ==> ok
passed.
Testing mw.test.cgi ===========================================================
testing bindings in #<module mw.test.cgi> ... ok
test define-cgi-script, expects #t ==> ok
test call-with-cgi-script 1, expects "JOJO" ==> ok
test call-with-cgi-script 2, expects "abc" ==> ok
passed.
Testing mw.textlight ==========================================================
testing bindings in #<module mw.textlight> ... ok
test read h2, expects (h2 "Headline") ==> ok
test read h3, expects (h3 "Headline") ==> ok
test read h6, expects (h6 "Headline") ==> ok
test read List, expects (ol (li "hoge") (li (ol (li "hoge") (li "jojo"))) (li "bar") (li (ul (li "bar") (li "jojo")))) ==> ok
test read Paragraph, expects (p "hoge" "hoge") ==> ok
test read Preformatted, expects (pre " hoge" "\n" " hoge") ==> ok
test skip comment line, expects (p "hoge" "hoge") ==> ok
test read Macro [table], expects (table (tr (td "hoge") (td "bar")) (tr (td "bar") (td "hoge"))) ==> ok
test read Macro [table] th, expects (table (tr (th "hoge") (th "bar")) (tr (td "bar") (td "hoge"))) ==> ok
test read Macro [table caption], expects (table (caption "jojo") (tr (td "hoge") (td "bar")) (tr (td "bar") (td "hoge"))) ==> ok
test read Macro [dl], expects (dl (dt "hoge") (dd "bar") (dt "bar") (dd "hoge") (dt "huga") (dd "test jojo abc defg")) ==> ok
passed.
Testing mw.time.http ==========================================================
testing bindings in #<module mw.time.http> ... ok
test time->http-date, expects "Tue, 11 Oct 2005 09:52:12 GMT" ==> ok
passed.
Testing mw.time.w3cdtf ========================================================
testing bindings in #<module mw.time.w3cdtf> ... ok
test w3cdtf->time, expects #t ==> ok
test time->w3cdtf <> w3cdtf->time, expects "2005-08-21T17:38:30Z" ==> ok
test time->w3cdtf <local> w3cdtf->time, expects "2005-08-21T17:38:30+09:00" ==> ok
passed.
Testing mw.user ===============================================================
testing bindings in #<module mw.user> ... ok
test make-user, expects "hoge" ==> ok
test match-user 1, expects "hoge" ==> ok
test match-user 2, expects #f ==> ok
test match-user 3, expects "hoge" ==> ok
test user-password-change, expects (#f "hoge") ==> ok
passed.
Testing mw.util ===============================================================
testing bindings in #<module mw.util> ... ok
test get-error-string, expects "hoge" ==> ok
test get-error-string long-message, expects "*** ERROR: hoge" ==> ok
test check=>, expects (a b c) ==> ok
test check=>, expects #f ==> ok
test check=>, expects 88 ==> ok
test let$, expects (1 2 3) ==> (1 2 3)ok
test and*=>, expects #\a ==> ok
test and*=>, expects #f ==> ok
test and=> 1, expects 20 ==> ok
test and=> 2, expects #f ==> ok
test and=> 3, expects 3 ==> ok
test receive-alist 1, expects (20 . 50) ==> ok
test receive-alist 2, expects (20 50) ==> ok
test receive-slot 1, expects (20 30 40) ==> ok
test receive-slot 2, expects (20 40 . 30) ==> ok
test slot-update!, expects 88 ==> ok
test define-table (eq?), expects 8 ==> ok
test define-table (string=?), expects 8 ==> ok
test define-table (), expects b ==> ok
test define-table (get x . def), expects "hoge" ==> ok
test define-table (add delete!), expects (80 . #f) ==> ok
test case*, expects ok ==> ok
passed.
Testing mw.view ===============================================================
testing bindings in #<module mw.view> ... ok
test view, expects "hoge" ==> ok
test view, expects "hogehoge" ==> ok
passed.
Testing mw.config =============================================================
testing bindings in #<module mw.config> ... ok
test define-config 1, expects x ==> ok
test define-config 2, expects "abc" ==> ok
test define-config (validator), expects 888 ==> ok
test initialize-config! 1, expects #f ==> ok
test initialize-config! 2, expects 20 ==> ok
test initialize-config! 3, expects ("jojo" "hoge") ==> ok
test with-config, expects (8 "jojo") ==> ok
passed.
Testing mw.entry ==============================================================
testing bindings in #<module mw.entry> ... ok
<entry util>-------------------------------------------------------------------
test path-info->list, expects ("hoge" "bar") ==> ok
test path-info->list, expects ("hoge") ==> ok
test path-info->list, expects ("_") ==> ok
test path-info->list, expects ("_") ==> ok
<entry-main>-------------------------------------------------------------------
test define-entry, expects "world!" ==> ok
test define-entry, expects "hello" ==> ok
test define-entry, expects "ABCDEFG-ABCDEFG" ==> ok
test define-entry, expects "555" ==> ok
test define-entry, expects "#f" ==> ok
test define-entry, expects "((hoge bar))" ==> ok
test define-entry, expects "hoge" ==> ok
test define-entry, expects "bar" ==> ok
test response header, expects "jojo" ==> ok
test view, expects "jojo" ==> ok
test error handler, expects "500 Internal Server Error" ==> ok
test error handler, expects "999 Test error" ==> ok
test error-view, expects "ORA!" ==> ok
passed.
Testing mw.generator ==========================================================
testing bindings in #<module mw.generator> ... ok
<session 1>--------------------------------------------------------------------
Create  generator.tmp/hoge :mode 600
test make file exists?, expects #t ==> ok
test make file mode?, expects 384 ==> ok
test make file content?, expects "HOGE" ==> ok
Create! generator.tmp/hoge :mode 644
test override file!, expects "hoge" ==> ok
Create  generator.tmp/bar/ :mode 600
test make directory exists?, expects #t ==> ok
test make directory mode?, expects 384 ==> ok
<session 2>--------------------------------------------------------------------
Create  generator.tmp/bar/ :mode 755
Create  generator.tmp/bar/hoge :mode 644
Create  generator.tmp/bar/jojo :mode 644
test recursion directory, expects #t ==> ok
passed.
Testing mw.interp.json ========================================================
testing bindings in #<module mw.interp.json> ... ok
test sexp->json, expects "{\"bar\":8,\"hoge\":[\"a\",\"b\"]}" ==> ok
passed.
Testing mw.interp.sxml ========================================================
testing bindings in #<module mw.interp.sxml> ... ok
test sxml->xml, expects "<a hoge='bar -&gt;'>&lt;- abc</a>" ==> ok
test interp-sxml, expects (jojo (ORA "MUDAMUDAMUDA!")) ==> ok
test make-interp-sxml, expects (hoge "ab" (a (|@| (hoge "bar ->")) "abc ->")) ==> ok
test top-level attribute, expects (hoge (|@| (aaa "aaa"))) ==> ok
passed.
Testing mw.interp =============================================================
testing bindings in #<module mw.interp> ... ok
test interp-generic, expects (2 2 2) ==> ok
passed.
Testing mw.mime-type ==========================================================
testing bindings in #<module mw.mime-type> ... ok
test get-mime-type, expects ("text/html" "application/pdf") ==> ok
test file-mime-type, expects "application/rdf+xml" ==> ok
test add-mime-type!, expects ("application/hoge" "application/hoge") ==> ok
passed.
Testing mw.persistent =========================================================
testing bindings in #<module mw.persistent> ... ok
test creating database, expects #t ==> ok
test creating & persistent, expects "hoge" ==> ok
test change instance, expects 99 ==> ok
test serialize <persistent>, expects #t ==> ok
test serialize <hash-table>, expects #t ==> ok
test Collection, expects ("taro" "bar" "hoge") ==> ok
test Transaction 1, expects 99 ==> ok
test Transaction 2, expects #f ==> ok
test Delete, expects #f ==> ok
passed.
Testing mw.plugin =============================================================
testing bindings in #<module mw.plugin> ... ok
test initialize-plugins, expects (8) ==> ok
passed.
Testing mw.servelet.cgi =======================================================
testing bindings in #<module mw.servelet.cgi> ... ok
test run cgi-servelet, expects "HOGE" ==> ok
passed.
Testing mw.servelet.fs ========================================================
testing bindings in #<module mw.servelet.fs> ... ok
test GET /hoge.text, expects #t ==> ok
test GET /, expects #t ==> ok
test Not found, expects "404" ==> ok
test Forbidden, expects "403" ==> ok
passed.
Testing mw.httpd ==============================================================
testing bindings in #<module mw.server.httpd> ... ok
<parse-request-line>-----------------------------------------------------------
test parse-request-line, expects ("GET" "/hoge" "HTTP/1.0") ==> ok
test parse-request-line, expects ("GET" "/hoge" "HTTP/1.1") ==> ok
test parse-request-line error HTTP/1.2?, expects #t ==> ok
<parse-request-uri>------------------------------------------------------------
test parse-request-uri /bar/hoge?jojo, expects ("bar" "/hoge" "jojo") ==> ok
test parse-request-uri /bar, expects ("bar" #f #f) ==> ok
test parse-request-uri /bar?jojo, expects ("bar" #f "jojo") ==> ok
test parse-request-uri /, expects ("" #f #f) ==> ok
test parse-request-uri /?ABC, expects ("" #f "ABC") ==> ok
<http-metavariables>-----------------------------------------------------------
test http-metavariables, expects () ==> ok
test http-metavariable-set! & ref, expects "ORAORA!!!" ==> ok
test http-metavariable-ref, expects #f ==> ok
<httpd>------------------------------------------------------------------------
test default servelet, expects "hoge" ==> ok
test servelet jojo, expects "ORAORA!!!" ==> ok
passed.
Testing mw.server.repl ========================================================
testing bindings in #<module mw.server.repl> ... ok
test repl-eval, expects "((8 . 8) 20)" ==> ok
test repl-eval (error), expects "*** ERROR: 8" ==> ok
passed.
Testing mw.server =============================================================
testing bindings in #<module mw.server> ... ok
test run-server, expects "2x2" ==> ok
passed.
Testing mw.set ================================================================
testing bindings in #<module mw.set> ... ok
test , expects (6 "scheme" "lisp" "elisp" "haskell" "sml" "ocaml") ==> ok
test subseq*, expects ("lisp" "elisp") ==> ok
test <class/set/set>, expects (4 . #t) ==> ok
test set-intersection, expects ("ocaml") ==> ok
test map-set$, expects ("object" "hoge" "jojo") ==> ok
test <elt> <= <set-set>, expects (#f #f) ==> ok
test delete! <elt>, expects #f ==> ok
test delete! <set>, expects #f ==> ok
test (<A> <- (subseq* <A> (- (size-of <A>) 2))), expects #f ==> ok
passed.
Testing mw.test.cgi ===========================================================
testing bindings in #<module mw.test.cgi> ... ok
test define-cgi-script, expects #t ==> ok
test call-with-cgi-script 1, expects "JOJO" ==> ok
test call-with-cgi-script 2, expects "abc" ==> ok
passed.
Testing mw.textlight ==========================================================
testing bindings in #<module mw.textlight> ... ok
test read h2, expects (h2 "Headline") ==> ok
test read h3, expects (h3 "Headline") ==> ok
test read h6, expects (h6 "Headline") ==> ok
test read List, expects (ol (li "hoge") (li (ol (li "hoge") (li "jojo"))) (li "bar") (li (ul (li "bar") (li "jojo")))) ==> ok
test read Paragraph, expects (p "hoge" "hoge") ==> ok
test read Preformatted, expects (pre " hoge" "\n" " hoge") ==> ok
test skip comment line, expects (p "hoge" "hoge") ==> ok
test read Macro [table], expects (table (tr (td "hoge") (td "bar")) (tr (td "bar") (td "hoge"))) ==> ok
test read Macro [table] th, expects (table (tr (th "hoge") (th "bar")) (tr (td "bar") (td "hoge"))) ==> ok
test read Macro [table caption], expects (table (caption "jojo") (tr (td "hoge") (td "bar")) (tr (td "bar") (td "hoge"))) ==> ok
test read Macro [dl], expects (dl (dt "hoge") (dd "bar") (dt "bar") (dd "hoge") (dt "huga") (dd "test jojo abc defg")) ==> ok
passed.
Testing mw.time.http ==========================================================
testing bindings in #<module mw.time.http> ... ok
test time->http-date, expects "Tue, 11 Oct 2005 09:52:12 GMT" ==> ok
passed.
Testing mw.time.w3cdtf ========================================================
testing bindings in #<module mw.time.w3cdtf> ... ok
test w3cdtf->time, expects #t ==> ok
test time->w3cdtf <> w3cdtf->time, expects "2005-08-21T17:38:30Z" ==> ok
test time->w3cdtf <local> w3cdtf->time, expects "2005-08-21T17:38:30+09:00" ==> ok
passed.
Testing mw.user ===============================================================
testing bindings in #<module mw.user> ... ok
test make-user, expects "hoge" ==> ok
test match-user 1, expects "hoge" ==> ok
test match-user 2, expects #f ==> ok
test match-user 3, expects "hoge" ==> ok
test user-password-change, expects (#f "hoge") ==> ok
passed.
Testing mw.util ===============================================================
testing bindings in #<module mw.util> ... ok
test get-error-string, expects "hoge" ==> ok
test get-error-string long-message, expects "*** ERROR: hoge" ==> ok
test check=>, expects (a b c) ==> ok
test check=>, expects #f ==> ok
test check=>, expects 88 ==> ok
test let$, expects (1 2 3) ==> (1 2 3)ok
test and*=>, expects #\a ==> ok
test and*=>, expects #f ==> ok
test and=> 1, expects 20 ==> ok
test and=> 2, expects #f ==> ok
test and=> 3, expects 3 ==> ok
test receive-alist 1, expects (20 . 50) ==> ok
test receive-alist 2, expects (20 50) ==> ok
test receive-slot 1, expects (20 30 40) ==> ok
test receive-slot 2, expects (20 40 . 30) ==> ok
test slot-update!, expects 88 ==> ok
test define-table (eq?), expects 8 ==> ok
test define-table (string=?), expects 8 ==> ok
test define-table (), expects b ==> ok
test define-table (get x . def), expects "hoge" ==> ok
test define-table (add delete!), expects (80 . #f) ==> ok
test case*, expects ok ==> ok
passed.
Testing mw.view ===============================================================
testing bindings in #<module mw.view> ... ok
test view, expects "hoge" ==> ok
test view, expects "hogehoge" ==> ok
passed.
Testing mw.config =============================================================
testing bindings in #<module mw.config> ... ok
test define-config 1, expects x ==> ok
test define-config 2, expects "abc" ==> ok
test define-config (validator), expects 888 ==> ok
test initialize-config! 1, expects #f ==> ok
test initialize-config! 2, expects 20 ==> ok
test initialize-config! 3, expects ("jojo" "hoge") ==> ok
test with-config, expects (8 "jojo") ==> ok
passed.
Testing mw.entry ==============================================================
testing bindings in #<module mw.entry> ... ok
<entry util>-------------------------------------------------------------------
test path-info->list, expects ("hoge" "bar") ==> ok
test path-info->list, expects ("hoge") ==> ok
test path-info->list, expects ("_") ==> ok
test path-info->list, expects ("_") ==> ok
<entry-main>-------------------------------------------------------------------
test define-entry, expects "world!" ==> ok
test define-entry, expects "hello" ==> ok
test define-entry, expects "ABCDEFG-ABCDEFG" ==> ok
test define-entry, expects "555" ==> ok
test define-entry, expects "#f" ==> ok
test define-entry, expects "((hoge bar))" ==> ok
test define-entry, expects "hoge" ==> ok
test define-entry, expects "bar" ==> ok
test response header, expects "jojo" ==> ok
test view, expects "jojo" ==> ok
test error handler, expects "500 Internal Server Error" ==> ok
test error handler, expects "999 Test error" ==> ok
test error-view, expects "ORA!" ==> ok
passed.
Testing mw.generator ==========================================================
testing bindings in #<module mw.generator> ... ok
<session 1>--------------------------------------------------------------------
Create  generator.tmp/hoge :mode 600
test make file exists?, expects #t ==> ok
test make file mode?, expects 384 ==> ok
test make file content?, expects "HOGE" ==> ok
Create! generator.tmp/hoge :mode 644
test override file!, expects "hoge" ==> ok
Create  generator.tmp/bar/ :mode 600
test make directory exists?, expects #t ==> ok
test make directory mode?, expects 384 ==> ok
<session 2>--------------------------------------------------------------------
Create  generator.tmp/bar/ :mode 755
Create  generator.tmp/bar/hoge :mode 644
Create  generator.tmp/bar/jojo :mode 644
test recursion directory, expects #t ==> ok
passed.
Testing mw.interp.json ========================================================
testing bindings in #<module mw.interp.json> ... ok
test sexp->json, expects "{\"bar\":8,\"hoge\":[\"a\",\"b\"]}" ==> ok
passed.
Testing mw.interp.sxml ========================================================
testing bindings in #<module mw.interp.sxml> ... ok
test sxml->xml, expects "<a hoge='bar -&gt;'>&lt;- abc</a>" ==> ok
test interp-sxml, expects (jojo (ORA "MUDAMUDAMUDA!")) ==> ok
test make-interp-sxml, expects (hoge "ab" (a (|@| (hoge "bar ->")) "abc ->")) ==> ok
test top-level attribute, expects (hoge (|@| (aaa "aaa"))) ==> ok
passed.
Testing mw.interp =============================================================
testing bindings in #<module mw.interp> ... ok
test interp-generic, expects (2 2 2) ==> ok
passed.
Testing mw.mime-type ==========================================================
testing bindings in #<module mw.mime-type> ... ok
test get-mime-type, expects ("text/html" "application/pdf") ==> ok
test file-mime-type, expects "application/rdf+xml" ==> ok
test add-mime-type!, expects ("application/hoge" "application/hoge") ==> ok
passed.
Testing mw.persistent =========================================================
testing bindings in #<module mw.persistent> ... ok
test creating database, expects #t ==> ok
test creating & persistent, expects "hoge" ==> ok
test change instance, expects 99 ==> ok
test serialize <persistent>, expects #t ==> ok
test serialize <hash-table>, expects #t ==> ok
test Collection, expects ("taro" "bar" "hoge") ==> ok
test Transaction 1, expects 99 ==> ok
test Transaction 2, expects #f ==> ok
test Delete, expects #f ==> ok
passed.
Testing mw.plugin =============================================================
testing bindings in #<module mw.plugin> ... ok
test initialize-plugins, expects (8) ==> ok
passed.
Testing mw.servelet.cgi =======================================================
testing bindings in #<module mw.servelet.cgi> ... ok
test run cgi-servelet, expects "HOGE" ==> ok
passed.
Testing mw.servelet.fs ========================================================
testing bindings in #<module mw.servelet.fs> ... ok
test GET /hoge.text, expects #t ==> ok
test GET /, expects #t ==> ok
test Not found, expects "404" ==> ok
test Forbidden, expects "403" ==> ok
passed.
Testing mw.httpd ==============================================================
testing bindings in #<module mw.server.httpd> ... ok
<parse-request-line>-----------------------------------------------------------
test parse-request-line, expects ("GET" "/hoge" "HTTP/1.0") ==> ok
test parse-request-line, expects ("GET" "/hoge" "HTTP/1.1") ==> ok
test parse-request-line error HTTP/1.2?, expects #t ==> ok
<parse-request-uri>------------------------------------------------------------
test parse-request-uri /bar/hoge?jojo, expects ("bar" "/hoge" "jojo") ==> ok
test parse-request-uri /bar, expects ("bar" #f #f) ==> ok
test parse-request-uri /bar?jojo, expects ("bar" #f "jojo") ==> ok
test parse-request-uri /, expects ("" #f #f) ==> ok
test parse-request-uri /?ABC, expects ("" #f "ABC") ==> ok
<http-metavariables>-----------------------------------------------------------
test http-metavariables, expects () ==> ok
test http-metavariable-set! & ref, expects "ORAORA!!!" ==> ok
test http-metavariable-ref, expects #f ==> ok
<httpd>------------------------------------------------------------------------
test default servelet, expects "hoge" ==> ok
test servelet jojo, expects "ORAORA!!!" ==> ok
passed.
Testing mw.server.repl ========================================================
testing bindings in #<module mw.server.repl> ... ok
test repl-eval, expects "((8 . 8) 20)" ==> ok
test repl-eval (error), expects "*** ERROR: 8" ==> ok
passed.
Testing mw.server =============================================================
testing bindings in #<module mw.server> ... ok
test run-server, expects "2x2" ==> ok
passed.
Testing mw.set ================================================================
testing bindings in #<module mw.set> ... ok
test , expects (6 "scheme" "lisp" "elisp" "haskell" "sml" "ocaml") ==> ok
test subseq*, expects ("lisp" "elisp") ==> ok
test <class/set/set>, expects (4 . #t) ==> ok
test set-intersection, expects ("ocaml") ==> ok
test map-set$, expects ("object" "hoge" "jojo") ==> ok
test <elt> <= <set-set>, expects (#f #f) ==> ok
test delete! <elt>, expects #f ==> ok
test delete! <set>, expects #f ==> ok
test (<A> <- (subseq* <A> (- (size-of <A>) 2))), expects #f ==> ok
passed.
Testing mw.test.cgi ===========================================================
testing bindings in #<module mw.test.cgi> ... ok
test define-cgi-script, expects #t ==> ok
test call-with-cgi-script 1, expects "JOJO" ==> ok
test call-with-cgi-script 2, expects "abc" ==> ok
passed.
Testing mw.textlight ==========================================================
testing bindings in #<module mw.textlight> ... ok
test read h2, expects (h2 "Headline") ==> ok
test read h3, expects (h3 "Headline") ==> ok
test read h6, expects (h6 "Headline") ==> ok
test read List, expects (ol (li "hoge") (li (ol (li "hoge") (li "jojo"))) (li "bar") (li (ul (li "bar") (li "jojo")))) ==> ok
test read Paragraph, expects (p "hoge" "hoge") ==> ok
test read Preformatted, expects (pre " hoge" "\n" " hoge") ==> ok
test skip comment line, expects (p "hoge" "hoge") ==> ok
test read Macro [table], expects (table (tr (td "hoge") (td "bar")) (tr (td "bar") (td "hoge"))) ==> ok
test read Macro [table] th, expects (table (tr (th "hoge") (th "bar")) (tr (td "bar") (td "hoge"))) ==> ok
test read Macro [table caption], expects (table (caption "jojo") (tr (td "hoge") (td "bar")) (tr (td "bar") (td "hoge"))) ==> ok
test read Macro [dl], expects (dl (dt "hoge") (dd "bar") (dt "bar") (dd "hoge") (dt "huga") (dd "test jojo abc defg")) ==> ok
passed.
Testing mw.time.http ==========================================================
testing bindings in #<module mw.time.http> ... ok
test time->http-date, expects "Tue, 11 Oct 2005 09:52:12 GMT" ==> ok
passed.
Testing mw.time.w3cdtf ========================================================
testing bindings in #<module mw.time.w3cdtf> ... ok
test w3cdtf->time, expects #t ==> ok
test time->w3cdtf <> w3cdtf->time, expects "2005-08-21T17:38:30Z" ==> ok
test time->w3cdtf <local> w3cdtf->time, expects "2005-08-21T17:38:30+09:00" ==> ok
passed.
Testing mw.user ===============================================================
testing bindings in #<module mw.user> ... ok
test make-user, expects "hoge" ==> ok
test match-user 1, expects "hoge" ==> ok
test match-user 2, expects #f ==> ok
test match-user 3, expects "hoge" ==> ok
test user-password-change, expects (#f "hoge") ==> ok
passed.
Testing mw.util ===============================================================
testing bindings in #<module mw.util> ... ok
test get-error-string, expects "hoge" ==> ok
test get-error-string long-message, expects "*** ERROR: hoge" ==> ok
test check=>, expects (a b c) ==> ok
test check=>, expects #f ==> ok
test check=>, expects 88 ==> ok
test let$, expects (1 2 3) ==> (1 2 3)ok
test and*=>, expects #\a ==> ok
test and*=>, expects #f ==> ok
test and=> 1, expects 20 ==> ok
test and=> 2, expects #f ==> ok
test and=> 3, expects 3 ==> ok
test receive-alist 1, expects (20 . 50) ==> ok
test receive-alist 2, expects (20 50) ==> ok
test receive-slot 1, expects (20 30 40) ==> ok
test receive-slot 2, expects (20 40 . 30) ==> ok
test slot-update!, expects 88 ==> ok
test define-table (eq?), expects 8 ==> ok
test define-table (string=?), expects 8 ==> ok
test define-table (), expects b ==> ok
test define-table (get x . def), expects "hoge" ==> ok
test define-table (add delete!), expects (80 . #f) ==> ok
test case*, expects ok ==> ok
passed.
Testing mw.view ===============================================================
testing bindings in #<module mw.view> ... ok
test view, expects "hoge" ==> ok
test view, expects "hogehoge" ==> ok
passed.
Testing mw.config =============================================================
testing bindings in #<module mw.config> ... ok
test define-config 1, expects x ==> ok
test define-config 2, expects "abc" ==> ok
test define-config (validator), expects 888 ==> ok
test initialize-config! 1, expects #f ==> ok
test initialize-config! 2, expects 20 ==> ok
test initialize-config! 3, expects ("jojo" "hoge") ==> ok
test with-config, expects (8 "jojo") ==> ok
passed.
Testing mw.entry ==============================================================
testing bindings in #<module mw.entry> ... ok
<entry util>-------------------------------------------------------------------
test path-info->list, expects ("hoge" "bar") ==> ok
test path-info->list, expects ("hoge") ==> ok
test path-info->list, expects ("_") ==> ok
test path-info->list, expects ("_") ==> ok
<entry-main>-------------------------------------------------------------------
test define-entry, expects "world!" ==> ok
test define-entry, expects "hello" ==> ok
test define-entry, expects "ABCDEFG-ABCDEFG" ==> ok
test define-entry, expects "555" ==> ok
test define-entry, expects "#f" ==> ok
test define-entry, expects "((hoge bar))" ==> ok
test define-entry, expects "hoge" ==> ok
test define-entry, expects "bar" ==> ok
test response header, expects "jojo" ==> ok
test view, expects "jojo" ==> ok
test error handler, expects "500 Internal Server Error" ==> ok
test error handler, expects "999 Test error" ==> ok
test error-view, expects "ORA!" ==> ok
passed.
Testing mw.generator ==========================================================
testing bindings in #<module mw.generator> ... ok
<session 1>--------------------------------------------------------------------
Create  generator.tmp/hoge :mode 600
test make file exists?, expects #t ==> ok
test make file mode?, expects 384 ==> ok
test make file content?, expects "HOGE" ==> ok
Create! generator.tmp/hoge :mode 644
test override file!, expects "hoge" ==> ok
Create  generator.tmp/bar/ :mode 600
test make directory exists?, expects #t ==> ok
test make directory mode?, expects 384 ==> ok
<session 2>--------------------------------------------------------------------
Create  generator.tmp/bar/ :mode 755
Create  generator.tmp/bar/hoge :mode 644
Create  generator.tmp/bar/jojo :mode 644
test recursion directory, expects #t ==> ok
passed.
Testing mw.interp.json ========================================================
testing bindings in #<module mw.interp.json> ... ok
test sexp->json, expects "{\"bar\":8,\"hoge\":[\"a\",\"b\"]}" ==> ok
passed.
Testing mw.interp.sxml ========================================================
testing bindings in #<module mw.interp.sxml> ... ok
test sxml->xml, expects "<a hoge='bar -&gt;'>&lt;- abc</a>" ==> ok
test interp-sxml, expects (jojo (ORA "MUDAMUDAMUDA!")) ==> ok
test make-interp-sxml, expects (hoge "ab" (a (|@| (hoge "bar ->")) "abc ->")) ==> ok
test top-level attribute, expects (hoge (|@| (aaa "aaa"))) ==> ok
passed.
Testing mw.interp =============================================================
testing bindings in #<module mw.interp> ... ok
test interp-generic, expects (2 2 2) ==> ok
passed.
Testing mw.mime-type ==========================================================
testing bindings in #<module mw.mime-type> ... ok
test get-mime-type, expects ("text/html" "application/pdf") ==> ok
test file-mime-type, expects "application/rdf+xml" ==> ok
test add-mime-type!, expects ("application/hoge" "application/hoge") ==> ok
passed.
Testing mw.persistent =========================================================
testing bindings in #<module mw.persistent> ... ok
test creating database, expects #t ==> ok
test creating & persistent, expects "hoge" ==> ok
test change instance, expects 99 ==> ok
test serialize <persistent>, expects #t ==> ok
test serialize <hash-table>, expects #t ==> ok
test Collection, expects ("taro" "bar" "hoge") ==> ok
test Transaction 1, expects 99 ==> ok
test Transaction 2, expects #f ==> ok
test Delete, expects #f ==> ok
passed.
Testing mw.plugin =============================================================
testing bindings in #<module mw.plugin> ... ok
test initialize-plugins, expects (8) ==> ok
passed.
Testing mw.servelet.cgi =======================================================
testing bindings in #<module mw.servelet.cgi> ... ok
test run cgi-servelet, expects "HOGE" ==> ok
passed.
Testing mw.servelet.fs ========================================================
testing bindings in #<module mw.servelet.fs> ... ok
test GET /hoge.text, expects #t ==> ok
test GET /, expects #t ==> ok
test Not found, expects "404" ==> ok
test Forbidden, expects "403" ==> ok
passed.
Testing mw.httpd ==============================================================
testing bindings in #<module mw.server.httpd> ... ok
<parse-request-line>-----------------------------------------------------------
test parse-request-line, expects ("GET" "/hoge" "HTTP/1.0") ==> ok
test parse-request-line, expects ("GET" "/hoge" "HTTP/1.1") ==> ok
test parse-request-line error HTTP/1.2?, expects #t ==> ok
<parse-request-uri>------------------------------------------------------------
test parse-request-uri /bar/hoge?jojo, expects ("bar" "/hoge" "jojo") ==> ok
test parse-request-uri /bar, expects ("bar" #f #f) ==> ok
test parse-request-uri /bar?jojo, expects ("bar" #f "jojo") ==> ok
test parse-request-uri /, expects ("" #f #f) ==> ok
test parse-request-uri /?ABC, expects ("" #f "ABC") ==> ok
<http-metavariables>-----------------------------------------------------------
test http-metavariables, expects () ==> ok
test http-metavariable-set! & ref, expects "ORAORA!!!" ==> ok
test http-metavariable-ref, expects #f ==> ok
<httpd>------------------------------------------------------------------------
test default servelet, expects "hoge" ==> ok
test servelet jojo, expects "ORAORA!!!" ==> ok
passed.
Testing mw.server.repl ========================================================
testing bindings in #<module mw.server.repl> ... ok
test repl-eval, expects "((8 . 8) 20)" ==> ok
test repl-eval (error), expects "*** ERROR: 8" ==> ok
passed.
Testing mw.server =============================================================
testing bindings in #<module mw.server> ... ok
test run-server, expects "2x2" ==> ok
passed.
Testing mw.set ================================================================
testing bindings in #<module mw.set> ... ok
test , expects (6 "scheme" "lisp" "elisp" "haskell" "sml" "ocaml") ==> ok
test subseq*, expects ("lisp" "elisp") ==> ok
test <class/set/set>, expects (4 . #t) ==> ok
test set-intersection, expects ("ocaml") ==> ok
test map-set$, expects ("object" "hoge" "jojo") ==> ok
test <elt> <= <set-set>, expects (#f #f) ==> ok
test delete! <elt>, expects #f ==> ok
test delete! <set>, expects #f ==> ok
test (<A> <- (subseq* <A> (- (size-of <A>) 2))), expects #f ==> ok
passed.
Testing mw.test.cgi ===========================================================
testing bindings in #<module mw.test.cgi> ... ok
test define-cgi-script, expects #t ==> ok
test call-with-cgi-script 1, expects "JOJO" ==> ok
test call-with-cgi-script 2, expects "abc" ==> ok
passed.
Testing mw.textlight ==========================================================
testing bindings in #<module mw.textlight> ... ok
test read h2, expects (h2 "Headline") ==> ok
test read h3, expects (h3 "Headline") ==> ok
test read h6, expects (h6 "Headline") ==> ok
test read List, expects (ol (li "hoge") (li (ol (li "hoge") (li "jojo"))) (li "bar") (li (ul (li "bar") (li "jojo")))) ==> ok
test read Paragraph, expects (p "hoge" "hoge") ==> ok
test read Preformatted, expects (pre " hoge" "\n" " hoge") ==> ok
test skip comment line, expects (p "hoge" "hoge") ==> ok
test read Macro [table], expects (table (tr (td "hoge") (td "bar")) (tr (td "bar") (td "hoge"))) ==> ok
test read Macro [table] th, expects (table (tr (th "hoge") (th "bar")) (tr (td "bar") (td "hoge"))) ==> ok
test read Macro [table caption], expects (table (caption "jojo") (tr (td "hoge") (td "bar")) (tr (td "bar") (td "hoge"))) ==> ok
test read Macro [dl], expects (dl (dt "hoge") (dd "bar") (dt "bar") (dd "hoge") (dt "huga") (dd "test jojo abc defg")) ==> ok
passed.
Testing mw.time.http ==========================================================
testing bindings in #<module mw.time.http> ... ok
test time->http-date, expects "Tue, 11 Oct 2005 09:52:12 GMT" ==> ok
passed.
Testing mw.time.w3cdtf ========================================================
testing bindings in #<module mw.time.w3cdtf> ... ok
test w3cdtf->time, expects #t ==> ok
test time->w3cdtf <> w3cdtf->time, expects "2005-08-21T17:38:30Z" ==> ok
test time->w3cdtf <local> w3cdtf->time, expects "2005-08-21T17:38:30+09:00" ==> ok
passed.
Testing mw.user ===============================================================
testing bindings in #<module mw.user> ... ok
test make-user, expects "hoge" ==> ok
test match-user 1, expects "hoge" ==> ok
test match-user 2, expects #f ==> ok
test match-user 3, expects "hoge" ==> ok
test user-password-change, expects (#f "hoge") ==> ok
passed.
Testing mw.util ===============================================================
testing bindings in #<module mw.util> ... ok
test get-error-string, expects "hoge" ==> ok
test get-error-string long-message, expects "*** ERROR: hoge" ==> ok
test check=>, expects (a b c) ==> ok
test check=>, expects #f ==> ok
test check=>, expects 88 ==> ok
test let$, expects (1 2 3) ==> (1 2 3)ok
test and*=>, expects #\a ==> ok
test and*=>, expects #f ==> ok
test and=> 1, expects 20 ==> ok
test and=> 2, expects #f ==> ok
test and=> 3, expects 3 ==> ok
test receive-alist 1, expects (20 . 50) ==> ok
test receive-alist 2, expects (20 50) ==> ok
test receive-slot 1, expects (20 30 40) ==> ok
test receive-slot 2, expects (20 40 . 30) ==> ok
test slot-update!, expects 88 ==> ok
test define-table (eq?), expects 8 ==> ok
test define-table (string=?), expects 8 ==> ok
test define-table (), expects b ==> ok
test define-table (get x . def), expects "hoge" ==> ok
test define-table (add delete!), expects (80 . #f) ==> ok
test case*, expects ok ==> ok
passed.
Testing mw.view ===============================================================
testing bindings in #<module mw.view> ... ok
test view, expects "hoge" ==> ok
test view, expects "hogehoge" ==> ok
passed.
Testing mw.config =============================================================
testing bindings in #<module mw.config> ... ok
test define-config 1, expects x ==> ok
test define-config 2, expects "abc" ==> ok
test define-config (validator), expects 888 ==> ok
test initialize-config! 1, expects #f ==> ok
test initialize-config! 2, expects 20 ==> ok
test initialize-config! 3, expects ("jojo" "hoge") ==> ok
test with-config, expects (8 "jojo") ==> ok
passed.
Testing mw.entry ==============================================================
testing bindings in #<module mw.entry> ... ok
<entry util>-------------------------------------------------------------------
test path-info->list, expects ("hoge" "bar") ==> ok
test path-info->list, expects ("hoge") ==> ok
test path-info->list, expects ("_") ==> ok
test path-info->list, expects ("_") ==> ok
<entry-main>-------------------------------------------------------------------
test define-entry, expects "world!" ==> ok
test define-entry, expects "hello" ==> ok
test define-entry, expects "ABCDEFG-ABCDEFG" ==> ok
test define-entry, expects "555" ==> ok
test define-entry, expects "#f" ==> ok
test define-entry, expects "((hoge bar))" ==> ok
test define-entry, expects "hoge" ==> ok
test define-entry, expects "bar" ==> ok
test response header, expects "jojo" ==> ok
test view, expects "jojo" ==> ok
test error handler, expects "500 Internal Server Error" ==> ok
test error handler, expects "999 Test error" ==> ok
test error-view, expects "ORA!" ==> ok
passed.
Testing mw.generator ==========================================================
testing bindings in #<module mw.generator> ... ok
<session 1>--------------------------------------------------------------------
Create  generator.tmp/hoge :mode 600
test make file exists?, expects #t ==> ok
test make file mode?, expects 384 ==> ok
test make file content?, expects "HOGE" ==> ok
Create! generator.tmp/hoge :mode 644
test override file!, expects "hoge" ==> ok
Create  generator.tmp/bar/ :mode 600
test make directory exists?, expects #t ==> ok
test make directory mode?, expects 384 ==> ok
<session 2>--------------------------------------------------------------------
Create  generator.tmp/bar/ :mode 755
Create  generator.tmp/bar/hoge :mode 644
Create  generator.tmp/bar/jojo :mode 644
test recursion directory, expects #t ==> ok
passed.
Testing mw.interp.json ========================================================
testing bindings in #<module mw.interp.json> ... ok
test sexp->json, expects "{\"bar\":8,\"hoge\":[\"a\",\"b\"]}" ==> ok
passed.
Testing mw.interp.sxml ========================================================
testing bindings in #<module mw.interp.sxml> ... ok
test sxml->xml, expects "<a hoge='bar -&gt;'>&lt;- abc</a>" ==> ok
test interp-sxml, expects (jojo (ORA "MUDAMUDAMUDA!")) ==> ok
test make-interp-sxml, expects (hoge "ab" (a (|@| (hoge "bar ->")) "abc ->")) ==> ok
test top-level attribute, expects (hoge (|@| (aaa "aaa"))) ==> ok
passed.
Testing mw.interp =============================================================
testing bindings in #<module mw.interp> ... ok
test interp-generic, expects (2 2 2) ==> ok
passed.
Testing mw.mime-type ==========================================================
testing bindings in #<module mw.mime-type> ... ok
test get-mime-type, expects ("text/html" "application/pdf") ==> ok
test file-mime-type, expects "application/rdf+xml" ==> ok
test add-mime-type!, expects ("application/hoge" "application/hoge") ==> ok
passed.
Testing mw.persistent =========================================================
testing bindings in #<module mw.persistent> ... ok
test creating database, expects #t ==> ok
test creating & persistent, expects "hoge" ==> ok
test change instance, expects 99 ==> ok
test serialize <persistent>, expects #t ==> ok
test serialize <hash-table>, expects #t ==> ok
test Collection, expects ("taro" "bar" "hoge") ==> ok
test Transaction 1, expects 99 ==> ok
test Transaction 2, expects #f ==> ok
test Delete, expects #f ==> ok
passed.
Testing mw.plugin =============================================================
testing bindings in #<module mw.plugin> ... ok
test initialize-plugins, expects (8) ==> ok
passed.
Testing mw.servelet.cgi =======================================================
testing bindings in #<module mw.servelet.cgi> ... ok
test run cgi-servelet, expects "HOGE" ==> ok
passed.
Testing mw.servelet.fs ========================================================
testing bindings in #<module mw.servelet.fs> ... ok
test GET /hoge.text, expects #t ==> ok
test GET /, expects #t ==> ok
test Not found, expects "404" ==> ok
test Forbidden, expects "403" ==> ok
passed.
Testing mw.httpd ==============================================================
testing bindings in #<module mw.server.httpd> ... ok
<parse-request-line>-----------------------------------------------------------
test parse-request-line, expects ("GET" "/hoge" "HTTP/1.0") ==> ok
test parse-request-line, expects ("GET" "/hoge" "HTTP/1.1") ==> ok
test parse-request-line error HTTP/1.2?, expects #t ==> ok
<parse-request-uri>------------------------------------------------------------
test parse-request-uri /bar/hoge?jojo, expects ("bar" "/hoge" "jojo") ==> ok
test parse-request-uri /bar, expects ("bar" #f #f) ==> ok
test parse-request-uri /bar?jojo, expects ("bar" #f "jojo") ==> ok
test parse-request-uri /, expects ("" #f #f) ==> ok
test parse-request-uri /?ABC, expects ("" #f "ABC") ==> ok
<http-metavariables>-----------------------------------------------------------
test http-metavariables, expects () ==> ok
test http-metavariable-set! & ref, expects "ORAORA!!!" ==> ok
test http-metavariable-ref, expects #f ==> ok
<httpd>------------------------------------------------------------------------
test default servelet, expects "hoge" ==> ok
test servelet jojo, expects "ORAORA!!!" ==> ok
passed.
Testing mw.server.repl ========================================================
testing bindings in #<module mw.server.repl> ... ok
test repl-eval, expects "((8 . 8) 20)" ==> ok
test repl-eval (error), expects "*** ERROR: 8" ==> ok
passed.
Testing mw.server =============================================================
testing bindings in #<module mw.server> ... ok
test run-server, expects "2x2" ==> ok
passed.
Testing mw.set ================================================================
testing bindings in #<module mw.set> ... ok
test , expects (6 "scheme" "lisp" "elisp" "haskell" "sml" "ocaml") ==> ok
test subseq*, expects ("lisp" "elisp") ==> ok
test <class/set/set>, expects (4 . #t) ==> ok
test set-intersection, expects ("ocaml") ==> ok
test map-set$, expects ("object" "hoge" "jojo") ==> ok
test <elt> <= <set-set>, expects (#f #f) ==> ok
test delete! <elt>, expects #f ==> ok
test delete! <set>, expects #f ==> ok
test (<A> <= (subseq* <A> (- (size-of <A>) 2))), expects #f ==> ok
test (<A> <= <null-set>), expects #f ==> ok
passed.
Testing mw.test.cgi ===========================================================
testing bindings in #<module mw.test.cgi> ... ok
test define-cgi-script, expects #t ==> ok
test call-with-cgi-script 1, expects "JOJO" ==> ok
test call-with-cgi-script 2, expects "abc" ==> ok
passed.
Testing mw.textlight ==========================================================
testing bindings in #<module mw.textlight> ... ok
test read h2, expects (h2 "Headline") ==> ok
test read h3, expects (h3 "Headline") ==> ok
test read h6, expects (h6 "Headline") ==> ok
test read List, expects (ol (li "hoge") (li (ol (li "hoge") (li "jojo"))) (li "bar") (li (ul (li "bar") (li "jojo")))) ==> ok
test read Paragraph, expects (p "hoge" "hoge") ==> ok
test read Preformatted, expects (pre " hoge" "\n" " hoge") ==> ok
test skip comment line, expects (p "hoge" "hoge") ==> ok
test read Macro [table], expects (table (tr (td "hoge") (td "bar")) (tr (td "bar") (td "hoge"))) ==> ok
test read Macro [table] th, expects (table (tr (th "hoge") (th "bar")) (tr (td "bar") (td "hoge"))) ==> ok
test read Macro [table caption], expects (table (caption "jojo") (tr (td "hoge") (td "bar")) (tr (td "bar") (td "hoge"))) ==> ok
test read Macro [dl], expects (dl (dt "hoge") (dd "bar") (dt "bar") (dd "hoge") (dt "huga") (dd "test jojo abc defg")) ==> ok
passed.
Testing mw.time.http ==========================================================
testing bindings in #<module mw.time.http> ... ok
test time->http-date, expects "Tue, 11 Oct 2005 09:52:12 GMT" ==> ok
passed.
Testing mw.time.w3cdtf ========================================================
testing bindings in #<module mw.time.w3cdtf> ... ok
test w3cdtf->time, expects #t ==> ok
test time->w3cdtf <> w3cdtf->time, expects "2005-08-21T17:38:30Z" ==> ok
test time->w3cdtf <local> w3cdtf->time, expects "2005-08-21T17:38:30+09:00" ==> ok
passed.
Testing mw.user ===============================================================
testing bindings in #<module mw.user> ... ok
test make-user, expects "hoge" ==> ok
test match-user 1, expects "hoge" ==> ok
test match-user 2, expects #f ==> ok
test match-user 3, expects "hoge" ==> ok
test user-password-change, expects (#f "hoge") ==> ok
passed.
Testing mw.util ===============================================================
testing bindings in #<module mw.util> ... ok
test get-error-string, expects "hoge" ==> ok
test get-error-string long-message, expects "*** ERROR: hoge" ==> ok
test check=>, expects (a b c) ==> ok
test check=>, expects #f ==> ok
test check=>, expects 88 ==> ok
test let$, expects (1 2 3) ==> (1 2 3)ok
test and*=>, expects #\a ==> ok
test and*=>, expects #f ==> ok
test and=> 1, expects 20 ==> ok
test and=> 2, expects #f ==> ok
test and=> 3, expects 3 ==> ok
test receive-alist 1, expects (20 . 50) ==> ok
test receive-alist 2, expects (20 50) ==> ok
test receive-slot 1, expects (20 30 40) ==> ok
test receive-slot 2, expects (20 40 . 30) ==> ok
test slot-update!, expects 88 ==> ok
test define-table (eq?), expects 8 ==> ok
test define-table (string=?), expects 8 ==> ok
test define-table (), expects b ==> ok
test define-table (get x . def), expects "hoge" ==> ok
test define-table (add delete!), expects (80 . #f) ==> ok
test case*, expects ok ==> ok
passed.
Testing mw.view ===============================================================
testing bindings in #<module mw.view> ... ok
test view, expects "hoge" ==> ok
test view, expects "hogehoge" ==> ok
passed.
Testing mw.config =============================================================
testing bindings in #<module mw.config> ... ok
test define-config 1, expects x ==> ok
test define-config 2, expects "abc" ==> ok
test define-config (validator), expects 888 ==> ok
test initialize-config! 1, expects #f ==> ok
test initialize-config! 2, expects 20 ==> ok
test initialize-config! 3, expects ("jojo" "hoge") ==> ok
test with-config, expects (8 "jojo") ==> ok
passed.
Testing mw.entry ==============================================================
testing bindings in #<module mw.entry> ... ok
<entry util>-------------------------------------------------------------------
test path-info->list, expects ("hoge" "bar") ==> ok
test path-info->list, expects ("hoge") ==> ok
test path-info->list, expects ("_") ==> ok
test path-info->list, expects ("_") ==> ok
<entry-main>-------------------------------------------------------------------
test define-entry, expects "world!" ==> ok
test define-entry, expects "hello" ==> ok
test define-entry, expects "ABCDEFG-ABCDEFG" ==> ok
test define-entry, expects "555" ==> ok
test define-entry, expects "#f" ==> ok
test define-entry, expects "((hoge bar))" ==> ok
test define-entry, expects "hoge" ==> ok
test define-entry, expects "bar" ==> ok
test response header, expects "jojo" ==> ok
test view, expects "jojo" ==> ok
test error handler, expects "500 Internal Server Error" ==> ok
test error handler, expects "999 Test error" ==> ok
test error-view, expects "ORA!" ==> ok
passed.
Testing mw.generator ==========================================================
testing bindings in #<module mw.generator> ... ok
<session 1>--------------------------------------------------------------------
Create  generator.tmp/hoge :mode 600
test make file exists?, expects #t ==> ok
test make file mode?, expects 384 ==> ok
test make file content?, expects "HOGE" ==> ok
Create! generator.tmp/hoge :mode 644
test override file!, expects "hoge" ==> ok
Create  generator.tmp/bar/ :mode 600
test make directory exists?, expects #t ==> ok
test make directory mode?, expects 384 ==> ok
<session 2>--------------------------------------------------------------------
Create  generator.tmp/bar/ :mode 755
Create  generator.tmp/bar/hoge :mode 644
Create  generator.tmp/bar/jojo :mode 644
test recursion directory, expects #t ==> ok
passed.
Testing mw.interp.json ========================================================
testing bindings in #<module mw.interp.json> ... ok
test sexp->json, expects "{\"bar\":8,\"hoge\":[\"a\",\"b\"]}" ==> ok
passed.
Testing mw.interp.sxml ========================================================
testing bindings in #<module mw.interp.sxml> ... ok
test sxml->xml, expects "<a hoge='bar -&gt;'>&lt;- abc</a>" ==> ok
test interp-sxml, expects (jojo (ORA "MUDAMUDAMUDA!")) ==> ok
test make-interp-sxml, expects (hoge "ab" (a (|@| (hoge "bar ->")) "abc ->")) ==> ok
test top-level attribute, expects (hoge (|@| (aaa "aaa"))) ==> ok
passed.
Testing mw.interp =============================================================
testing bindings in #<module mw.interp> ... ok
test interp-generic, expects (2 2 2) ==> ok
passed.
Testing mw.mime-type ==========================================================
testing bindings in #<module mw.mime-type> ... ok
test get-mime-type, expects ("text/html" "application/pdf") ==> ok
test file-mime-type, expects "application/rdf+xml" ==> ok
test add-mime-type!, expects ("application/hoge" "application/hoge") ==> ok
passed.
Testing mw.persistent =========================================================
testing bindings in #<module mw.persistent> ... ok
test creating database, expects #t ==> ok
test creating & persistent, expects "hoge" ==> ok
test change instance, expects 99 ==> ok
test serialize <persistent>, expects #t ==> ok
test serialize <hash-table>, expects #t ==> ok
test Collection, expects ("taro" "bar" "hoge") ==> ok
test Transaction 1, expects 99 ==> ok
test Transaction 2, expects #f ==> ok
test Delete, expects #f ==> ok
test Delete, expects #f ==> ok
passed.
Testing mw.plugin =============================================================
testing bindings in #<module mw.plugin> ... ok
test initialize-plugins, expects (8) ==> ok
passed.
Testing mw.servelet.cgi =======================================================
testing bindings in #<module mw.servelet.cgi> ... ok
test run cgi-servelet, expects "HOGE" ==> ok
passed.
Testing mw.servelet.fs ========================================================
testing bindings in #<module mw.servelet.fs> ... ok
test GET /hoge.text, expects #t ==> ok
test GET /, expects #t ==> ok
test Not found, expects "404" ==> ok
test Forbidden, expects "403" ==> ok
passed.
Testing mw.httpd ==============================================================
testing bindings in #<module mw.server.httpd> ... ok
<parse-request-line>-----------------------------------------------------------
test parse-request-line, expects ("GET" "/hoge" "HTTP/1.0") ==> ok
test parse-request-line, expects ("GET" "/hoge" "HTTP/1.1") ==> ok
test parse-request-line error HTTP/1.2?, expects #t ==> ok
<parse-request-uri>------------------------------------------------------------
test parse-request-uri /bar/hoge?jojo, expects ("bar" "/hoge" "jojo") ==> ok
test parse-request-uri /bar, expects ("bar" #f #f) ==> ok
test parse-request-uri /bar?jojo, expects ("bar" #f "jojo") ==> ok
test parse-request-uri /, expects ("" #f #f) ==> ok
test parse-request-uri /?ABC, expects ("" #f "ABC") ==> ok
<http-metavariables>-----------------------------------------------------------
test http-metavariables, expects () ==> ok
test http-metavariable-set! & ref, expects "ORAORA!!!" ==> ok
test http-metavariable-ref, expects #f ==> ok
<httpd>------------------------------------------------------------------------
test default servelet, expects "hoge" ==> ok
test servelet jojo, expects "ORAORA!!!" ==> ok
passed.
Testing mw.server.repl ========================================================
testing bindings in #<module mw.server.repl> ... ok
test repl-eval, expects "((8 . 8) 20)" ==> ok
test repl-eval (error), expects "*** ERROR: 8" ==> ok
passed.
Testing mw.server =============================================================
testing bindings in #<module mw.server> ... ok
test run-server, expects "2x2" ==> ok
passed.
Testing mw.set ================================================================
testing bindings in #<module mw.set> ... ok
test , expects (6 "scheme" "lisp" "elisp" "haskell" "sml" "ocaml") ==> ok
test subseq*, expects ("lisp" "elisp") ==> ok
test <class/set/set>, expects (4 . #t) ==> ok
test set-intersection, expects ("ocaml") ==> ok
test map-set$, expects ("object" "hoge" "jojo") ==> ok
test <elt> <= <set-set>, expects (#f #f) ==> ok
test delete! <elt>, expects #f ==> ok
test delete! <set>, expects #f ==> ok
test (<A> <= (subseq* <A> (- (size-of <A>) 2))), expects #f ==> ok
test (<A> <= <null-set>), expects #f ==> ok
passed.
Testing mw.test.cgi ===========================================================
testing bindings in #<module mw.test.cgi> ... ok
test define-cgi-script, expects #t ==> ok
test call-with-cgi-script 1, expects "JOJO" ==> ok
test call-with-cgi-script 2, expects "abc" ==> ok
passed.
Testing mw.textlight ==========================================================
testing bindings in #<module mw.textlight> ... ok
test read h2, expects (h2 "Headline") ==> ok
test read h3, expects (h3 "Headline") ==> ok
test read h6, expects (h6 "Headline") ==> ok
test read List, expects (ol (li "hoge") (li (ol (li "hoge") (li "jojo"))) (li "bar") (li (ul (li "bar") (li "jojo")))) ==> ok
test read Paragraph, expects (p "hoge" "hoge") ==> ok
test read Preformatted, expects (pre " hoge" "\n" " hoge") ==> ok
test skip comment line, expects (p "hoge" "hoge") ==> ok
test read Macro [table], expects (table (tr (td "hoge") (td "bar")) (tr (td "bar") (td "hoge"))) ==> ok
test read Macro [table] th, expects (table (tr (th "hoge") (th "bar")) (tr (td "bar") (td "hoge"))) ==> ok
test read Macro [table caption], expects (table (caption "jojo") (tr (td "hoge") (td "bar")) (tr (td "bar") (td "hoge"))) ==> ok
test read Macro [dl], expects (dl (dt "hoge") (dd "bar") (dt "bar") (dd "hoge") (dt "huga") (dd "test jojo abc defg")) ==> ok
passed.
Testing mw.time.http ==========================================================
testing bindings in #<module mw.time.http> ... ok
test time->http-date, expects "Tue, 11 Oct 2005 09:52:12 GMT" ==> ok
passed.
Testing mw.time.w3cdtf ========================================================
testing bindings in #<module mw.time.w3cdtf> ... ok
test w3cdtf->time, expects #t ==> ok
test time->w3cdtf <> w3cdtf->time, expects "2005-08-21T17:38:30Z" ==> ok
test time->w3cdtf <local> w3cdtf->time, expects "2005-08-21T17:38:30+09:00" ==> ok
passed.
Testing mw.user ===============================================================
testing bindings in #<module mw.user> ... ok
test make-user, expects "hoge" ==> ok
test match-user 1, expects "hoge" ==> ok
test match-user 2, expects #f ==> ok
test match-user 3, expects "hoge" ==> ok
test user-password-change, expects (#f "hoge") ==> ok
passed.
Testing mw.util ===============================================================
testing bindings in #<module mw.util> ... ok
test get-error-string, expects "hoge" ==> ok
test get-error-string long-message, expects "*** ERROR: hoge" ==> ok
test check=>, expects (a b c) ==> ok
test check=>, expects #f ==> ok
test check=>, expects 88 ==> ok
test let$, expects (1 2 3) ==> (1 2 3)ok
test and*=>, expects #\a ==> ok
test and*=>, expects #f ==> ok
test and=> 1, expects 20 ==> ok
test and=> 2, expects #f ==> ok
test and=> 3, expects 3 ==> ok
test receive-alist 1, expects (20 . 50) ==> ok
test receive-alist 2, expects (20 50) ==> ok
test receive-slot 1, expects (20 30 40) ==> ok
test receive-slot 2, expects (20 40 . 30) ==> ok
test slot-update!, expects 88 ==> ok
test define-table (eq?), expects 8 ==> ok
test define-table (string=?), expects 8 ==> ok
test define-table (), expects b ==> ok
test define-table (get x . def), expects "hoge" ==> ok
test define-table (add delete!), expects (80 . #f) ==> ok
test case*, expects ok ==> ok
passed.
Testing mw.view ===============================================================
testing bindings in #<module mw.view> ... ok
test view, expects "hoge" ==> ok
test view, expects "hogehoge" ==> ok
passed.
Testing mw.config =============================================================
testing bindings in #<module mw.config> ... ok
test define-config 1, expects x ==> ok
test define-config 2, expects "abc" ==> ok
test define-config (validator), expects 888 ==> ok
test initialize-config! 1, expects #f ==> ok
test initialize-config! 2, expects 20 ==> ok
test initialize-config! 3, expects ("jojo" "hoge") ==> ok
test with-config, expects (8 "jojo") ==> ok
passed.
Testing mw.entry ==============================================================
testing bindings in #<module mw.entry> ... ok
<entry util>-------------------------------------------------------------------
test path-info->list, expects ("hoge" "bar") ==> ok
test path-info->list, expects ("hoge") ==> ok
test path-info->list, expects ("_") ==> ok
test path-info->list, expects ("_") ==> ok
<entry-main>-------------------------------------------------------------------
test define-entry, expects "world!" ==> ok
test define-entry, expects "hello" ==> ok
test define-entry, expects "ABCDEFG-ABCDEFG" ==> ok
test define-entry, expects "555" ==> ok
test define-entry, expects "#f" ==> ok
test define-entry, expects "((hoge bar))" ==> ok
test define-entry, expects "hoge" ==> ok
test define-entry, expects "bar" ==> ok
test response header, expects "jojo" ==> ok
test view, expects "jojo" ==> ok
test error handler, expects "500 Internal Server Error" ==> ok
test error handler, expects "999 Test error" ==> ok
test error-view, expects "ORA!" ==> ok
passed.
Testing mw.generator ==========================================================
testing bindings in #<module mw.generator> ... ok
<session 1>--------------------------------------------------------------------
Create  generator.tmp/hoge :mode 600
test make file exists?, expects #t ==> ok
test make file mode?, expects 384 ==> ok
test make file content?, expects "HOGE" ==> ok
Create! generator.tmp/hoge :mode 644
test override file!, expects "hoge" ==> ok
Create  generator.tmp/bar/ :mode 600
test make directory exists?, expects #t ==> ok
test make directory mode?, expects 384 ==> ok
<session 2>--------------------------------------------------------------------
Create  generator.tmp/bar/ :mode 755
Create  generator.tmp/bar/hoge :mode 644
Create  generator.tmp/bar/jojo :mode 644
test recursion directory, expects #t ==> ok
passed.
Testing mw.interp.json ========================================================
testing bindings in #<module mw.interp.json> ... ok
test sexp->json, expects "{\"bar\":8,\"hoge\":[\"a\",\"b\"]}" ==> ok
passed.
Testing mw.interp.sxml ========================================================
testing bindings in #<module mw.interp.sxml> ... ok
test sxml->xml, expects "<a hoge='bar -&gt;'>&lt;- abc</a>" ==> ok
test interp-sxml, expects (jojo (ORA "MUDAMUDAMUDA!")) ==> ok
test make-interp-sxml, expects (hoge "ab" (a (|@| (hoge "bar ->")) "abc ->")) ==> ok
test top-level attribute, expects (hoge (|@| (aaa "aaa"))) ==> ok
passed.
Testing mw.interp =============================================================
testing bindings in #<module mw.interp> ... ok
test interp-generic, expects (2 2 2) ==> ok
passed.
Testing mw.mime-type ==========================================================
testing bindings in #<module mw.mime-type> ... ok
test get-mime-type, expects ("text/html" "application/pdf") ==> ok
test file-mime-type, expects "application/rdf+xml" ==> ok
test add-mime-type!, expects ("application/hoge" "application/hoge") ==> ok
passed.
Testing mw.persistent =========================================================
testing bindings in #<module mw.persistent> ... ok
test creating database, expects #t ==> ok
test creating & persistent, expects "hoge" ==> ok
test change instance, expects 99 ==> ok
test serialize <persistent>, expects #t ==> ok
test serialize <hash-table>, expects #t ==> ok
test Collection, expects ("taro" "bar" "hoge") ==> ok
test Transaction 1, expects 99 ==> ok
test Transaction 2, expects #f ==> ok
test Delete, expects #f ==> ok
test Delete, expects #f ==> ok
passed.
Testing mw.plugin =============================================================
testing bindings in #<module mw.plugin> ... ok
test initialize-plugins, expects (8) ==> ok
passed.
Testing mw.servelet.cgi =======================================================
testing bindings in #<module mw.servelet.cgi> ... ok
test run cgi-servelet, expects "HOGE" ==> ok
passed.
Testing mw.servelet.fs ========================================================
testing bindings in #<module mw.servelet.fs> ... ok
test GET /hoge.text, expects #t ==> ok
test GET /, expects #t ==> ok
test Not found, expects "404" ==> ok
test Forbidden, expects "403" ==> ok
passed.
Testing mw.httpd ==============================================================
testing bindings in #<module mw.server.httpd> ... ok
<parse-request-line>-----------------------------------------------------------
test parse-request-line, expects ("GET" "/hoge" "HTTP/1.0") ==> ok
test parse-request-line, expects ("GET" "/hoge" "HTTP/1.1") ==> ok
test parse-request-line error HTTP/1.2?, expects #t ==> ok
<parse-request-uri>------------------------------------------------------------
test parse-request-uri /bar/hoge?jojo, expects ("bar" "/hoge" "jojo") ==> ok
test parse-request-uri /bar, expects ("bar" #f #f) ==> ok
test parse-request-uri /bar?jojo, expects ("bar" #f "jojo") ==> ok
test parse-request-uri /, expects ("" #f #f) ==> ok
test parse-request-uri /?ABC, expects ("" #f "ABC") ==> ok
<http-metavariables>-----------------------------------------------------------
test http-metavariables, expects () ==> ok
test http-metavariable-set! & ref, expects "ORAORA!!!" ==> ok
test http-metavariable-ref, expects #f ==> ok
<httpd>------------------------------------------------------------------------
test default servelet, expects "hoge" ==> ok
test servelet jojo, expects "ORAORA!!!" ==> ok
passed.
Testing mw.server.repl ========================================================
testing bindings in #<module mw.server.repl> ... ok
test repl-eval, expects "((8 . 8) 20)" ==> ok
test repl-eval (error), expects "*** ERROR: 8" ==> ok
passed.
Testing mw.server =============================================================
testing bindings in #<module mw.server> ... ok
test run-server, expects "2x2" ==> ok
passed.
Testing mw.set ================================================================
testing bindings in #<module mw.set> ... ok
test , expects (6 "scheme" "lisp" "elisp" "haskell" "sml" "ocaml") ==> ok
test subseq*, expects ("lisp" "elisp") ==> ok
test <class/set/set>, expects (4 . #t) ==> ok
test set-intersection, expects ("ocaml") ==> ok
test map-set$, expects ("object" "hoge" "jojo") ==> ok
test <elt> <= <set-set>, expects (#f #f) ==> ok
test delete! <elt>, expects #f ==> ok
test delete! <set>, expects #f ==> ok
test (<A> <= (subseq* <A> (- (size-of <A>) 2))), expects #f ==> ok
passed.
Testing mw.test.cgi ===========================================================
testing bindings in #<module mw.test.cgi> ... ok
test define-cgi-script, expects #t ==> ok
test call-with-cgi-script 1, expects "JOJO" ==> ok
test call-with-cgi-script 2, expects "abc" ==> ok
passed.
Testing mw.textlight ==========================================================
testing bindings in #<module mw.textlight> ... ok
test read h2, expects (h2 "Headline") ==> ok
test read h3, expects (h3 "Headline") ==> ok
test read h6, expects (h6 "Headline") ==> ok
test read List, expects (ol (li "hoge") (li (ol (li "hoge") (li "jojo"))) (li "bar") (li (ul (li "bar") (li "jojo")))) ==> ok
test read Paragraph, expects (p "hoge" "hoge") ==> ok
test read Preformatted, expects (pre " hoge" "\n" " hoge") ==> ok
test skip comment line, expects (p "hoge" "hoge") ==> ok
test read Macro [table], expects (table (tr (td "hoge") (td "bar")) (tr (td "bar") (td "hoge"))) ==> ok
test read Macro [table] th, expects (table (tr (th "hoge") (th "bar")) (tr (td "bar") (td "hoge"))) ==> ok
test read Macro [table caption], expects (table (caption "jojo") (tr (td "hoge") (td "bar")) (tr (td "bar") (td "hoge"))) ==> ok
test read Macro [dl], expects (dl (dt "hoge") (dd "bar") (dt "bar") (dd "hoge") (dt "huga") (dd "test jojo abc defg")) ==> ok
passed.
Testing mw.time.http ==========================================================
testing bindings in #<module mw.time.http> ... ok
test time->http-date, expects "Tue, 11 Oct 2005 09:52:12 GMT" ==> ok
passed.
Testing mw.time.w3cdtf ========================================================
testing bindings in #<module mw.time.w3cdtf> ... ok
test w3cdtf->time, expects #t ==> ok
test time->w3cdtf <> w3cdtf->time, expects "2005-08-21T17:38:30Z" ==> ok
test time->w3cdtf <local> w3cdtf->time, expects "2005-08-21T17:38:30+09:00" ==> ok
passed.
Testing mw.user ===============================================================
testing bindings in #<module mw.user> ... ok
test make-user, expects "hoge" ==> ok
test match-user 1, expects "hoge" ==> ok
test match-user 2, expects #f ==> ok
test match-user 3, expects "hoge" ==> ok
test user-password-change, expects (#f "hoge") ==> ok
passed.
Testing mw.util ===============================================================
testing bindings in #<module mw.util> ... ok
test get-error-string, expects "hoge" ==> ok
test get-error-string long-message, expects "*** ERROR: hoge" ==> ok
test check=>, expects (a b c) ==> ok
test check=>, expects #f ==> ok
test check=>, expects 88 ==> ok
test let$, expects (1 2 3) ==> (1 2 3)ok
test and*=>, expects #\a ==> ok
test and*=>, expects #f ==> ok
test and=> 1, expects 20 ==> ok
test and=> 2, expects #f ==> ok
test and=> 3, expects 3 ==> ok
test receive-alist 1, expects (20 . 50) ==> ok
test receive-alist 2, expects (20 50) ==> ok
test receive-slot 1, expects (20 30 40) ==> ok
test receive-slot 2, expects (20 40 . 30) ==> ok
test slot-update!, expects 88 ==> ok
test define-table (eq?), expects 8 ==> ok
test define-table (string=?), expects 8 ==> ok
test define-table (), expects b ==> ok
test define-table (get x . def), expects "hoge" ==> ok
test define-table (add delete!), expects (80 . #f) ==> ok
test case*, expects ok ==> ok
passed.
Testing mw.view ===============================================================
testing bindings in #<module mw.view> ... ok
test view, expects "hoge" ==> ok
test view, expects "hogehoge" ==> ok
passed.
Testing mw.config =============================================================
testing bindings in #<module mw.config> ... ok
test define-config 1, expects x ==> ok
test define-config 2, expects "abc" ==> ok
test define-config (validator), expects 888 ==> ok
test initialize-config! 1, expects #f ==> ok
test initialize-config! 2, expects 20 ==> ok
test initialize-config! 3, expects ("jojo" "hoge") ==> ok
test with-config, expects (8 "jojo") ==> ok
passed.
Testing mw.entry ==============================================================
testing bindings in #<module mw.entry> ... ok
<entry util>-------------------------------------------------------------------
test path-info->list, expects ("hoge" "bar") ==> ok
test path-info->list, expects ("hoge") ==> ok
test path-info->list, expects ("_") ==> ok
test path-info->list, expects ("_") ==> ok
<entry-main>-------------------------------------------------------------------
test define-entry, expects "world!" ==> ok
test define-entry, expects "hello" ==> ok
test define-entry, expects "ABCDEFG-ABCDEFG" ==> ok
test define-entry, expects "555" ==> ok
test define-entry, expects "#f" ==> ok
test define-entry, expects "((hoge bar))" ==> ok
test define-entry, expects "hoge" ==> ok
test define-entry, expects "bar" ==> ok
test response header, expects "jojo" ==> ok
test view, expects "jojo" ==> ok
test error handler, expects "500 Internal Server Error" ==> ok
test error handler, expects "999 Test error" ==> ok
test error-view, expects "ORA!" ==> ok
passed.
Testing mw.generator ==========================================================
testing bindings in #<module mw.generator> ... ok
<session 1>--------------------------------------------------------------------
Create  generator.tmp/hoge :mode 600
test make file exists?, expects #t ==> ok
test make file mode?, expects 384 ==> ok
test make file content?, expects "HOGE" ==> ok
Create! generator.tmp/hoge :mode 644
test override file!, expects "hoge" ==> ok
Create  generator.tmp/bar/ :mode 600
test make directory exists?, expects #t ==> ok
test make directory mode?, expects 384 ==> ok
<session 2>--------------------------------------------------------------------
Create  generator.tmp/bar/ :mode 755
Create  generator.tmp/bar/hoge :mode 644
Create  generator.tmp/bar/jojo :mode 644
test recursion directory, expects #t ==> ok
passed.
Testing mw.interp.json ========================================================
testing bindings in #<module mw.interp.json> ... ok
test sexp->json, expects "{\"bar\":8,\"hoge\":[\"a\",\"b\"]}" ==> ok
passed.
Testing mw.interp.sxml ========================================================
testing bindings in #<module mw.interp.sxml> ... ok
test sxml->xml, expects "<a hoge='bar -&gt;'>&lt;- abc</a>" ==> ok
test interp-sxml, expects (jojo (ORA "MUDAMUDAMUDA!")) ==> ok
test make-interp-sxml, expects (hoge "ab" (a (|@| (hoge "bar ->")) "abc ->")) ==> ok
test top-level attribute, expects (hoge (|@| (aaa "aaa"))) ==> ok
passed.
Testing mw.interp =============================================================
testing bindings in #<module mw.interp> ... ok
test interp-generic, expects (2 2 2) ==> ok
passed.
Testing mw.mime-type ==========================================================
testing bindings in #<module mw.mime-type> ... ok
test get-mime-type, expects ("text/html" "application/pdf") ==> ok
test file-mime-type, expects "application/rdf+xml" ==> ok
test add-mime-type!, expects ("application/hoge" "application/hoge") ==> ok
passed.
Testing mw.persistent =========================================================
testing bindings in #<module mw.persistent> ... ok
test creating database, expects #t ==> ok
test creating & persistent, expects "hoge" ==> ok
test change instance, expects 99 ==> ok
test serialize <persistent>, expects #t ==> ok
test serialize <hash-table>, expects #t ==> ok
test Collection, expects ("taro" "bar" "hoge") ==> ok
test Transaction 1, expects 99 ==> ok
test Transaction 2, expects #f ==> ok
test Delete, expects #f ==> ok
test Delete, expects #f ==> ok
passed.
Testing mw.plugin =============================================================
testing bindings in #<module mw.plugin> ... ok
test initialize-plugins, expects (8) ==> ok
passed.
Testing mw.servelet.cgi =======================================================
testing bindings in #<module mw.servelet.cgi> ... ok
test run cgi-servelet, expects "HOGE" ==> ok
passed.
Testing mw.servelet.fs ========================================================
testing bindings in #<module mw.servelet.fs> ... ok
test GET /hoge.text, expects #t ==> ok
test GET /, expects #t ==> ok
test Not found, expects "404" ==> ok
test Forbidden, expects "403" ==> ok
passed.
Testing mw.httpd ==============================================================
testing bindings in #<module mw.server.httpd> ... ok
<parse-request-line>-----------------------------------------------------------
test parse-request-line, expects ("GET" "/hoge" "HTTP/1.0") ==> ok
test parse-request-line, expects ("GET" "/hoge" "HTTP/1.1") ==> ok
test parse-request-line error HTTP/1.2?, expects #t ==> ok
<parse-request-uri>------------------------------------------------------------
test parse-request-uri /bar/hoge?jojo, expects ("bar" "/hoge" "jojo") ==> ok
test parse-request-uri /bar, expects ("bar" #f #f) ==> ok
test parse-request-uri /bar?jojo, expects ("bar" #f "jojo") ==> ok
test parse-request-uri /, expects ("" #f #f) ==> ok
test parse-request-uri /?ABC, expects ("" #f "ABC") ==> ok
<http-metavariables>-----------------------------------------------------------
test http-metavariables, expects () ==> ok
test http-metavariable-set! & ref, expects "ORAORA!!!" ==> ok
test http-metavariable-ref, expects #f ==> ok
<httpd>------------------------------------------------------------------------
test default servelet, expects "hoge" ==> ok
test servelet jojo, expects "ORAORA!!!" ==> ok
passed.
Testing mw.server.repl ========================================================
testing bindings in #<module mw.server.repl> ... ok
test repl-eval, expects "((8 . 8) 20)" ==> ok
test repl-eval (error), expects "*** ERROR: 8" ==> ok
passed.
Testing mw.server =============================================================
testing bindings in #<module mw.server> ... ok
test run-server, expects "2x2" ==> ok
passed.
Testing mw.set ================================================================
testing bindings in #<module mw.set> ... ok
test , expects (6 "scheme" "lisp" "elisp" "haskell" "sml" "ocaml") ==> ok
test subseq*, expects ("lisp" "elisp") ==> ok
test <class/set/set>, expects (4 . #t) ==> ok
test set-intersection, expects ("ocaml") ==> ok
test map-set$, expects ("object" "hoge" "jojo") ==> ok
test <elt> <= <set-set>, expects (#f #f) ==> ok
test delete! <elt>, expects #f ==> ok
test delete! <set>, expects #f ==> ok
test (<A> <= (subseq* <A> (- (size-of <A>) 2))), expects #f ==> ok
passed.
Testing mw.test.cgi ===========================================================
testing bindings in #<module mw.test.cgi> ... ok
test define-cgi-script, expects #t ==> ok
test call-with-cgi-script 1, expects "JOJO" ==> ok
test call-with-cgi-script 2, expects "abc" ==> ok
passed.
Testing mw.textlight ==========================================================
testing bindings in #<module mw.textlight> ... ok
test read h2, expects (h2 "Headline") ==> ok
test read h3, expects (h3 "Headline") ==> ok
test read h6, expects (h6 "Headline") ==> ok
test read List, expects (ol (li "hoge") (li (ol (li "hoge") (li "jojo"))) (li "bar") (li (ul (li "bar") (li "jojo")))) ==> ok
test read Paragraph, expects (p "hoge" "hoge") ==> ok
test read Preformatted, expects (pre " hoge" "\n" " hoge") ==> ok
test skip comment line, expects (p "hoge" "hoge") ==> ok
test read Macro [table], expects (table (tr (td "hoge") (td "bar")) (tr (td "bar") (td "hoge"))) ==> ok
test read Macro [table] th, expects (table (tr (th "hoge") (th "bar")) (tr (td "bar") (td "hoge"))) ==> ok
test read Macro [table caption], expects (table (caption "jojo") (tr (td "hoge") (td "bar")) (tr (td "bar") (td "hoge"))) ==> ok
test read Macro [dl], expects (dl (dt "hoge") (dd "bar") (dt "bar") (dd "hoge") (dt "huga") (dd "test jojo abc defg")) ==> ok
passed.
Testing mw.time.http ==========================================================
testing bindings in #<module mw.time.http> ... ok
test time->http-date, expects "Tue, 11 Oct 2005 09:52:12 GMT" ==> ok
passed.
Testing mw.time.w3cdtf ========================================================
testing bindings in #<module mw.time.w3cdtf> ... ok
test w3cdtf->time, expects #t ==> ok
test time->w3cdtf <> w3cdtf->time, expects "2005-08-21T17:38:30Z" ==> ok
test time->w3cdtf <local> w3cdtf->time, expects "2005-08-21T17:38:30+09:00" ==> ok
passed.
Testing mw.user ===============================================================
testing bindings in #<module mw.user> ... ok
test make-user, expects "hoge" ==> ok
test match-user 1, expects "hoge" ==> ok
test match-user 2, expects #f ==> ok
test match-user 3, expects "hoge" ==> ok
test user-password-change, expects (#f "hoge") ==> ok
passed.
Testing mw.util ===============================================================
testing bindings in #<module mw.util> ... ok
test get-error-string, expects "hoge" ==> ok
test get-error-string long-message, expects "*** ERROR: hoge" ==> ok
test check=>, expects (a b c) ==> ok
test check=>, expects #f ==> ok
test check=>, expects 88 ==> ok
test let$, expects (1 2 3) ==> (1 2 3)ok
test and*=>, expects #\a ==> ok
test and*=>, expects #f ==> ok
test and=> 1, expects 20 ==> ok
test and=> 2, expects #f ==> ok
test and=> 3, expects 3 ==> ok
test receive-alist 1, expects (20 . 50) ==> ok
test receive-alist 2, expects (20 50) ==> ok
test receive-slot 1, expects (20 30 40) ==> ok
test receive-slot 2, expects (20 40 . 30) ==> ok
test slot-update!, expects 88 ==> ok
test define-table (eq?), expects 8 ==> ok
test define-table (string=?), expects 8 ==> ok
test define-table (), expects b ==> ok
test define-table (get x . def), expects "hoge" ==> ok
test define-table (add delete!), expects (80 . #f) ==> ok
test case*, expects ok ==> ok
passed.
Testing mw.view ===============================================================
testing bindings in #<module mw.view> ... ok
test view, expects "hoge" ==> ok
test view, expects "hogehoge" ==> ok
passed.
Testing mw.config =============================================================
testing bindings in #<module mw.config> ... ok
test define-config 1, expects x ==> ok
test define-config 2, expects "abc" ==> ok
test define-config (validator), expects 888 ==> ok
test initialize-config! 1, expects #f ==> ok
test initialize-config! 2, expects 20 ==> ok
test initialize-config! 3, expects ("jojo" "hoge") ==> ok
test with-config, expects (8 "jojo") ==> ok
passed.
Testing mw.entry ==============================================================
testing bindings in #<module mw.entry> ... ok
<entry util>-------------------------------------------------------------------
test path-info->list, expects ("hoge" "bar") ==> ok
test path-info->list, expects ("hoge") ==> ok
test path-info->list, expects ("_") ==> ok
test path-info->list, expects ("_") ==> ok
<entry-main>-------------------------------------------------------------------
test define-entry, expects "world!" ==> ok
test define-entry, expects "hello" ==> ok
test define-entry, expects "ABCDEFG-ABCDEFG" ==> ok
test define-entry, expects "555" ==> ok
test define-entry, expects "#f" ==> ok
test define-entry, expects "((hoge bar))" ==> ok
test define-entry, expects "hoge" ==> ok
test define-entry, expects "bar" ==> ok
test response header, expects "jojo" ==> ok
test view, expects "jojo" ==> ok
test error handler, expects "500 Internal Server Error" ==> ok
test error handler, expects "999 Test error" ==> ok
test error-view, expects "ORA!" ==> ok
test return #<undef>, expects ("200 OK" . "") ==> ok
passed.
Testing mw.generator ==========================================================
testing bindings in #<module mw.generator> ... ok
<session 1>--------------------------------------------------------------------
Create  generator.tmp/hoge :mode 600
test make file exists?, expects #t ==> ok
test make file mode?, expects 384 ==> ok
test make file content?, expects "HOGE" ==> ok
Create! generator.tmp/hoge :mode 644
test override file!, expects "hoge" ==> ok
Create  generator.tmp/bar/ :mode 600
test make directory exists?, expects #t ==> ok
test make directory mode?, expects 384 ==> ok
<session 2>--------------------------------------------------------------------
Create  generator.tmp/bar/ :mode 755
Create  generator.tmp/bar/hoge :mode 644
Create  generator.tmp/bar/jojo :mode 644
test recursion directory, expects #t ==> ok
passed.
Testing mw.interp.json ========================================================
testing bindings in #<module mw.interp.json> ... ok
test sexp->json, expects "{\"bar\":8,\"hoge\":[\"a\",\"b\"]}" ==> ok
passed.
Testing mw.interp.sxml ========================================================
testing bindings in #<module mw.interp.sxml> ... ok
test sxml->xml, expects "<a hoge='bar -&gt;'>&lt;- abc</a>" ==> ok
test interp-sxml, expects (jojo (ORA "MUDAMUDAMUDA!")) ==> ok
test make-interp-sxml, expects (hoge "ab" (a (|@| (hoge "bar ->")) "abc ->")) ==> ok
test top-level attribute, expects (hoge (|@| (aaa "aaa"))) ==> ok
passed.
Testing mw.interp =============================================================
testing bindings in #<module mw.interp> ... ok
test interp-generic, expects (2 2 2) ==> ok
passed.
Testing mw.mime-type ==========================================================
testing bindings in #<module mw.mime-type> ... ok
test get-mime-type, expects ("text/html" "application/pdf") ==> ok
test file-mime-type, expects "application/rdf+xml" ==> ok
test add-mime-type!, expects ("application/hoge" "application/hoge") ==> ok
passed.
Testing mw.persistent =========================================================
testing bindings in #<module mw.persistent> ... ok
test creating database, expects #t ==> ok
test creating & persistent, expects "hoge" ==> ok
test change instance, expects 99 ==> ok
test serialize <persistent>, expects #t ==> ok
test serialize <hash-table>, expects #t ==> ok
test Collection, expects ("taro" "bar" "hoge") ==> ok
test Transaction 1, expects 99 ==> ok
test Transaction 2, expects #f ==> ok
test Delete, expects #f ==> ok
test Delete, expects #f ==> ok
passed.
Testing mw.plugin =============================================================
testing bindings in #<module mw.plugin> ... ok
test initialize-plugins, expects (8) ==> ok
passed.
Testing mw.servelet.cgi =======================================================
testing bindings in #<module mw.servelet.cgi> ... ok
test run cgi-servelet, expects "HOGE" ==> ok
test run-cgi-script->string-list (using parameters), expects "GET" ==> ok
passed.
Testing mw.servelet.fs ========================================================
testing bindings in #<module mw.servelet.fs> ... ok
test GET /hoge.text, expects #t ==> ok
test GET /, expects #t ==> ok
test Not found, expects "404" ==> ok
test Forbidden, expects "403" ==> ok
passed.
Testing mw.httpd ==============================================================
testing bindings in #<module mw.server.httpd> ... ok
<parse-request-line>-----------------------------------------------------------
test parse-request-line, expects ("GET" "/hoge" "HTTP/1.0") ==> ok
test parse-request-line, expects ("GET" "/hoge" "HTTP/1.1") ==> ok
test parse-request-line error HTTP/1.2?, expects #t ==> ok
<parse-request-uri>------------------------------------------------------------
test parse-request-uri /bar/hoge?jojo, expects ("bar" "/hoge" "jojo") ==> ok
test parse-request-uri /bar, expects ("bar" #f #f) ==> ok
test parse-request-uri /bar?jojo, expects ("bar" #f "jojo") ==> ok
test parse-request-uri /, expects ("" #f #f) ==> ok
test parse-request-uri /?ABC, expects ("" #f "ABC") ==> ok
<http-metavariables>-----------------------------------------------------------
test http-metavariables, expects () ==> ok
test http-metavariable-set! & ref, expects "ORAORA!!!" ==> ok
test http-metavariable-ref, expects #f ==> ok
<httpd>------------------------------------------------------------------------
test default servelet, expects "hoge" ==> ok
test servelet jojo, expects "ORAORA!!!" ==> ok
passed.
Testing mw.server.repl ========================================================
testing bindings in #<module mw.server.repl> ... ok
test repl-eval, expects "((8 . 8) 20)" ==> ok
test repl-eval (error), expects "*** ERROR: 8" ==> ok
passed.
Testing mw.server =============================================================
testing bindings in #<module mw.server> ... ok
test run-server, expects "2x2" ==> ok
passed.
Testing mw.set ================================================================
testing bindings in #<module mw.set> ... ok
test , expects (6 "scheme" "lisp" "elisp" "haskell" "sml" "ocaml") ==> ok
test subseq*, expects ("lisp" "elisp") ==> ok
test <class/set/set>, expects (4 . #t) ==> ok
test set-intersection, expects ("ocaml") ==> ok
test map-set$, expects ("object" "hoge" "jojo") ==> ok
test <elt> <= <set-set>, expects (#f #f) ==> ok
test delete! <elt>, expects #f ==> ok
test delete! <set>, expects #f ==> ok
test (<A> <= (subseq* <A> (- (size-of <A>) 2))), expects #f ==> ok
passed.
Testing mw.test.cgi ===========================================================
testing bindings in #<module mw.test.cgi> ... ok
test define-cgi-script, expects #t ==> ok
test call-with-cgi-script 1, expects "JOJO" ==> ok
test call-with-cgi-script 2, expects "abc" ==> ok
passed.
Testing mw.textlight ==========================================================
testing bindings in #<module mw.textlight> ... ok
test read h2, expects (h2 "Headline") ==> ok
test read h3, expects (h3 "Headline") ==> ok
test read h6, expects (h6 "Headline") ==> ok
test read List, expects (ol (li "hoge") (li (ol (li "hoge") (li "jojo"))) (li "bar") (li (ul (li "bar") (li "jojo")))) ==> ok
test read Paragraph, expects (p "hoge" "hoge") ==> ok
test read Preformatted, expects (pre " hoge" "\n" " hoge") ==> ok
test skip comment line, expects (p "hoge" "hoge") ==> ok
test read Macro [table], expects (table (tr (td "hoge") (td "bar")) (tr (td "bar") (td "hoge"))) ==> ok
test read Macro [table] th, expects (table (tr (th "hoge") (th "bar")) (tr (td "bar") (td "hoge"))) ==> ok
test read Macro [table caption], expects (table (caption "jojo") (tr (td "hoge") (td "bar")) (tr (td "bar") (td "hoge"))) ==> ok
test read Macro [dl], expects (dl (dt "hoge") (dd "bar") (dt "bar") (dd "hoge") (dt "huga") (dd "test jojo abc defg")) ==> ok
passed.
Testing mw.time.http ==========================================================
testing bindings in #<module mw.time.http> ... ok
test time->http-date, expects "Tue, 11 Oct 2005 09:52:12 GMT" ==> ok
passed.
Testing mw.time.w3cdtf ========================================================
testing bindings in #<module mw.time.w3cdtf> ... ok
test w3cdtf->time, expects #t ==> ok
test time->w3cdtf <> w3cdtf->time, expects "2005-08-21T17:38:30Z" ==> ok
test time->w3cdtf <local> w3cdtf->time, expects "2005-08-21T17:38:30+09:00" ==> ok
passed.
Testing mw.user ===============================================================
testing bindings in #<module mw.user> ... ok
test make-user, expects "hoge" ==> ok
test match-user 1, expects "hoge" ==> ok
test match-user 2, expects #f ==> ok
test match-user 3, expects "hoge" ==> ok
test user-password-change, expects (#f "hoge") ==> ok
passed.
Testing mw.util ===============================================================
testing bindings in #<module mw.util> ... ok
test get-error-string, expects "hoge" ==> ok
test get-error-string long-message, expects "*** ERROR: hoge" ==> ok
test check=>, expects (a b c) ==> ok
test check=>, expects #f ==> ok
test check=>, expects 88 ==> ok
test let$, expects (1 2 3) ==> (1 2 3)ok
test and*=>, expects #\a ==> ok
test and*=>, expects #f ==> ok
test and=> 1, expects 20 ==> ok
test and=> 2, expects #f ==> ok
test and=> 3, expects 3 ==> ok
test receive-alist 1, expects (20 . 50) ==> ok
test receive-alist 2, expects (20 50) ==> ok
test receive-slot 1, expects (20 30 40) ==> ok
test receive-slot 2, expects (20 40 . 30) ==> ok
test slot-update!, expects 88 ==> ok
test define-table (eq?), expects 8 ==> ok
test define-table (string=?), expects 8 ==> ok
test define-table (), expects b ==> ok
test define-table (get x . def), expects "hoge" ==> ok
test define-table (add delete!), expects (80 . #f) ==> ok
test case*, expects ok ==> ok
passed.
Testing mw.view ===============================================================
testing bindings in #<module mw.view> ... ok
test view, expects "hoge" ==> ok
test view, expects "hogehoge" ==> ok
passed.
Testing mw.config =============================================================
testing bindings in #<module mw.config> ... ok
test define-config 1, expects x ==> ok
test define-config 2, expects "abc" ==> ok
test define-config (validator), expects 888 ==> ok
test initialize-config! 1, expects #f ==> ok
test initialize-config! 2, expects 20 ==> ok
test initialize-config! 3, expects ("jojo" "hoge") ==> ok
test with-config, expects (8 "jojo") ==> ok
passed.
Testing mw.entry ==============================================================
testing bindings in #<module mw.entry> ... Testing mw.generator ==========================================================
testing bindings in #<module mw.generator> ... ok
<session 1>--------------------------------------------------------------------
Create  generator.tmp/hoge :mode 600
test make file exists?, expects #t ==> ok
test make file mode?, expects 384 ==> ok
test make file content?, expects "HOGE" ==> ok
Create! generator.tmp/hoge :mode 644
test override file!, expects "hoge" ==> ok
Create  generator.tmp/bar/ :mode 600
test make directory exists?, expects #t ==> ok
test make directory mode?, expects 384 ==> ok
<session 2>--------------------------------------------------------------------
Create  generator.tmp/bar/ :mode 755
Create  generator.tmp/bar/hoge :mode 644
Create  generator.tmp/bar/jojo :mode 644
test recursion directory, expects #t ==> ok
passed.
Testing mw.interp.json ========================================================
testing bindings in #<module mw.interp.json> ... ok
test sexp->json, expects "{\"bar\":8,\"hoge\":[\"a\",\"b\"]}" ==> ok
passed.
Testing mw.interp.sxml ========================================================
testing bindings in #<module mw.interp.sxml> ... ok
test sxml->xml, expects "<a hoge='bar -&gt;'>&lt;- abc</a>" ==> ok
test interp-sxml, expects (jojo (ORA "MUDAMUDAMUDA!")) ==> ok
test make-interp-sxml, expects (hoge "ab" (a (|@| (hoge "bar ->")) "abc ->")) ==> ok
test top-level attribute, expects (hoge (|@| (aaa "aaa"))) ==> ok
passed.
Testing mw.interp =============================================================
testing bindings in #<module mw.interp> ... ok
test interp-generic, expects (2 2 2) ==> ok
passed.
Testing mw.mime-type ==========================================================
testing bindings in #<module mw.mime-type> ... ok
test get-mime-type, expects ("text/html" "application/pdf") ==> ok
test file-mime-type, expects "application/rdf+xml" ==> ok
test add-mime-type!, expects ("application/hoge" "application/hoge") ==> ok
passed.
Testing mw.persistent =========================================================
testing bindings in #<module mw.persistent> ... ok
test creating database, expects #t ==> ok
test creating & persistent, expects "hoge" ==> ok
test change instance, expects 99 ==> ok
test serialize <persistent>, expects #t ==> ok
test serialize <hash-table>, expects #t ==> ok
test Collection, expects ("taro" "bar" "hoge") ==> ok
test Transaction 1, expects 99 ==> ok
test Transaction 2, expects #f ==> ok
test Delete, expects #f ==> ok
test Delete, expects #f ==> ok
passed.
Testing mw.plugin =============================================================
testing bindings in #<module mw.plugin> ... ok
test initialize-plugins, expects (8) ==> ok
passed.
Testing mw.servelet.cgi =======================================================
testing bindings in #<module mw.servelet.cgi> ... ERROR: symbols referenced but not defined: main(make-cgi-script-servelet)
test run cgi-servelet, expects "HOGE" ==> ok
test run-cgi-script->string-list (using parameters), expects "GET" ==> ERROR: GOT "\"GET\""
failed.
discrepancies found.  Errors are:
test bindings in module mw.servelet.cgi: expects () => got "symbols referenced but not defined: main(make-cgi-script-servelet)"
test run-cgi-script->string-list (using parameters): expects "GET" => got "\"GET\""
Testing mw.servelet.fs ========================================================
testing bindings in #<module mw.servelet.fs> ... ok
test GET /hoge.text, expects #t ==> ok
test GET /, expects #t ==> ok
test Not found, expects "404" ==> ok
test Forbidden, expects "403" ==> ok
passed.
Testing mw.httpd ==============================================================
testing bindings in #<module mw.server.httpd> ... ERROR: symbols referenced but not defined: write-tree(http-response)
<parse-request-line>-----------------------------------------------------------
test parse-request-line, expects ("GET" "/hoge" "HTTP/1.0") ==> ok
test parse-request-line, expects ("GET" "/hoge" "HTTP/1.1") ==> ok
test parse-request-line error HTTP/1.2?, expects #t ==> ok
<parse-request-uri>------------------------------------------------------------
test parse-request-uri /bar/hoge?jojo, expects ("bar" "/hoge" "jojo") ==> ok
test parse-request-uri /bar, expects ("bar" #f #f) ==> ok
test parse-request-uri /bar?jojo, expects ("bar" #f "jojo") ==> ok
test parse-request-uri /, expects ("" #f #f) ==> ok
test parse-request-uri /?ABC, expects ("" #f "ABC") ==> ok
<http-metavariables>-----------------------------------------------------------
test http-metavariables, expects () ==> ok
test http-metavariable-set! & ref, expects "ORAORA!!!" ==> ok
test http-metavariable-ref, expects #f ==> ok
<httpd>------------------------------------------------------------------------
test default servelet, expects "hoge" ==> ok
test servelet jojo, expects "ORAORA!!!" ==> ok
failed.
discrepancies found.  Errors are:
test bindings in module mw.server.httpd: expects () => got "symbols referenced but not defined: write-tree(http-response)"
Testing mw.server.repl ========================================================
testing bindings in #<module mw.server.repl> ... ok
test repl-eval, expects "((8 . 8) 20)" ==> ok
test repl-eval (error), expects "*** ERROR: 8" ==> ok
passed.
Testing mw.server =============================================================
testing bindings in #<module mw.server> ... ok
test run-server, expects "2x2" ==> ok
passed.
Testing mw.set ================================================================
testing bindings in #<module mw.set> ... ok
test , expects (6 "scheme" "lisp" "elisp" "haskell" "sml" "ocaml") ==> ok
test subseq*, expects ("lisp" "elisp") ==> ok
test <class/set/set>, expects (4 . #t) ==> ok
test set-intersection, expects ("ocaml") ==> ok
test map-set$, expects ("object" "hoge" "jojo") ==> ok
test <elt> <= <set-set>, expects (#f #f) ==> ok
test delete! <elt>, expects #f ==> ok
test delete! <set>, expects #f ==> ok
test (<A> <= (subseq* <A> (- (size-of <A>) 2))), expects #f ==> ok
passed.
Testing mw.test.cgi ===========================================================
testing bindings in #<module mw.test.cgi> ... ok
test define-cgi-script, expects #t ==> ok
test call-with-cgi-script 1, expects "JOJO" ==> ok
test call-with-cgi-script 2, expects "abc" ==> ok
passed.
Testing mw.textlight ==========================================================
testing bindings in #<module mw.textlight> ... ok
test read h2, expects (h2 "Headline") ==> ok
test read h3, expects (h3 "Headline") ==> ok
test read h6, expects (h6 "Headline") ==> ok
test read List, expects (ol (li "hoge") (li (ol (li "hoge") (li "jojo"))) (li "bar") (li (ul (li "bar") (li "jojo")))) ==> ok
test read Paragraph, expects (p "hoge" "hoge") ==> ok
test read Preformatted, expects (pre " hoge" "\n" " hoge") ==> ok
test skip comment line, expects (p "hoge" "hoge") ==> ok
test read Macro [table], expects (table (tr (td "hoge") (td "bar")) (tr (td "bar") (td "hoge"))) ==> ok
test read Macro [table] th, expects (table (tr (th "hoge") (th "bar")) (tr (td "bar") (td "hoge"))) ==> ok
test read Macro [table caption], expects (table (caption "jojo") (tr (td "hoge") (td "bar")) (tr (td "bar") (td "hoge"))) ==> ok
test read Macro [dl], expects (dl (dt "hoge") (dd "bar") (dt "bar") (dd "hoge") (dt "huga") (dd "test jojo abc defg")) ==> ok
passed.
Testing mw.time.http ==========================================================
testing bindings in #<module mw.time.http> ... ok
test time->http-date, expects "Tue, 11 Oct 2005 09:52:12 GMT" ==> ok
passed.
Testing mw.time.w3cdtf ========================================================
testing bindings in #<module mw.time.w3cdtf> ... ok
test w3cdtf->time, expects #t ==> ok
test time->w3cdtf <> w3cdtf->time, expects "2005-08-21T17:38:30Z" ==> ok
test time->w3cdtf <local> w3cdtf->time, expects "2005-08-21T17:38:30+09:00" ==> ok
passed.
Testing mw.user ===============================================================
testing bindings in #<module mw.user> ... ok
test make-user, expects "hoge" ==> ok
test match-user 1, expects "hoge" ==> ok
test match-user 2, expects #f ==> ok
test match-user 3, expects "hoge" ==> ok
test user-password-change, expects (#f "hoge") ==> ok
passed.
Testing mw.util ===============================================================
testing bindings in #<module mw.util> ... ok
test get-error-string, expects "hoge" ==> ok
test get-error-string long-message, expects "*** ERROR: hoge" ==> ok
test check=>, expects (a b c) ==> ok
test check=>, expects #f ==> ok
test check=>, expects 88 ==> ok
test let$, expects (1 2 3) ==> (1 2 3)ok
test and*=>, expects #\a ==> ok
test and*=>, expects #f ==> ok
test and=> 1, expects 20 ==> ok
test and=> 2, expects #f ==> ok
test and=> 3, expects 3 ==> ok
test receive-alist 1, expects (20 . 50) ==> ok
test receive-alist 2, expects (20 50) ==> ok
test receive-slot 1, expects (20 30 40) ==> ok
test receive-slot 2, expects (20 40 . 30) ==> ok
test slot-update!, expects 88 ==> ok
test define-table (eq?), expects 8 ==> ok
test define-table (string=?), expects 8 ==> ok
test define-table (), expects b ==> ok
test define-table (get x . def), expects "hoge" ==> ok
test define-table (add delete!), expects (80 . #f) ==> ok
test case*, expects ok ==> ok
passed.
Testing mw.view ===============================================================
testing bindings in #<module mw.view> ... ok
test view, expects "hoge" ==> ok
test view, expects "hogehoge" ==> ok
passed.
Testing mw.persistent =========================================================
testing bindings in #<module mw.persistent> ... ok
test creating database, expects #t ==> ok
test creating & persistent, expects "hoge" ==> ok
test change instance, expects 99 ==> ok
test serialize <persistent>, expects #t ==> ok
test serialize <hash-table>, expects #t ==> ok
test Collection, expects ("taro" "bar" "hoge") ==> ok
test Transaction 1, expects 99 ==> ok
test Transaction 2, expects #f ==> ok
test Delete, expects #f ==> ok
test Delete, expects #f ==> ok
passed.
Testing mw.persistent =========================================================
testing bindings in #<module mw.persistent> ... ok
test creating database, expects #t ==> ok
test creating & persistent, expects "hoge" ==> ok
test change instance, expects 99 ==> ok
test serialize <persistent>, expects #t ==> ok
test serialize <hash-table>, expects #t ==> ok
test Collection, expects ("taro" "bar" "hoge") ==> ok
test Transaction 1, expects 99 ==> ok
test Transaction 2, expects #f ==> ok
test Delete, expects #f ==> ok
test Delete, expects #f ==> ok
passed.
Testing mw.persistent =========================================================
testing bindings in #<module mw.persistent> ... ok
test creating database, expects #t ==> ok
test creating & persistent, expects "hoge" ==> ok
test change instance, expects 99 ==> ok
test serialize <persistent>, expects #t ==> ok
test serialize <hash-table>, expects #t ==> ok
test Collection, expects ("taro" "bar" "hoge") ==> ok
test Transaction 1, expects 99 ==> ok
test Transaction 2, expects #f ==> ok
test Delete, expects #f ==> ok
test Delete, expects #f ==> ok
passed.
Testing mw.persistent =========================================================
testing bindings in #<module mw.persistent> ... ok
test creating database, expects #t ==> ok
test creating & persistent, expects "hoge" ==> ok
test change instance, expects 99 ==> ok
test serialize <persistent>, expects #t ==> ok
test serialize <hash-table>, expects #t ==> ok
test Collection, expects ("taro" "bar" "hoge") ==> ok
test Transaction 1, expects 99 ==> ok
test Transaction 2, expects #f ==> ok
test Delete, expects #f ==> ok
test Delete, expects #f ==> ok
passed.
Testing mw.persistent =========================================================
testing bindings in #<module mw.persistent> ... ok
test creating database, expects #t ==> ok
test creating & persistent, expects "hoge" ==> ok
test change instance, expects 99 ==> ok
test serialize <persistent>, expects #t ==> ok
test serialize <hash-table>, expects #t ==> ok
test Collection, expects ("taro" "bar" "hoge") ==> ok
test Transaction 1, expects 99 ==> ok
test Transaction 2, expects #f ==> ok
test Delete, expects #f ==> ok
test Delete, expects #f ==> ok
passed.
Testing mw.persistent =========================================================
testing bindings in #<module mw.persistent> ... ok
test creating database, expects #t ==> ok
test creating & persistent, expects "hoge" ==> ok
test change instance, expects 99 ==> ok
test serialize <persistent>, expects #t ==> ok
test serialize <hash-table>, expects #t ==> ok
test Collection, expects ("taro" "bar" "hoge") ==> ok
test Transaction 1, expects 99 ==> ok
test Transaction 2, expects #f ==> ok
test Delete, expects #f ==> ok
test Delete, expects #f ==> ok
passed.
Testing mw.persistent =========================================================
testing bindings in #<module mw.persistent> ... ok
test creating database, expects #t ==> ok
test creating & persistent, expects "hoge" ==> ok
test change instance, expects 99 ==> ok
test serialize <persistent>, expects #t ==> ok
test serialize <hash-table>, expects #t ==> ok
test Collection, expects ("taro" "bar" "hoge") ==> ok
test Transaction 1, expects 99 ==> ok
test Transaction 2, expects #f ==> ok
test Delete, expects #f ==> ok
test Delete, expects #f ==> ok
passed.
Testing mw.persistent =========================================================
testing bindings in #<module mw.persistent> ... ok
test creating database, expects #t ==> ok
test creating & persistent, expects "hoge" ==> ok
test change instance, expects 99 ==> ok
test serialize <persistent>, expects #t ==> ok
test serialize <hash-table>, expects #t ==> ok
test Collection, expects ("taro" "bar" "hoge") ==> ok
test Transaction 1, expects 99 ==> ok
test Transaction 2, expects #f ==> ok
test Delete, expects #f ==> ok
test Delete, expects #f ==> ok
passed.
Testing mw.persistent =========================================================
testing bindings in #<module mw.persistent> ... ok
test creating database, expects #t ==> ok
test creating & persistent, expects "hoge" ==> ok
test change instance, expects 99 ==> ok
test serialize <persistent>, expects #t ==> ok
test serialize <hash-table>, expects #t ==> ok
test Collection, expects ("taro" "bar" "hoge") ==> ok
test Transaction 1, expects 99 ==> ok
test Transaction 2, expects #f ==> ok
test Delete, expects #f ==> ok
test Delete, expects #f ==> ok
passed.
Testing mw.util ===============================================================
testing bindings in #<module mw.util> ... ok
test get-error-string, expects "hoge" ==> ok
test get-error-string long-message, expects "*** ERROR: hoge" ==> ok
test check=>, expects (a b c) ==> ok
test check=>, expects #f ==> ok
test check=>, expects 88 ==> ok
test let$, expects (1 2 3) ==> (1 2 3)ok
test and*=>, expects #\a ==> ok
test and*=>, expects #f ==> ok
test and=> 1, expects 20 ==> ok
test and=> 2, expects #f ==> ok
test and=> 3, expects 3 ==> ok
test receive-alist 1, expects (20 . 50) ==> ok
test receive-alist 2, expects (20 50) ==> ok
test receive-slot 1, expects (20 30 40) ==> ok
test receive-slot 2, expects (20 40 . 30) ==> ok
test slot-update!, expects 88 ==> ok
test define-table (eq?), expects 8 ==> ok
test define-table (string=?), expects 8 ==> ok
test define-table (), expects b ==> ok
test define-table (get x . def), expects "hoge" ==> ok
test define-table (add delete!), expects (80 . #f) ==> ok
test case*, expects ok ==> ok
passed.
Testing mw.util ===============================================================
testing bindings in #<module mw.util> ... ok
test get-error-string, expects "hoge" ==> ok
test get-error-string long-message, expects "*** ERROR: hoge" ==> ok
test check=>, expects (a b c) ==> ok
test check=>, expects #f ==> ok
test check=>, expects 88 ==> ok
test let$, expects (1 2 3) ==> (1 2 3)ok
test and*=>, expects #\a ==> ok
test and*=>, expects #f ==> ok
test and=> 1, expects 20 ==> ok
test and=> 2, expects #f ==> ok
test and=> 3, expects 3 ==> ok
test receive-alist 1, expects (20 . 50) ==> ok
test receive-alist 2, expects (20 50) ==> ok
test receive-slot 1, expects (20 30 40) ==> ok
test receive-slot 2, expects (20 40 . 30) ==> ok
test slot-update!, expects 88 ==> ok
test define-table (eq?), expects 8 ==> ok
test define-table (string=?), expects 8 ==> ok
test define-table (), expects b ==> ok
test define-table (get x . def), expects "hoge" ==> ok
test define-table (add delete!), expects (80 . #f) ==> ok
test case*, expects ok ==> ok
passed.
Testing mw.util ===============================================================
testing bindings in #<module mw.util> ... ok
test get-error-string, expects "hoge" ==> ok
test get-error-string long-message, expects "*** ERROR: hoge" ==> ok
test check=>, expects (a b c) ==> ok
test check=>, expects #f ==> ok
test check=>, expects 88 ==> ok
test let$, expects (1 2 3) ==> (1 2 3)ok
test and*=>, expects #\a ==> ok
test and*=>, expects #f ==> ok
test and=> 1, expects 20 ==> ok
test and=> 2, expects #f ==> ok
test and=> 3, expects 3 ==> ok
test receive-alist 1, expects (20 . 50) ==> ok
test receive-alist 2, expects (20 50) ==> ok
test receive-slot 1, expects (20 30 40) ==> ok
test receive-slot 2, expects (20 40 . 30) ==> ok
test slot-update!, expects 88 ==> ok
test define-table (eq?), expects 8 ==> ok
test define-table (string=?), expects 8 ==> ok
test define-table (), expects b ==> ok
test define-table (get x . def), expects "hoge" ==> ok
test define-table (add delete!), expects (80 . #f) ==> ok
test case*, expects ok ==> ok
passed.
Testing mw.util ===============================================================
testing bindings in #<module mw.util> ... ok
test get-error-string, expects "hoge" ==> ok
test get-error-string long-message, expects "*** ERROR: hoge" ==> ok
test check=>, expects (a b c) ==> ok
test check=>, expects #f ==> ok
test check=>, expects 88 ==> ok
test let$, expects (1 2 3) ==> (1 2 3)ok
test and*=>, expects #\a ==> ok
test and*=>, expects #f ==> ok
test and=> 1, expects 20 ==> ok
test and=> 2, expects #f ==> ok
test and=> 3, expects 3 ==> ok
test receive-alist 1, expects (20 . 50) ==> ok
test receive-alist 2, expects (20 50) ==> ok
test receive-slot 1, expects (20 30 40) ==> ok
test receive-slot 2, expects (20 40 . 30) ==> ok
test slot-update!, expects 88 ==> ok
test define-table (eq?), expects 8 ==> ok
test define-table (string=?), expects 8 ==> ok
test define-table (), expects b ==> ok
test define-table (get x . def), expects "hoge" ==> ok
test define-table (add delete!), expects (80 . #f) ==> ok
test case*, expects ok ==> ok
passed.
